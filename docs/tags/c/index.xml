<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/c/</link>
    <description>Recent content in C on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Wed, 26 Mar 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.brainbaking.com/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>gtest</title>
      <link>http://www.brainbaking.com/wiki/code/c/testing/gtest/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/testing/gtest/</guid>
      <description>Google Test Downloaden op https://code.google.com/p/googletest/downloads/list
Waarom?
 Platform onafhankelijk Snelheid Geen gezeik met Managed C++, compatibel met &amp;ldquo;eender wat&amp;rdquo; (enige vereiste: cc compiler variant) Wordt veel gebruikt (Chromium, Stack overflow)  Waarom niet?
 slechte of geen integratie met VStudio (zie onder) wéér een andere syntax dan MS .NET testen beetje awkward assertions  Assertions schrijven #include &amp;quot;../BaseCode/BaseCode.h&amp;quot; #include &amp;quot;gtest/gtest.h&amp;quot; TEST(MyTestCase, MyTest_Success) { EXPECT_EQ(2, MySum(1, 1)); } TEST(MyTestCase, MyTest_Failure) { EXPECT_EQ(3, MySum(1, 2)); }  Waarbij dan BaseCode uw system under test zaken bevat (waar MySum defined is)</description>
    </item>
    
    <item>
      <title>linking</title>
      <link>http://www.brainbaking.com/wiki/code/c/linking/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/linking/</guid>
      <description>Linking obj/dlls Probleemstelling: verschillende solutions, code over solutions heen willen gebruiken.
Dit compileert by default altijd, maar tijdens het linken van de gecompileerde files loopt het mis. Waarom? Omdat er geen dllexport voorzien is.  Op te lossen:
#ifndef RESOURCE_UTILS_H #define RESOURCE_UTILS_H #include &amp;quot;Utility.h&amp;quot; #ifdef _DLL #define DllExImport __declspec(dllexport) #else #define DllExImport __declspec(dllimport) #endif class DllExImport ResourceUtils { public: static RAIIObject&amp;lt;HICON&amp;gt; getIcon(int resourceId); static RAIIObject&amp;lt;HICON&amp;gt; getIcon(HINSTANCE resourceHandleInstance, int resourceId); private: ResourceUtils() {} }; #endif  in de cpp file hoeft niets speciaal meer te staan.</description>
    </item>
    
    <item>
      <title>mfc</title>
      <link>http://www.brainbaking.com/wiki/code/c/mfc/</link>
      <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/mfc/</guid>
      <description>MFC ❗️ MFC en AFX is hetzelfde:
 One interesting quirk of MFC is the use of &amp;ldquo;Afx&amp;rdquo; as the prefix for many functions, macros and the standard precompiled header name &amp;ldquo;stdafx.h&amp;rdquo;. During early development what became MFC was called &amp;ldquo;Application Framework Extensions&amp;rdquo; and abbreviated &amp;ldquo;Afx&amp;rdquo;. The name Microsoft Foundation Classes (MFC) was adopted too late in the release cycle to change these references
 Strings in MFC Gebruik CString - werkt niet op non-win32 omgevingen.</description>
    </item>
    
    <item>
      <title>win32specifics</title>
      <link>http://www.brainbaking.com/wiki/code/c/win32specifics/</link>
      <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/win32specifics/</guid>
      <description>code:c &amp;gt;&amp;gt; Win32 API specifics Get Loaded DLL info from given process huidig proces: GetCurrentProcessId() - dit is een HANDLE.
CString ExceptionHandler::GetLoadedDllInfo() const { CString dlls = _T(&amp;quot;&amp;quot;); HANDLE process = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, GetCurrentProcessId()); if(process ###### NULL) { return dlls; } HMODULE hMods[1024]; DWORD cbNeeded; BOOL modules = EnumProcessModules(process, hMods, sizeof(hMods), &amp;amp;cbNeeded); if(!modules) { return dlls; } for (int i = 0; i &amp;lt; (cbNeeded / sizeof(HMODULE)); i++) { TCHAR szModName[MAX_PATH]; if (GetModuleFileNameEx(process, hMods[i], szModName, sizeof(szModName) / sizeof(TCHAR))) { dlls.</description>
    </item>
    
    <item>
      <title>basics</title>
      <link>http://www.brainbaking.com/wiki/code/c/basics/</link>
      <pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/basics/</guid>
      <description>C(++) Basics Scope C++ heeft block level scope, net als Java, alleen is het mogelijk om een variabele binnen een for loop dezelfde naam te geven als een die buiten die block gedefiniëerd is, terwijl dat in Java niet gaat:
int j; for(int i = 0; i &amp;lt; 10; i++) { int j = i + 1; // compile fout in java }  Pointer scope auto_ptr kan gebruikt worden om een pointer automatisch te verwijderen met delete wanneer deze scope verliest - alle andere zaken moet je zelf opkuisen.</description>
    </item>
    
    <item>
      <title>preprocessing</title>
      <link>http://www.brainbaking.com/wiki/code/c/preprocessing/</link>
      <pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/preprocessing/</guid>
      <description>Preprocessing Handige macro&amp;rsquo;s Exception/Debug informatie expanden #define _ERROR_STR2(a) #a #define _ERROR_STR(a) _ERROR_STR2(a) #define ERROR_INFO(fn) _T(_ERROR_STR(__FILE__&amp;quot; line: &amp;quot;__LINE__&amp;quot; function: &amp;quot;fn))  Te gebruiken als someFn(ERROR_INFO(&amp;quot;bla&amp;quot;)). Merk op dat __FUNCTION__ of __FUNC__ ook gebruikt kan worden, afhankelijk van de C++ compiler, maar dit is geen deel van de standaard (vanaf C++ v11).
De #a notatie wordt gebruikt om iets te stringifyen in de preprocessor, vandaar de delegate:
 Sometimes you may want to convert a macro argument into a string constant.</description>
    </item>
    
    <item>
      <title>threading</title>
      <link>http://www.brainbaking.com/wiki/code/c/threading/</link>
      <pubDate>Mon, 02 Dec 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/threading/</guid>
      <description>Threading Handige links:
 Thread synchronization for beginners  Thread-safe Singleton pattern Bijna onmogelijk in C++ &amp;lt; v11 blijkbaar?
Onderstaand voorbeeld gebruikt Win32 code (WaitForSingleObject) en een mutex om te wachten:
#pragma once #include &amp;lt;WinBase.h&amp;gt; class AddinProcessService { static AddinProcessService *singletonInstance; AddinProcessService() : m_coupon(_T(&amp;quot;&amp;quot;)), m_hostServiceAddress(_T(&amp;quot;&amp;quot;)) {} public: inline const CString&amp;amp; GetHostServiceAddress() const { return m_hostServiceAddress; } inline const CString&amp;amp; GetCoupon() const { return m_coupon; } inline void SetCoupon(CString coupon) { m_coupon = coupon; } inline void SetHostServiceAddress(CString address) { m_hostServiceAddress = address; } static AddinProcessService* getSingletonInstance() { static volatile int initialized = 0; static HANDLE mtx; if (!</description>
    </item>
    
    <item>
      <title>testexplorer</title>
      <link>http://www.brainbaking.com/wiki/code/c/testing/testexplorer/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/testing/testexplorer/</guid>
      <description>Visual Studio 2012 Test Explorer framework Waarom?
 Integratie VStudio, zelfde manier om te &amp;ldquo;runnen&amp;rdquo; als C# testen unmanaged (native) C++ code testen zonder vettige /cli mode die nodig is. Voor mixed team C#/C++ misschien beter/makkelijker?  Waarom niet?
 Weeral iets anders, Team Test buiten? Wat gaat het zijn voor VS3013? Niet 100% dezelfde syntax als C# (toch al closer, maar bvb geen attributes etc) VS2012 only momentel, dus 2008 = kinkloppen  Voorbeeld project in VS2012: Assertions schrijven Gebruik namespace CppUnitTestFramework - voorbeeld:</description>
    </item>
    
    <item>
      <title>home</title>
      <link>http://www.brainbaking.com/wiki/code/c/</link>
      <pubDate>Mon, 05 Aug 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/</guid>
      <description> C/C++ &amp;gt;&amp;gt; Home Inhoudsopgave .|js navbar nocookie&amp;rsquo;&amp;gt;
Nuttige links  The 5 minute guide to C Pointers A tutorial on Pointers and Arrays in C  </description>
    </item>
    
    <item>
      <title>home</title>
      <link>http://www.brainbaking.com/wiki/code/c/testing/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/testing/</guid>
      <description>code:c:testing &amp;gt;&amp;gt; Home Inhoudsopgave .|js navbar nocookie&amp;rsquo;&amp;gt;</description>
    </item>
    
    <item>
      <title>teamtest</title>
      <link>http://www.brainbaking.com/wiki/code/c/testing/teamtest/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/testing/teamtest/</guid>
      <description>Visual Studio 2005 TeamTest Framework Hoofdartikel (2005, C# voorbeelden): http://msdn.microsoft.com/en-us/library/ms379625(v=vs.80).aspx
Waarom?
 Zelfde syntax als built-in C# unit tests voor Visual Studio Makkelijker te lezen dan bvb code/c/testing/gtest Garbage collector van Managed C++, joepie (?) Toch mogelijk om unmanaged native C++ te testen (zie onder), integratie VStudio.  Waarom niet?
 Dropped support voor VS2012? zie code/c/testing/testexplorer in de plaats (native C++) /cli flag miserie (zie onder) Onduidelijke syntax voor hardcore C++ users die niet aan C# gewend zijn  Visual Studio 2008 Hiervoor moeten we een apart test project aanmaken dat met /CLR flag compileert om de .</description>
    </item>
    
  </channel>
</rss>