<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/javascript/</link>
    <description>Recent content in Javascript on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Tue, 26 Jan 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.brainbaking.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Migrating from Extjs to React gradually</title>
      <link>http://www.brainbaking.com/post/react-in-extjs/</link>
      <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/post/react-in-extjs/</guid>
      <description>We were looking for a few alternatives to our big ExtJS 4 application. Since it&amp;rsquo;s not that easy to completely migrate from one front-end framework to the next, a possible solution would be to start developing new parts in another framework. There&amp;rsquo;s a lot of domain logic spread in Ext views and controllers - which shouldn&amp;rsquo;t be there, we are well aware of that. Let&amp;rsquo;s call it &amp;ldquo;legacy&amp;rdquo; :-)
The application right now uses Extjs as UI and C# as backend, and lets ext do the loading of the views/controllers (living in app.</description>
    </item>
    
    <item>
      <title>Unit Testing Extjs UI with Siesta</title>
      <link>http://www.brainbaking.com/post/unit-testing-extjs-ui/</link>
      <pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/post/unit-testing-extjs-ui/</guid>
      <description>WebDriver &amp;amp; js-heavy frameworks Writing scenario tests for javascript-heavy UI webpages can be really difficult. It gets complicated pretty quickly if you&amp;rsquo;re using a lot of async calls or a lot of javascript-heavy UI components. On our current project, we use Extjs as the UI layer in a single-page aspx page to bootstrap our Extjs app. Extjs is a (heavyweight) javascript framework for creating windows, panels, grids, buttons, menus, &amp;hellip; like you&amp;rsquo;re used to when using client/server desktop applications.</description>
    </item>
    
    <item>
      <title>home</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/</link>
      <pubDate>Tue, 29 Jul 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/</guid>
      <description>Javascript  Use functions to guard your scope and optimize encapsulation, gentlemen!
 JS in één-twéé-drié:
https://docs.google.com/present/edit?id######0AXaRvIf-WHu3ZGRjNnFnN2pfMmM3ajVmdjN0&amp;amp;hlen&amp;amp;authkey=COqTqcsL
❗️ JS fiddles: http://jsfiddle.net/user/jefklak/fiddles/
JS Must watch videos
https:*github.com/vjdhama/js-must-watch
Inhoudsopgave Om Prototypal Inheritance te kunnen begrijpen, moeten eerst een aantal andere zaken duidelijk worden.
 De basislegging van Javascript versus klassieke class-based OO systemen:  Hoe werken function referenties en declaraties Functies en objecten in functies steken om klassen te emuleren:  Er is geen verschil tussen functies en variabelen, het zijn allemaal key/value pairs (&amp;rdquo;first-class citizens&amp;rdquo;) De delete operator gebruiken om een key te verwijderen uit een object  Closures als functies definiëren Constructors als functies definiëren  Het aanroepen van functies:  De werking van de this operator, functies zijn pas gebonden als ze aangeroepen worden!</description>
    </item>
    
    <item>
      <title>async</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/async/</link>
      <pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/async/</guid>
      <description>Async coding in JS Asynchronous programming in JS: APIs interview (infoQ)
Het probleem Alle events in javascript zijn asynchroon. Dat wil zeggen dat we geen idee hebben wanneer de eigenlijke code uitgevoerd is, en we een callback closure moeten meegeven, die verder werkt als de asynchrone code uitgevoerd is.
Dit is oké voor 1-2 asynchrone calls. Maar stel u voor dat we 4+ async calls moeten maken om werk gedaan te krijgen.</description>
    </item>
    
    <item>
      <title>Enhancing the builder pattern with closures</title>
      <link>http://www.brainbaking.com/post/builders-dsl/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/post/builders-dsl/</guid>
      <description>This post is inspired by Venkat Subramaniam&amp;rsquo;s Devoxx 2013 talk Thinking Functional Style. See downloads at agiledeveloper.com which has a rather cool Groovy example.
Classic builders For years, I&amp;rsquo;ve been using the builder pattern to quickly create new objects to be inserted into the database or to inject our domain objects with the required data. We started with so called &amp;ldquo;Object Mothers&amp;rdquo;, static methods which simply create and fill up an object, passing in a huge amount of parameters.</description>
    </item>
    
    <item>
      <title>angular</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/testing/angular/</link>
      <pubDate>Wed, 05 Jun 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/testing/angular/</guid>
      <description>AngularJS testing Voorbeeld voor angular app met mocks en testing en al: angular-seed
Mocking en zo Zie angular.mock.module - twee hoofdfuncties die belangrijk zijn: module() en inject(). Het eerste maakt de module aan en het tweede zorgt voor de mock dependency injectie. Bijvoorbeeld:
angular .module(&#39;bla.services&#39;, []) .factory(&#39;$bla&#39;, [&#39;$http&#39;, function($http) { // do stuff with $http, like a .get return { go: function() {} } }]) ;  Je kan dus met $bla.</description>
    </item>
    
    <item>
      <title>angular</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/angular/</link>
      <pubDate>Wed, 22 May 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/angular/</guid>
      <description>Angular Testing: zie code/javascript/testing/angular
Caching in HTTP IE8 cachet by default alle XHR requests en daar kan je niet zomaar iets aan veranderen. Een unieke URL elke keer callen is een oplossing (met new Date().getTime() bijvoorbeeld), maar je kan ook aan de server kant de Cache-Control header parameter op no-cache zetten.
Zie issue https://github.com/angular/angular.js/issues/1418
Hoe werkt &amp;hellip; under the hood? dependency injection Zie http://www.alexrothenberg.com/2013/02/11/the-magic-behind-angularjs-dependency-injection.html
TLDR: ze gebruiken toString() om argument namen te parsen, zodat de volgorde niet uitmaakt wat het normaal wel doet in de magische array arguments!</description>
    </item>
    
    <item>
      <title>karma</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/testing/karma/</link>
      <pubDate>Fri, 17 May 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/testing/karma/</guid>
      <description>Karma (Testacular) Ook integratie met code/javascript/testing/phantomjs mogelijk.
Installatie Om de Karma testen gedraaid te krijgen moet Node geïnstalleerd zijn samen met karma (npm install karma -g)
Voor de ANSI console in eclipse: http://www.mihai-nita.net/eclipse/ installeren
Voor de Karma Phantom launcher in eclipse: dit importeren (launch file)
&amp;lt;?xml version######&amp;quot;1.0&amp;quot; encoding&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt; &amp;lt;launchConfiguration type=&amp;quot;org.eclipse.ui.externaltools.ProgramLaunchConfigurationType&amp;quot;&amp;gt; &amp;lt;listAttribute key=&amp;quot;org.eclipse.debug.ui.favoriteGroups&amp;quot;&amp;gt; &amp;lt;listEntry value=&amp;quot;org.eclipse.ui.externaltools.launchGroup&amp;quot;/&amp;gt; &amp;lt;/listAttribute&amp;gt; &amp;lt;stringAttribute key######&amp;quot;org.eclipse.ui.externaltools.ATTR_LOCATION&amp;quot; value&amp;quot;${workspace_loc:/vitrine/src/test/javascript/test.bat}&amp;quot;/&amp;gt; &amp;lt;stringAttribute key######&amp;quot;org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY&amp;quot; value&amp;quot;${workspace_loc:/vitrine/src/test/javascript}&amp;quot;/&amp;gt; &amp;lt;/launchConfiguration&amp;gt;  Debuggen met eclipse gaat blijkbaar niet, daarvoor moet je best http://www.</description>
    </item>
    
    <item>
      <title>extjs4</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/extjs4/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/extjs4/</guid>
      <description>Extjs4 Documentatie: http://docs.sencha.com/ext-js/4-0/#!/api/
Aanmaken van klassen en managers die loaden Met Ext.define maak je een klasse aan, met Ext.create maak je een instantie van die klasse.
Een klasse heeft:
 configs methods properties events  Waarbij de configs de gegevens zijn doorgegeven met accolades:
Ext.define(&#39;test&#39;, { // config stuff });  Die configs worden herbruikt voor alle instanties die aangemaakt worden met Ext.create!! Dat staat op &amp;ldquo;klasse&amp;rdquo; niveau (ook al bestaat dat niet in JS&amp;hellip;)</description>
    </item>
    
    <item>
      <title>feeds</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/feeds/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/feeds/</guid>
      <description>JS RSS Feed Readers Doel: Client-side RSS feeds lezen en via jQuery toevoegen aan de DOM tree in de vorm van &amp;lt;li/&amp;gt; elementen.
Feed gebruiken ❗️ Prerequirements: Eerst jQuery includen, Klak code is afhankelijk hiervan
 Include javascript: 2 files nodig, core klak en feeds klak:html&amp;lt;script type######&amp;quot;text/javascript&amp;quot; src&amp;quot;http://www.jefklak.be/dev/js/klakCore.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type######&amp;quot;text/javascript&amp;quot; src&amp;quot;http://www.jefklak.be/dev/js/klakFeeds.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; Maak ergens een &amp;lt;div/&amp;gt; element met een unieke ID waar de inhoud van de feed in komt. Roep de feed code aan (Na DOM Load, we wijzigen de DOM tree!</description>
    </item>
    
    <item>
      <title>frameworks</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/</guid>
      <description>Hoe objecten extenden ❗️ Zie Uitleg over Javascript werking met inheritance en code/javascript/inleiding.
Prototype&amp;rsquo;s Extend Op de vorige wijze werkt bijvoorbeeld Prototype&amp;rsquo;s Element.Extend of $ (naast de CSS Selector natuurlijk).
// ignoring Prototype&#39;s initialize() constructor method var Poes = Class.create({ miauw: function() { return &amp;quot;prr&amp;quot;; } }); var Hond = Class.create({ blaf: function() { return &amp;quot;WOOF&amp;quot;; } }); var kat = new Poes(); Element.extend(kat, Hond); assertEquals(kat.blaf(), new Hond().blaf()); // hoo lee sjit  De bovenstaande code wordt intern gebruikt om inheritance te faken.</description>
    </item>
    
    <item>
      <title>handlebars</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/handlebars/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/handlebars/</guid>
      <description>Handlebars Algemene uitleg ea:
 http://javascriptissexy.com/handlebars-js-tutorial-learn-everything-about-handlebars-js-javascript-templating/#more-621 http://handlebarsjs.com/ http://tryhandlebarsjs.com/  Yeoman integratie Zie https://github.com/yeoman/yeoman/wiki/Handlebars-integration en code/javascript/frameworks/yeoman
Maakt gebruik van grunt - Zie https://github.com/gruntjs/grunt-contrib-handlebars/
Aanpassingen in Gruntfile.js:
grunt.initConfig({ // Project configuration // --------------------- handlebars: { compile: { files: { &amp;quot;app/scripts/templates.js&amp;quot;: [ &amp;quot;app/templates/*.hbs&amp;quot; ] }, options: { amd: true, processName: function(filename) { return filename .replace(&#39;app/templates/&#39;, &#39;&#39;) .replace(/&amp;lt;br/&amp;gt;.hbs$/, &#39;&#39;); } } } }, // ... watch: { handlebars: { files: [ &#39;app/templates/*.hbs&#39; ], tasks: &#39;handlebars reload&#39; }, // .</description>
    </item>
    
    <item>
      <title>inheritance</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/inheritance/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/inheritance/</guid>
      <description>Javascript Inheritance  JavaScript uses prototypal inheritance. This means that Javascript does not distinguish between classes/prototypes and instances and, therefore, we can add our desired behavior directly to the instance.
 &amp;ldquo;new&amp;rdquo; operator Zie http://unitstep.net/blog/2008/01/24/javascript-and-inheritance/  Gegeven de volgende functie:
function X(bla) { this.x = bla; console.log(&amp;quot;doeiets&amp;quot;); this.ding = function() { return this.x; }; }  Wat gebeurt er bij de klassieke manier van een &amp;ldquo;klasse&amp;rdquo; initialiseren? Zo:
new X(&amp;quot;argument&amp;quot;).</description>
    </item>
    
    <item>
      <title>inleiding</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/inleiding/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/inleiding/</guid>
      <description>Javascript Inleiding Primitives Soorten In javascript zijn er slechts 3 primitives:
 string (geassocieerd object: String) boolean (geassocieerd object: Boolean) number (geassocieerd object: Number)  Primitives zijn immutable! Toekennen van properties maakt ook een tijdelijk object aan, dus dit heeft geen nut.
Soort afchecken Aangezien JS loosely typed is, kunnen we nooit weten wat er nu in var variabele; steekt op een bepaald moment in de code. Om dit op te lossen kan men typeof gebruiken, een functie die een string teruggeeft wat het type van die variabele is.</description>
    </item>
    
    <item>
      <title>jquery</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/jquery/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/jquery/</guid>
      <description>Jquery Eigen CSS filters maken $.expr[&#39;:&#39;].external = function(elem,index,match) { var url = elem.href || elem.src, loc = window.location; return !!url.match(new RegExp(&#39;^&#39; + loc.protocol + &#39;//&#39; + &#39;(?!&#39; + loc.hostname + &#39;)&#39; )); }; // You can now use it within your selectors: // Find all external anchors: $(&#39;a:external&#39;); // Find all external script elements: $(&#39;script:external&#39;); // Determine if link is external: $(&#39;a#mylink&#39;).is(&#39;:external&#39;); // true/false  Via Things you may not know about jQuery</description>
    </item>
    
    <item>
      <title>knockout</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/knockout/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/knockout/</guid>
      <description>Knockout JS Paged client-side table zelf voorzien ❗️ Zie http://jsfiddle.net/rniemeyer/5Xr2X/
 The basic idea is that you have a dependentObservable that represents the rows in your current page and bind your table to it. You would slice the overall array to get the rows for the page. Then, you have pager buttons/links that manipulate the page index, which causes the dependentObservable to be re-evaluated resulting in the current rows.</description>
    </item>
    
    <item>
      <title>magic_properties</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/magic_properties/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/magic_properties/</guid>
      <description>Javascript Magic properties ❗️ Waarschuwing: deze properties zijn normaal gezien niet toegankelijk en dienen enkel om uw algemene kennis van Javascript te verbreden. Deze &amp;ldquo;magic&amp;rdquo; properties zijn meestal exposed in Mozilla Firefox of via de Firebug plugin. Sommigen hiervan worden overgenomen in de nieuwe versie van javascript, versie 1.8.5 die de ECMA Standaard v5 implementeert. Dit is voor de volgende versie van Chrome en FF4.
magic properties via Firefox Intern prototype object -&amp;gt; _ _proto_ _</description>
    </item>
    
    <item>
      <title>mobile</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/mobile/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/mobile/</guid>
      <description>JS Clientside Mobile frameworks Native applicaties deployen Gebruik http://www.phonegap.com/ om met CSS3+HTML5+JS een native applicatie te builden - ondersteuning voor iOS, Android, Blackberry etc. Ondersteunt ook native hardware zoals camera, accelerometer, GPS etc - zie Documentatie
WebSockets in Phonegap Zit in de milestone 1.0 planning - nog niet officiëel ondersteund.
 Voor Android: Zie http:*anismiles.wordpress.com/2011/02/03/websocket-support-in-android%E2%80%99s-phonegap-apps/ en source Voor iPhone: Zie http:*remysharp.com/2010/10/04/websockets-in-phonegap-projects/ en source  Mobile apps &amp;amp; Viewports In de &amp;lt;head/&amp;gt; tag is het belangrijk om viewport meta-informatie aan te geven zoals:</description>
    </item>
    
    <item>
      <title>performance</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/performance/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/performance/</guid>
      <description>Javascript Performance ❗️ Best practices on performance: zie http:*developer.yahoo.com/performance/rules.html en ook http:*sites.google.com/site/io/even-faster-web-sites
Script volgorde  de &amp;lt;head/&amp;gt; tag wordt door de browser geparsed, inclusief sequentiëel alle &amp;lt;script/&amp;gt; blocks. Op dit moment kunnen scripts GEEN DOM Manipulatie doen. de &amp;lt;body/&amp;gt; tag wordt door de browser geparsed, &amp;hellip; de DOM tree is geladen nadat alle elementen in body geparsed zijn, dus events als $(document).ready worden gefired. de resources worden verder geladen (&amp;lt;img/&amp;gt; source attributes, dynamische script of css tags - zie volgende sectie -, en eventuele frames) de hele pagina is geladen, dus events als window.</description>
    </item>
    
    <item>
      <title>phantomjs</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/testing/phantomjs/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/testing/phantomjs/</guid>
      <description>Test automatisatie: PhantomJS Een experiment om mijn JasmineTestRunner uit te breiden (of volledig op te splitsen) van Rhino + Envjs 1.2 naar PhantomJS 1.4 (liefst 1.5 maar dit moet ik nog compilerend krijgen onder Windows).
Phantom.js test code Start script console.log(&amp;quot;loading&amp;quot;); var page = new WebPage(); // Is nodig omdat anders in uw testpagina console.log() niets doet. page.onConsoleMessage = function(msg) { console.log(&amp;quot;debug from page: &amp;quot; + msg); }; /** * Phantom JS 1.</description>
    </item>
    
    <item>
      <title>pitfalls</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/pitfalls/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/pitfalls/</guid>
      <description>Pitfalls ❗️ Gebruik aub JSLint om onderstaande &amp;ldquo;probleempjes&amp;rdquo; makkelijker te kunnen tracen en aanpassen.
Strict mode in ECMA5 is ook iets héél handig.
-&amp;gt; Meer (al dan niet grappige) pitfalls/weetjes: http://www.wtfjs.com/
Objecten Javascript gebruikt intern de toString() functie wanneer objecten als keys worden toegekend. Dit wil zeggen dat eigenlijk de string representatie als key gebruikt wordt. Bijvoorbeeld:
var obj = {}; var key1 = new Object(); var key2 = new Object(); obj[key1] = &amp;quot;hi&amp;quot;; obj[key2] = &amp;quot;yo&amp;quot;; console.</description>
    </item>
    
    <item>
      <title>scoping</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/scoping/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/scoping/</guid>
      <description>Javascript Scoping Toplevel Scope Een stuk Javascript in een HTML pagina, zonder eender welke functie te definiëren, werkt altijd op top-level scope. Dat stelt het window object voor, waar we ook resolutie gegevens en dergelijke kunnen uithalen. Dus simpele variabelen declareren om in HTML te kunnen gebruiken werkt altijd op de globale scope:
var customerEmail = document.getElementById(&amp;quot;username&amp;quot;) + &amp;quot;@&amp;quot; + document.getElementById(&amp;quot;domain&amp;quot;) + &amp;quot;.com&amp;quot;; window.customerEmail // what did I do?? (null@null.</description>
    </item>
    
    <item>
      <title>serverside</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/serverside/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/serverside/</guid>
      <description>JS Serverside draaien JS Server Parsers Java: Rhino Vooral gericht op serverside integratie met bijvoorbeeld Java EE.
Zie http://www.mozilla.org/rhino/
C++: Google V8 Wordt bijvoorbeeld gebruikt in Google Chrome.
Zie http://code.google.com/p/v8/
-&amp;gt; Ook via CLI aan te spreken in .NET - zie http://jint.codeplex.com/
C: SpiderMonkey Wordt bijvoorbeeld gebruikt in Mozilla Firefox.
Zie http://www.mozilla.org/js/spidermonkey/
Headless DOM Manipulatie Omdat serverside Javascript geen window object als toplevel scope bestaat, kunnen we ook geen DOM manipulatie uitvoeren.</description>
    </item>
    
    <item>
      <title>snippets</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/snippets/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/snippets/</guid>
      <description>Losse Javascript Snippets Interessante links http://javascript.crockford.com/prototypal.html
Text Width Nut: Bereken tekst breedtes op een browser scherm onafhankelijk van de container waar hij in zit. Waarom: $(&amp;quot;bla&amp;quot;).getWidth() gaat altijd rekening houden met de bovenliggende container style! Dit voegt eerst een lege span toe aan de body, haalt de width op en smijt de span terug weg.
String.prototype.getTextWidth = function() { var sensor = $j(document.createElement(&amp;quot;span&amp;quot;)); sensor.append(this.toString()); $j(&amp;quot;body&amp;quot;).append(sensor); var width = sensor.width(); sensor.</description>
    </item>
    
    <item>
      <title>testing</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/testing/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/testing/</guid>
      <description>Testing JS Code Testen schrijven Klassieke Unit testen Frameworks gebruiken zoals jQuery&amp;rsquo;s QUnit die het makkelijk maken modulair te testen:
test(&amp;quot;dit zou dat moeten doen blabla&amp;quot;, function() { equal(expected, actual); ok(someThingExpectedToBeTrue); });  Mocking van bijvoorbeeld $ mogelijk via MockMe, een door Mockito geïnspireerde Javascript Object spy API. Iets van:
when(f)(&#39;in&#39;).thenReturn(&#39;out&#39;); assertEqual(&#39;out&#39;, f(&#39;in&#39;));  ❗️ Vereist Prototype JS, en JsUnit om de assert functions te kunnen gebruiken
Gedrag testen met Jasmine Inspiratie van de Ruby community gehaald, met name RSpec-based.</description>
    </item>
    
    <item>
      <title>troubleshooting</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/troubleshooting/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/troubleshooting/</guid>
      <description>JS Troubleshooting Debugging Gecko Slechts één adres nodig: http://getfirebug.com/
Internet Explorer &amp;lt; IE 6 De &amp;ldquo;officiële&amp;rdquo; web developer toolbar in IE6 kan totaal niets met javascript debugging aanvangen. Hiervoor gebruik je best &amp;ldquo;web development helper&amp;rdquo;: http://projects.nikhilk.net/WebDevHelper - Die maakt het mogelijk om JS statements uit te voeren en normaal gezien fatsoenlijke error logging uit te voeren. HTTP calls (zoals ajax) loggen gaat hier ook mee.
❗️ Een voorwaarde om het bovenstaande te laten werken is &amp;ldquo;disable external script debugging&amp;rdquo; uitzetten in IE via: Extra &amp;gt; Options &amp;gt; Advanced &amp;gt; Surfing &amp;gt; &amp;ldquo;foutopsporing in scripts uitschakelen&amp;rdquo; uitvinken.</description>
    </item>
    
    <item>
      <title>yeoman</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/yeoman/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/yeoman/</guid>
      <description>Build tools: Yeoman, Grunt, RequireJS ea Zie ook integratie met code/javascript/frameworks/handlebars.
Help nodig? Vast? &amp;gt;&amp;gt;
 http://gruntjs.com/installing-grunt http://yeoman.io/commandline.html http://requirejs.org/docs/api.html https://github.com/twitter/bower https://npmjs.org/doc/  Meer info over Yeoman, tooling support, scaffolding, etc:
 https://plus.google.com/115133653231679625609/posts/h8shHWJtcKd  Deploying Naar een FTP server Gebruik grunt-ftp-deploy node plugin: https://github.com/zonak/grunt-ftp-deploy
&#39;ftp-deploy&#39;: { build: { auth: { host: &#39;server.com&#39;, port: 21, authKey: &#39;key1&#39; }, src: &#39;/path/to/source/folder&#39;, dest: &#39;/path/to/destination/folder&#39;, exclusions: [&#39;/path/to/source/folder/**/.DS_Store&#39;, &#39;/path/to/source/folder/**/Thumbs.db&#39;, &#39;dist/tmp&#39;] } }  ❗️ auth key ref verwijst naar .</description>
    </item>
    
  </channel>
</rss>