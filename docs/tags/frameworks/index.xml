<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frameworks on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/frameworks/index.xml</link>
    <description>Recent content in Frameworks on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <atom:link href="http://www.brainbaking.com/tags/frameworks/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>angular</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/angular/</link>
      <pubDate>Wed, 22 May 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/angular/</guid>
      <description>

&lt;h1 id=&#34;angular&#34;&gt;Angular&lt;/h1&gt;

&lt;p&gt;Testing: zie &lt;a href=&#34;http://www.brainbaking.com/wiki/code/javascript/testing/angular/&#34;&gt;code/javascript/testing/angular&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;caching-in-http&#34;&gt;Caching in HTTP&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;IE8&lt;/code&gt; cachet by default alle XHR requests en daar kan je niet zomaar iets aan veranderen. Een unieke URL elke keer callen is een oplossing (met &lt;code&gt;new Date().getTime()&lt;/code&gt; bijvoorbeeld), maar je kan ook aan de server kant de &lt;code&gt;Cache-Control&lt;/code&gt; header parameter op &lt;code&gt;no-cache&lt;/code&gt; zetten.&lt;/p&gt;

&lt;p&gt;Zie issue &lt;a href=&#34;https://github.com/angular/angular.js/issues/1418&#34;&gt;https://github.com/angular/angular.js/issues/1418&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;hoe-werkt-under-the-hood&#34;&gt;Hoe werkt &amp;hellip; under the hood?&lt;/h3&gt;

&lt;h4 id=&#34;dependency-injection&#34;&gt;dependency injection&lt;/h4&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://www.alexrothenberg.com/2013/02/11/the-magic-behind-angularjs-dependency-injection.html&#34;&gt;http://www.alexrothenberg.com/2013/02/11/the-magic-behind-angularjs-dependency-injection.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TLDR: ze gebruiken &lt;code&gt;toString()&lt;/code&gt; om argument namen te parsen, zodat de volgorde niet uitmaakt wat het normaal wel doet in de magische array &lt;code&gt;arguments&lt;/code&gt;!&lt;/p&gt;

&lt;h4 id=&#34;het-watchen-van-variabelen-en-objecten&#34;&gt;Het watchen van variabelen en objecten&lt;/h4&gt;

&lt;p&gt;In de &lt;code&gt;$digest()&lt;/code&gt; loop, die constant draait (een achterwaardse loop, zie de &lt;a href=&#34;http://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.js&#34;&gt;source code&lt;/a&gt;, zoek voor bijvoorbeeld &lt;code&gt;$$watchers&lt;/code&gt;, dat is de array van te watchen objecten), wordt er constant gekeken naar het object en gekeken of dat niet hetzelfde is als de &amp;ldquo;laatste&amp;rdquo;. Met &amp;ldquo;laatste&amp;rdquo; bedoelen we een kopie van het object, zodat we altijd een pointer naar de actuele referentie hebben.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#39;float: left; width: nolink|px;&#39; src=&#39;http://www.brainbaking.com/img//code/javascript/frameworks/concepts-runtime.png&#39;&gt;&lt;/p&gt;

&lt;p&gt;Het werkt eigenlijk ongeveer zoals &lt;code&gt;ObjectObserver&lt;/code&gt; van https:*github.com/rafaelw/ChangeSummary - in nieuwe browsers zoals Chrome Canary kan er &amp;ldquo;native&amp;rdquo; gekeken worden naar object veranderingen door &lt;code&gt;Object.observe()&lt;/code&gt; te gebruiken - zie het &lt;a href=&#34;http:*updates.html5rocks.com/2012/11/Respond-to-change-with-Object-observe&#34;&gt;html5rocks artikel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Een belangrijke link: &lt;a href=&#34;http://docs.angularjs.org/guide/concepts&#34;&gt;http://docs.angularjs.org/guide/concepts&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>extjs4</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/extjs4/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/extjs4/</guid>
      <description>

&lt;h1 id=&#34;extjs4&#34;&gt;Extjs4&lt;/h1&gt;

&lt;p&gt;Documentatie: &lt;a href=&#34;http://docs.sencha.com/ext-js/4-0/#!/api/&#34;&gt;http://docs.sencha.com/ext-js/4-0/#!/api/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;aanmaken-van-klassen-en-managers-die-loaden&#34;&gt;Aanmaken van klassen en managers die loaden&lt;/h2&gt;

&lt;p&gt;Met &lt;code&gt;Ext.define&lt;/code&gt; maak je een klasse aan, met &lt;code&gt;Ext.create&lt;/code&gt; maak je een instantie van die klasse.&lt;/p&gt;

&lt;p&gt;Een klasse heeft:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;configs&lt;/li&gt;
&lt;li&gt;methods&lt;/li&gt;
&lt;li&gt;properties&lt;/li&gt;
&lt;li&gt;events&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Waarbij de &lt;code&gt;configs&lt;/code&gt; de gegevens zijn doorgegeven met accolades:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;test&#39;, {
  // config stuff
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Die configs worden &lt;strong&gt;herbruikt&lt;/strong&gt; voor alle instanties die aangemaakt worden met &lt;code&gt;Ext.create&lt;/code&gt;!! Dat staat op &amp;ldquo;klasse&amp;rdquo; niveau (ook al bestaat dat niet in JS&amp;hellip;)&lt;/p&gt;

&lt;h2 id=&#34;stores-herbruiken&#34;&gt;Stores herbruiken&lt;/h2&gt;

&lt;p&gt;Gegeven een store:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Ext.define(&#39;Evita.store.masterdata.KeywordType&#39;, {
    extend: &#39;Ext.data.EvitaStore&#39;,
	model: &#39;Evita.model.parkingfacility.MasterdataType&#39;,
    proxy: {
		type: &#39;evitaAjax&#39;,
		api:{
			read: &#39;getMasterdataKeywordByTypeName.json&#39;
		}
	}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gevraagd: hoe herbruik ik die store definitie, terwijl telkens &lt;strong&gt;nieuwe instanties&lt;/strong&gt; op de view gebruikt worden, om dan &lt;code&gt;extraParams&lt;/code&gt; die telkens anders zijn mee te geven met ajax?&lt;/p&gt;

&lt;p&gt;❗ reeds &lt;code&gt;extraParams&lt;/code&gt; opgeven in de store definitie zorgt ervoor dat die proxy herbruikt wordt, wat je hier niet wilt.&lt;/p&gt;

&lt;p&gt;Oplossing: gebruik &lt;code&gt;Ext.create&lt;/code&gt; in plaats van te refereren naar de &lt;code&gt;xtype&lt;/code&gt;, die gaat door de &lt;code&gt;StoreManager&lt;/code&gt; opgezocht &amp;amp; hetbruikt worden anders (1 instantie).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
		    			xtype : &#39;combo&#39;,
			    		store : Ext.create(&#39;Evita.store.masterdata.KeywordType&#39;),
			    		storeMasterdataTypeName: &#39;MaturityOfParkingFacility&#39;,
			    		valueField : &#39;code&#39;,
			    		displayField : &#39;value&#39;,
		    			name : &#39;maturity&#39;,
		    			id: &#39;ParkingFacilityCreate_masterdata_maturity&#39;,
		    		}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Loop in de controller over alle stores om dan bvb &lt;code&gt;extraParams&lt;/code&gt; in te stellen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    	view.down(&#39;form&#39;).query(&#39;combo&#39;).forEach(function(combo) {
			combo.getStore().proxy.extraParams[&#39;masterdataTypeName&#39;] = combo.storeMasterdataTypeName;
			combo.getStore().proxy.extraParams[&#39;countryId&#39;] = wizardData.general.countryId;
    	});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>frameworks</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/</guid>
      <description>

&lt;h1 id=&#34;hoe-objecten-extenden&#34;&gt;Hoe objecten extenden&lt;/h1&gt;

&lt;p&gt;❗ Zie &lt;a href=&#34;http://www.brainbaking.com/wiki/code/javascript/inheritance/&#34;&gt;Uitleg over Javascript werking met inheritance&lt;/a&gt; en &lt;a href=&#34;http://www.brainbaking.com/wiki/code/javascript/inleiding/&#34;&gt;code/javascript/inleiding&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;prototype-s-extend&#34;&gt;Prototype&amp;rsquo;s Extend&lt;/h2&gt;

&lt;p&gt;Op de vorige wijze werkt bijvoorbeeld Prototype&amp;rsquo;s &lt;code&gt;Element.Extend&lt;/code&gt; of &lt;code&gt;$&lt;/code&gt; (naast de CSS Selector natuurlijk).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// ignoring Prototype&#39;s initialize() constructor method
var Poes = Class.create({
  miauw: function() { return &amp;quot;prr&amp;quot;; }
});

var Hond = Class.create({
  blaf: function() { return &amp;quot;WOOF&amp;quot;; }
});

var kat = new Poes();
Element.extend(kat, Hond);

assertEquals(kat.blaf(), new Hond().blaf()); // hoo lee sjit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De bovenstaande code wordt intern gebruikt om &lt;strong&gt;inheritance&lt;/strong&gt; te faken. &lt;br/&gt;&lt;br/&gt;
Dat wil zeggen, een &lt;code&gt;Hond&lt;/code&gt; die van een &lt;code&gt;Poes&lt;/code&gt; afleidt, kan zo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Hond = Class.create(Poes, {...});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Van de eerste parameter worden gewoon alle functie pointers gekopiëerd. Boem.&lt;/p&gt;

&lt;p&gt;❗ &lt;strong&gt;Constructor overloading&lt;/strong&gt; - bestaat natuurlijk niet, dus een manier om dat te omzeilen is de pointer &lt;code&gt;$super&lt;/code&gt; gebruiken die de superklasse zijn constructor aanroept. Dit gebeurt ook niet automatisch. Initialize wordt dus nooit overschreven.&lt;/p&gt;

&lt;h3 id=&#34;hoe-werkt-dit&#34;&gt;Hoe werkt dit?&lt;/h3&gt;

&lt;p&gt;Simpel: gebruik &lt;code&gt;for(key in map.prototype)&lt;/code&gt; om te loopen over alle functie pointers. Copypasta. Done.&lt;br/&gt;&lt;br/&gt;
Dit kan ook gebruikt worden om bestaande functies uit te breiden! (zoals String, Array, &amp;hellip;)&lt;/p&gt;

&lt;h2 id=&#34;prototype-s-pointer-binding&#34;&gt;Prototype&amp;rsquo;s Pointer binding&lt;/h2&gt;

&lt;p&gt;Probleem: stel dat een klasse wordt opgemaakt met de bovenstaande methode. De &lt;code&gt;this&lt;/code&gt; pointer verwijst standaard naar de array die binnen de scope valt van uw code, dus vanuit een functie kan men een andere in dezelfde map oproepen. &lt;strong&gt;MAAR&lt;/strong&gt; this wordt overschreven wanneer de functie als &lt;em&gt;closure&lt;/em&gt; wordt meegegeven. Common examples zijn bvb. bij onload, bij each, bij ajax calls als onsuccess/failure/&amp;hellip; events, &amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Event.observe(window, &amp;quot;load&amp;quot;, function() {
  klasse.doeIets(); // this binnenin doeIets() is nu window! BOOM
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Om dit te omzeilen kan men eender welke functie pointer binnen eender welke method vervangen met &lt;code&gt;bind&lt;/code&gt;. Vorige voorbeeld aangepast:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Event.observe(window, &amp;quot;load&amp;quot;, function() {
  klasse.doeIets(); // this binnenin doeIets() is nu zoals verwacht klasse zelf.
}.bind(klasse));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hoe-werkt-dit-1&#34;&gt;Hoe werkt dit?&lt;/h3&gt;

&lt;p&gt;bind is een extentie van Object (zie extend boven), dus oproepbaar op eender welke extended method. &lt;br/&gt;&lt;br/&gt;
De rest van de magie is eigenlijk helemaal geen Prototype maar JS 1.3 methods &lt;code&gt;apply()&lt;/code&gt; of &lt;code&gt;call()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Bezie ze als reflection methods die als eerste argument de this pointer binnen pakken, en voor de rest bij call een lijst van argumenten (alles), en bij apply een array als 2de argument met alle argumenten (bvb &lt;code&gt;arguments&lt;/code&gt; zelf). Dus:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function wow(one, two) {
  console.log(this); // default output: window
  return one + two; 
}

var arr = {
  c = &amp;quot;cc&amp;quot;
};

wow.apply(arr.c, [10, 2]); // prints &amp;quot;cc&amp;quot;, output = 12
wow.call(arr.c, 10, 2); // same
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;apply(**this pointer**, **array argument**)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Echt &amp;ldquo;reflectie&amp;rdquo; is het niet, de functiepointer is nodig om apply op te roepen. Het echte werk laten we aan &lt;code&gt;eval()&lt;/code&gt; over.&lt;/p&gt;

&lt;p&gt;❓ Interessant om te weten: &lt;code&gt;curry&lt;/code&gt; werkt ook met &lt;code&gt;apply&lt;/code&gt; om automatisch parameters in te vullen.&lt;/p&gt;

&lt;h3 id=&#34;binding-en-jquery&#34;&gt;Binding en jQuery&lt;/h3&gt;

&lt;p&gt;jQuery&amp;rsquo;s context verandert automatisch. Dit wil zeggen dat &amp;ldquo;this&amp;rdquo; binnen een bepaalde closure automatisch het object wordt waar bijvoorbeeld over geloopt wordt.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Binnen de meeste callback methods (&amp;lsquo;success&amp;rsquo; van &lt;code&gt;$.ajax&lt;/code&gt; bvb) is this het callback object&lt;/li&gt;
&lt;li&gt;Binnen each is this het ide element in de array waar over geloopt wordt&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;jQuery biedt niet by default ondersteuning om dit te veranderen met binding, &lt;strong&gt;behalve&lt;/strong&gt; in sommige uitzonderlijke gevallen zoals &lt;code&gt;$.ajax&lt;/code&gt;. Hier kan je een &lt;code&gt;context&lt;/code&gt; aan meegeven, waardoor this in de context verandert. Bijvoobeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function SomeClass() {
  this.doeIets = function() {
    $.ajax({
      url: &amp;quot;bla.json&amp;quot;,
      dataType: &amp;quot;json&amp;quot;,
      context: this,
      callback: function(data) {
        // this is nu de instantie van SomeClass dankzij context
        // anders zou this data zijn.
      }
  }
}

var someInstance = new SomeClass();
someInstance.doeIets();
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;js-error-handling&#34;&gt;JS Error Handling&lt;/h1&gt;

&lt;p&gt;Javascript heeft een globale event error handler, &lt;code&gt;window.onerror&lt;/code&gt;. Die manueel overschrijven is natuurlijk niet de bedoeling.&lt;/p&gt;

&lt;h3 id=&#34;in-jquery&#34;&gt;in jQuery&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(window).error(function(){
  // do stuff!
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Om broken images te hiden, bijvoorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&amp;quot;img&amp;quot;).error(function(){
  $(this).hide();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;js-framework-conflicten&#34;&gt;JS Framework Conflicten&lt;/h1&gt;

&lt;h2 id=&#34;jquery-vs-prototype&#34;&gt;jQuery vs Prototype&lt;/h2&gt;

&lt;h3 id=&#34;each-looping&#34;&gt;each looping&lt;/h3&gt;

&lt;p&gt;De &lt;code&gt;this&lt;/code&gt; pointer binnen de each loop van jQuery wordt gebruikt om naar het huidig element te refereren. &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prototype&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;[&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;].each(function(item, index) {
  console.log(&amp;quot;looping at #&amp;quot; + index + &amp;quot; with item &amp;quot; + item);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is hier de &lt;code&gt;window&lt;/code&gt; context.
zie &lt;a href=&#34;http://www.prototypejs.org/api/enumerable/each&#34;&gt;http://www.prototypejs.org/api/enumerable/each&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$([&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]).each(function() {
  console.log(&amp;quot;looping with item &amp;quot; + this);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Exact dezelfde each kan ook gebruikt worden zoals bij Prototype met extra argumenten.&lt;br/&gt;&lt;br/&gt;
Let wel op dat jQuery niet zelf aangemaakte Arrays wrapt/Extent, dat ge zelf doen met &lt;code&gt;$(j)&lt;/code&gt;&lt;br/&gt;&lt;br/&gt;
Ook this binnen een jQuery each loop wordt niet extended maar is het DOM Element zelf.&lt;/p&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://api.jquery.com/jQuery.each/&#34;&gt;http://api.jquery.com/jQuery.each/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;❗ &lt;strong&gt;Mixed use&lt;/strong&gt; - let op bij loops waarbij this overschreven wordt met Prototype&amp;rsquo;s &lt;code&gt;bind()&lt;/code&gt; method! Zie boven.&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h1 id=&#34;data-binding&#34;&gt;Data binding&lt;/h1&gt;

&lt;p&gt;Interessant artikel over Knockout JS vs Backbone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ifandelse.com/?p=70&#34;&gt;http://www.ifandelse.com/?p=70&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=1810665&#34;&gt;http://news.ycombinator.com/item?id=1810665&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;javascriptmvc&#34;&gt;JavascriptMVC&lt;/h2&gt;

&lt;p&gt;Zie&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ajaxvoices.com/aggregator/sources/39&#34;&gt;http://www.ajaxvoices.com/aggregator/sources/39&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://javascriptmvc.com/&#34;&gt;http://javascriptmvc.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;knockout-js&#34;&gt;Knockout JS&lt;/h2&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://knockoutjs.com/&#34;&gt;http://knockoutjs.com/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Simplify dynamic javascript UI by applying the Model-View-viewModel pattern.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nadeel: templates moeten geïnclude worden binnen dezelfde &lt;code&gt;HTML&lt;/code&gt; pagina. Gelukkig genoeg zijn er andere template engines die verder bouwen op &lt;code&gt;jQuery.tmpl&lt;/code&gt;: &lt;br/&gt;&lt;br/&gt;
&lt;a href=&#34;https://github.com/ashbylane/Knockout.js-External-Template-Engine&#34;&gt;https://github.com/ashbylane/Knockout.js-External-Template-Engine&lt;/a&gt; auto-include als de template naam naam.html is en in dezelfde dir leeft als uw main page.&lt;/p&gt;

&lt;h2 id=&#34;backbone-js&#34;&gt;Backbone JS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://documentcloud.github.com/backbone/&#34;&gt;http://documentcloud.github.com/backbone/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stricter MVC, zien dat uw view opnieuw gerenderd wordt bij een update van het model:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;model.bind(&amp;quot;change&amp;quot;, this.render);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dit is meestal genoeg. Het grootste verschil tussen backbone en knockout is dat knockout &lt;code&gt;data-&lt;/code&gt; attributen (HTML5) gebruikt, en alles in de view steekt, terwijl dit bij backbone meer apart steekt. (Backbone is explicieter en vereist ook wat meer boilerplating maar is meer gescheiden)&lt;/p&gt;

&lt;h1 id=&#34;andere-handige-js-frameworks&#34;&gt;Andere handige JS frameworks&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;http:*documentcloud.github.com/underscore/ - *underscore JS// utility functies zoals &lt;code&gt;Array.flatten&lt;/code&gt; ea.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sproutcore.com/&#34;&gt;http://www.sproutcore.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>handlebars</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/handlebars/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/handlebars/</guid>
      <description>

&lt;h1 id=&#34;handlebars&#34;&gt;Handlebars&lt;/h1&gt;

&lt;p&gt;Algemene uitleg ea:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://javascriptissexy.com/handlebars-js-tutorial-learn-everything-about-handlebars-js-javascript-templating/#more-621&#34;&gt;http://javascriptissexy.com/handlebars-js-tutorial-learn-everything-about-handlebars-js-javascript-templating/#more-621&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://handlebarsjs.com/&#34;&gt;http://handlebarsjs.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tryhandlebarsjs.com/&#34;&gt;http://tryhandlebarsjs.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;yeoman-integratie&#34;&gt;Yeoman integratie&lt;/h3&gt;

&lt;p&gt;Zie &lt;a href=&#34;https://github.com/yeoman/yeoman/wiki/Handlebars-integration&#34;&gt;https://github.com/yeoman/yeoman/wiki/Handlebars-integration&lt;/a&gt; en &lt;a href=&#34;http://www.brainbaking.com/wiki/code/javascript/frameworks/yeoman/&#34;&gt;code/javascript/frameworks/yeoman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maakt gebruik van &lt;code&gt;grunt&lt;/code&gt; - Zie &lt;a href=&#34;https://github.com/gruntjs/grunt-contrib-handlebars/&#34;&gt;https://github.com/gruntjs/grunt-contrib-handlebars/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aanpassingen in &lt;code&gt;Gruntfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  grunt.initConfig({

    // Project configuration
    // ---------------------

	handlebars: {
		compile: {
			files: {
				&amp;quot;app/scripts/templates.js&amp;quot;: [
					&amp;quot;app/templates/*.hbs&amp;quot;
				]
			}, 
			options: {
				amd: true,
				processName: function(filename) {
					return filename
						.replace(&#39;app/templates/&#39;, &#39;&#39;)
						.replace(/&amp;lt;br/&amp;gt;.hbs$/, &#39;&#39;);
				}
			}
		}
	},
// ...

    watch: {
      handlebars: {
      	files: [
      		&#39;app/templates/*.hbs&#39;
      	],
      	tasks: &#39;handlebars reload&#39;
      },
// ...

  grunt.loadNpmTasks(&#39;grunt-contrib-handlebars&#39;);
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;grunt handlebars&lt;/code&gt; compileert dan alles in &amp;ldquo;app/templates&amp;rdquo; (.hbs files) naar &amp;ldquo;app/scripts/templates.js&amp;rdquo;. Als je &lt;code&gt;amd: true&lt;/code&gt; meegeeft in &lt;code&gt;options&lt;/code&gt; wrapt de grunt task dit in &lt;code&gt;define([&#39;handlebars&#39;], function(Handlebars) { ... });&lt;/code&gt;. Handlebars heeft geen AMD module, meer hierover, zie requirejs.&lt;/p&gt;

&lt;h3 id=&#34;templates-async-laden&#34;&gt;Templates (async) laden&lt;/h3&gt;

&lt;p&gt;Standaard worden templates included in de &lt;code&gt;HTML&lt;/code&gt; met een &lt;code&gt;&amp;lt;script/&amp;gt;&lt;/code&gt; tag op deze manier:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script id######&amp;quot;header&amp;quot; type&amp;quot;text/x-handlebars-template&amp;quot;&amp;gt;
 &amp;lt;div&amp;gt; Name: &amp;lt;img style=&#39;margin-left: auto; margin-right: auto;&#39; src=&#39;http://www.brainbaking.com/img/headerTitle&#39;&amp;gt; &amp;lt;/div&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dit wordt snel een dikke knoeiboel als er heel veel files zijn in één HTML file. Oplossingen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Gebruik RequireJS&lt;/li&gt;
&lt;li&gt;Laadt ze via &lt;code&gt;jQuery.ajax&lt;/code&gt; in op moment dat het nodig is: &lt;a href=&#34;http://stackoverflow.com/questions/8366733/external-template-in-underscore&#34;&gt;http://stackoverflow.com/questions/8366733/external-template-in-underscore&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Blijkbaar is er een plugin in AMD/RequireJS dat het mogelijk maakt om text in te laden, zo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// The define function is part of the AMD mechanism for loading 
define([
    &#39;jquery&#39;,
    &#39;underscore&#39;,
    &#39;handlebars&#39;,
// Require.js text plugin loads the HTML template pages
    &#39;text!templates/user_account.html&#39;,
    &#39;text!templates/user_profile.html&#39;], 
function ($, _, Backbone, HandleBars, UserAccount_Template, UserProfile_Template) {
 ...
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>jquery</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/jquery/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/jquery/</guid>
      <description>

&lt;h1 id=&#34;jquery&#34;&gt;Jquery&lt;/h1&gt;

&lt;h2 id=&#34;eigen-css-filters-maken&#34;&gt;Eigen CSS filters maken&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$.expr[&#39;:&#39;].external = function(elem,index,match) {
    var url = elem.href || elem.src,
        loc = window.location;
    return !!url.match(new RegExp(&#39;^&#39; + loc.protocol + &#39;//&#39; + &#39;(?!&#39; + loc.hostname + &#39;)&#39; ));
};
 
// You can now use it within your selectors:
 
// Find all external anchors:
$(&#39;a:external&#39;);
 
// Find all external script elements:
$(&#39;script:external&#39;);
 
// Determine if link is external:
$(&#39;a#mylink&#39;).is(&#39;:external&#39;); // true/false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Via &lt;a href=&#34;http://james.padolsey.com/javascript/things-you-may-not-know-about-jquery/&#34;&gt;Things you may not know about jQuery&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;data-meegeven-aan-events&#34;&gt;Data meegeven aan events&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;for(myObj in myObjects) {
  $(&#39;.tr&#39;).bind(&#39;click&#39;, myObj, function(e) {
     e.data.doeIets(); // .data ##### myObj
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Werkt ook voor &lt;code&gt;live()&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>knockout</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/knockout/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/knockout/</guid>
      <description>

&lt;h1 id=&#34;knockout-js&#34;&gt;Knockout JS&lt;/h1&gt;

&lt;h2 id=&#34;paged-client-side-table-zelf-voorzien&#34;&gt;Paged client-side table zelf voorzien&lt;/h2&gt;

&lt;p&gt;❗ Zie &lt;a href=&#34;http://jsfiddle.net/rniemeyer/5Xr2X/&#34;&gt;http://jsfiddle.net/rniemeyer/5Xr2X/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The basic idea is that you have a dependentObservable that represents the rows in your current page and bind your table to it. You would slice the overall array to get the rows for the page. Then, you have pager buttons/links that manipulate the page index, which causes the dependentObservable to be re-evaluated resulting in the current rows.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Op deze manier met &lt;code&gt;dependentObservable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var myns = {};
myns.DisplayFields = function(jsondata) {
    var viewModel = {
        fields: ko.observableArray(jsondata),
        sortByName: function() { //plus any custom functions I would like to perform
            this.items.sort(function(a, b) {
                return a.Name &amp;lt; b.Name ? -1 : 1;
            });
        },
        pageSize: ko.observable(10),
        pageIndex: ko.observable(0),
        previousPage: function() {
            this.pageIndex(this.pageIndex() - 1);
        },
        nextPage: function() {
            this.pageIndex(this.pageIndex() + 1);
        }
    };

    viewModel.maxPageIndex = ko.dependentObservable(function() {
        return Math.floor(this.fields().length / this.pageSize());
    }, viewModel);

    viewModel.pagedRows = ko.dependentObservable(function() {
        var size = this.pageSize();
        var start = this.pageIndex() * size;
        return this.fields.slice(start, start + size);
    }, viewModel);

    ko.applyBindings(viewModel);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;layout-js-update-trigger-nodig&#34;&gt;Layout JS Update trigger nodig?&lt;/h2&gt;

&lt;p&gt;(Via &lt;a href=&#34;http://stackoverflow.com/questions/5598751/knockoutjs-utilizing-jquery-tablesorter-with-a-jquery-tmpl-generated-table&#34;&gt;Stack overflow&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Stel dat na het updaten van de DOM door &lt;code&gt;KnockoutJS&lt;/code&gt;, er nog styling nodig is door bvb &lt;code&gt;jQuery&lt;/code&gt;. &lt;br/&gt;&lt;br/&gt;
Zelf de event aanroepen zoals &lt;code&gt;$(el).repaint()&lt;/code&gt; werkt altijd maar is enorm vervelend. &lt;code&gt;Knockout&lt;/code&gt; ondersteutn ook &lt;em&gt;binding handlers&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ko.bindingHandlers.triggerUpdate = {
    update: function (element, valueAccessor) {
        ko.utils.unwrapObservable(valueAccessor()); //need to just access the observable to create the subscription
        $(element).trigger(&amp;quot;repaint&amp;quot;); // or whatever you&#39;ll need
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Het element binden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;table id######&amp;quot;mytable&amp;quot; data-bind&amp;quot;triggerUpdate: items&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;triggerUpdate&lt;/code&gt; is een zelf aangemaakte &lt;em&gt;binding handler&lt;/em&gt;. Voor meer info, zie &lt;a href=&#34;http://knockoutjs.com/documentation/custom-bindings.html&#34;&gt;http://knockoutjs.com/documentation/custom-bindings.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;js-logica-in-data-volledig-scheiden&#34;&gt;JS Logica in data-* volledig scheiden&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Probleem&lt;/strong&gt;: Knockout gebruikt veel &lt;code&gt;data-&lt;/code&gt; HTML5 attributen om gedrag van elementen te bepalen. &lt;br/&gt;&lt;br/&gt;
Dit zou ideaal gezien opgesplitst moeten worden (unit testable etc):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;button type######&amp;quot;submit&amp;quot; data-bind&amp;quot;enable: languageToAdd().length &amp;gt; 0, click: addLanguage&amp;quot;&amp;gt;Add&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Oplossing&lt;/strong&gt;: Schrijf een stukje custom JS dat de &lt;code&gt;data-bind&lt;/code&gt; attribuut zelf zet gebaseerd op een ander model dan uw klassiek &lt;code&gt;viewModel&lt;/code&gt; - bvb. &lt;code&gt;bindingsModel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Bijvoorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var bindings = {
   inputs: [&#39;name&#39;, &#39;bio&#39;, &#39;twitterHandle&#39;, &#39;state&#39;, &#39;photoUrl&#39;],
   options: [&#39;languages&#39;],
   custom: { languageToAdd: &#39;value: languageToAdd, valueUpdate: &amp;quot;afterkeydown&amp;quot;&#39; }
};

modelBinder.createBindings(bindings);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dit is het custom gedeelte:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var modelBinder = {};
modelBinder.createBindings = function (bindlist) {
    function setBinding(id, value) {
        var el = document.getElementById(id);
        if (el) {
            el.setAttribute(&#39;data-bind&#39;, value);
        }
    }
    
    for(var inputsKey in bindlist.inputs) {
        if (bindlist.inputs.hasOwnProperty(inputsKey)) {
            setBinding(bindlist.inputs[inputsKey], &#39;value: &#39; + bindlist.inputs[inputsKey]);
        }
    }
        
    for(var optionsKey in bindlist.options) {
        if (bindlist.inputs.hasOwnProperty(optionsKey)) {
            setBinding(bindlist.options[optionsKey], &#39;options: &#39; + bindlist.options[optionsKey]);
        }
    }
        
    for(var key in bindlist.custom) {
        if (bindlist.custom.hasOwnProperty(key)) {
            setBinding(key, bindlist.custom[key]);
        }
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zodat we in HTML enkel dit hebben:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;button type######&amp;quot;submit&amp;quot; id&amp;quot;languageToAdd&amp;quot;&amp;gt;Add&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bron: &lt;a href=&#34;http://userinexperience.com/?p=633&#34;&gt;http://userinexperience.com/?p=633&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mobile</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/mobile/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/mobile/</guid>
      <description>

&lt;h1 id=&#34;js-clientside-mobile-frameworks&#34;&gt;JS Clientside Mobile frameworks&lt;/h1&gt;

&lt;h2 id=&#34;native-applicaties-deployen&#34;&gt;Native applicaties deployen&lt;/h2&gt;

&lt;p&gt;Gebruik &lt;a href=&#34;http://www.phonegap.com/&#34;&gt;http://www.phonegap.com/&lt;/a&gt; om met CSS3+HTML5+JS een native applicatie te builden - ondersteuning voor iOS, Android, Blackberry etc.&lt;br/&gt;&lt;br/&gt;
Ondersteunt ook &lt;strong&gt;native hardware&lt;/strong&gt; zoals camera, accelerometer, GPS etc - zie &lt;a href=&#34;http://docs.phonegap.com/phonegap_media_capture_capture.md.html#Capture&#34;&gt;Documentatie&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;websockets-in-phonegap&#34;&gt;WebSockets in Phonegap&lt;/h5&gt;

&lt;p&gt;Zit in de milestone 1.0 planning - nog niet officiëel ondersteund.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Voor &lt;strong&gt;Android&lt;/strong&gt;: Zie http:*anismiles.wordpress.com/2011/02/03/websocket-support-in-android%E2%80%99s-phonegap-apps/ en &lt;a href=&#34;https:*github.com/anismiles/websocket-android-phonegap&#34;&gt;source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Voor &lt;strong&gt;iPhone&lt;/strong&gt;: Zie http:*remysharp.com/2010/10/04/websockets-in-phonegap-projects/ en &lt;a href=&#34;https:*github.com/remy/PhoneGap-Plugin-WebSocket&#34;&gt;source&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;mobile-apps-viewports&#34;&gt;Mobile apps &amp;amp; Viewports&lt;/h2&gt;

&lt;p&gt;In de &lt;code&gt;&amp;lt;head/&amp;gt;&lt;/code&gt; tag is het belangrijk om viewport meta-informatie aan te geven zoals:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;meta name######&amp;quot;viewport&amp;quot; content&amp;quot;width######device-width, initial-scale1.0&amp;quot;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Waarom? &lt;a href=&#34;https:*docs.google.com/present/view?id######dkx3qtm_22dxsrgcf4&amp;amp;pli1&#34;&gt;daarom&lt;/a&gt; - zie &lt;a href=&#34;http:*html5boilerplate.com/mobile/&#34;&gt;HTML5 mobile boilerplate&lt;/a&gt; en &lt;a href=&#34;http://www.quirksmode.org/blog/archives/2010/04/a_pixel_is_not.html&#34;&gt;A pixel is not a pixel is not a pixel&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;jquery-mobile&#34;&gt;jQuery Mobile&lt;/h2&gt;

&lt;p&gt;-&amp;gt; Zie ook &lt;a href=&#34;http://www.slideshare.net/todd_anderson/jquery-mobile-progressive-enhancement-with-html5-8302294&#34;&gt;jQuery Mobile: Progressive Enhancement with HTML5&lt;/a&gt; slideshare&lt;/p&gt;

&lt;h3 id=&#34;zelf-een-pagina-ophalen-en-tonen&#34;&gt;Zelf een pagina ophalen en tonen&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//create markup
var newPage ###### $(&amp;quot;&amp;lt;div data-rolepage data-url######yay&amp;gt;&amp;lt;div data-roleheader&amp;gt;&amp;lt;h1&amp;gt;YAY!!!!&amp;lt;/h1&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div data-role######content&amp;gt;&amp;lt;img srchttp://bukk.it/yay.gif /&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;quot;);

//append it to the page container
newPage.appendTo( $.mobile.pageContainer );

//go to it
$.mobile.changePage( newPage );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://jquerymobile.com/test/docs/api/events.html&#34;&gt;http://jquerymobile.com/test/docs/api/events.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;problemen-met-rerenderen-mobile-widgets-doe-het-zelf&#34;&gt;Problemen met rerenderen Mobile widgets? doe het zelf!&lt;/h3&gt;

&lt;p&gt;Zie &lt;a href=&#34;https:*github.com/bnolan/Backbone-Mobile/blob/master/application.coffee&#34;&gt;Coffeescript+Backbone+Mobile&lt;/a&gt; oplossing en &lt;a href=&#34;http:*bennolan.com/2010/11/23/backbone-and-jquery-mobile.html&#34;&gt;Corresponderende blogpost&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#39;float: left; width: nolink&amp;|px;&#39; src=&#39;http://www.brainbaking.com/img//code/javascript/frameworks/floempie.jpg&#39;&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;	function render() {
		var activePage = $.mobile.activePage; // this also works: $(&amp;quot;.ui-page-active&amp;quot;)
		activePage.find(&#39;ul[data-role]&#39;).listview();
		activePage.find(&#39;div[data-role=&amp;quot;fieldcontain&amp;quot;]&#39;).fieldcontain();
		activePage.find(&#39;button[data-role=&amp;quot;button&amp;quot;]&#39;).button();
		activePage.find(&#39;input,textarea&#39;).textinput();
		activePage.page();
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dit ziet er wel resource intensitief uit en zou op een mobiel device nogal kunnen &amp;ldquo;floepen&amp;rdquo;. ((De bijhorende tekening is Copyright Kabouter Wesley enzo))&lt;/p&gt;

&lt;p&gt;Wanneer je enkele &lt;code&gt;&amp;lt;li/&amp;gt;&lt;/code&gt; elementen aan bijvoorbeeld een &lt;code&gt;listview&lt;/code&gt; toevoegt, zou een &lt;code&gt;.listview(&amp;quot;refresh&amp;quot;)&lt;/code&gt; call genoeg moeten zijn. Dit restylet enkel de nodige LI elementen, terwijl zonder argumenten de hele lijst &lt;em&gt;from scratch&lt;/em&gt; re-rendert. Dit kost veel meer tijd&amp;hellip;&lt;/p&gt;

&lt;p&gt;❗ JS Frameworks die content dynamisch re-renderen zoals &lt;strong&gt;KnockoutJS&lt;/strong&gt; of &lt;strong&gt;Backbone&lt;/strong&gt; vervangen de hele lijst in de DOM tree. Dit wil zeggen dat &lt;code&gt;refresh&lt;/code&gt; niet genoeg zal zijn&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;custom-jquery-events&#34;&gt;Custom jQuery events&lt;/h3&gt;

&lt;p&gt;jQuery Mobile laadt pagina transities allemaal in één single page HTML. Het DOM Loaded event wordt dus maar één keer afgevuurd. Hoe moet je custom JS uitvoeren bij het &amp;ldquo;laden&amp;rdquo; van één pagina?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&amp;quot;#myPage&amp;quot;).live(&#39;pageshow&#39;, function() {
 // in here!
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Waarbij &lt;code&gt;myPage&lt;/code&gt; een &lt;code&gt;&amp;lt;div id######&amp;quot;myPage&amp;quot; data-role&amp;quot;page&amp;quot;&amp;gt;&lt;/code&gt; element is.&lt;/p&gt;

&lt;p&gt;❗ Gebruik &lt;code&gt;live&lt;/code&gt; omdat op het moment dat die code geëvalueerd wordt, die pagina waarschijnlijk nog niet aan de DOM hangt! (jQuery mobile intern)&lt;/p&gt;

&lt;p&gt;Meer custom events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pageshow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pagehide&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pagecreate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pagebeforecreate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pagebeforeshow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pagebeforehide&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://jquerymobile.com/test/docs/api/events.html&#34;&gt;http://jquerymobile.com/test/docs/api/events.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;pagina-transities-passing-data&#34;&gt;Pagina transities: passing data&lt;/h3&gt;

&lt;p&gt;jQuery Mobile is niet designed om 100% Client-side only Javascript applicaties te ondersteunen. &lt;code&gt;form&lt;/code&gt; elementen worden gesubmit met een &lt;code&gt;POST&lt;/code&gt; naar een server, nieuwe pagina&amp;rsquo;s kunnen vanuit een server (PHP, JSP, &amp;hellip;) dynamisch opgebouwd worden. Hoe geven we tussen page transities, puur in Javascript, gegevens door?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt; parameters manueel toevoegen en parsen vanuit de URL: &lt;em&gt;geen goed idee&lt;/em&gt; omdat jQuery Mobile hashing etc toevoegt aan de URL voor navigatie!&lt;/li&gt;
&lt;li&gt;Zelf de transitie state bijhouden in een view objectje.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Het tweede kan door bijvoorbeeld een &lt;code&gt;onclick&lt;/code&gt; event te registreren en HTML5 &lt;code&gt;data&lt;/code&gt; attributes te gebruiken om IDs bij te houden:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&amp;quot;.vacatureLink&amp;quot;).click(function() {
	application.setVacatureId($(this).data(&amp;quot;id&amp;quot;));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Met bijvoorbeeld een KnockoutJS template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;img style=&#39;&#39; src=&#39;http://www.brainbaking.com/img/each vacatures&#39;&amp;gt;
	&amp;lt;li&amp;gt;
		&amp;lt;a href######&amp;quot;detail.html&amp;quot; data-id&amp;quot;${id}&amp;quot; class=&amp;quot;vacatureLink&amp;quot;&amp;gt;${vacatureGegevens.aantalJobs} ${gezochtProfiel.functieNaam} ( ${kandidaten.length} kandidaten )&amp;lt;/a&amp;gt;
	&amp;lt;/li&amp;gt;
&amp;lt;img style=&#39;&#39; src=&#39;http://www.brainbaking.com/img//each&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De transitie naar detail.html gebeurt ná onze &lt;code&gt;click&lt;/code&gt; event handler. Bij het laden van de page op detail.html doen we &amp;ldquo;iets&amp;rdquo; met onze id:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&amp;quot;#detailsVacature&amp;quot;).live(&#39;pagebeforeshow&#39;, function() {
	var id = application.getVacatureId();
	// doe iets?
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Het is natuurlijk nog beter als die logica gewoon in de &lt;code&gt;setVacatureId&lt;/code&gt; functie steekt die reeds is aangeroepen.&lt;/p&gt;

&lt;h2 id=&#34;andere-js-mobile-frameworks&#34;&gt;Andere JS Mobile frameworks&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://joapp.com/&#34;&gt;http://joapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sencha.com/products/touch/&#34;&gt;http://www.sencha.com/products/touch/&lt;/a&gt; (ExtJS based)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jqtouch.com/&#34;&gt;http://www.jqtouch.com/&lt;/a&gt; (jQuery based - ouder, dev. overgeschakeld naar Sencha Touch)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.winktoolkit.org/&#34;&gt;http://www.winktoolkit.org/&lt;/a&gt; (Dojo based)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xuijs.com/&#34;&gt;http://xuijs.com/&lt;/a&gt; (micro DOM manipulation framework)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ipfaces.org/content/java&#34;&gt;http://www.ipfaces.org/content/java&lt;/a&gt; (jsp-style bwerk)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dhtmlx.com/touch/samples/&#34;&gt;http://dhtmlx.com/touch/samples/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nimblekit.com/index.php&#34;&gt;http://www.nimblekit.com/index.php&lt;/a&gt; (native iOS only!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.the-m-project.org/&#34;&gt;http://www.the-m-project.org/&lt;/a&gt; (jQuery Mobile + Expresso, NodeJS build tool)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>yeoman</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/frameworks/yeoman/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/frameworks/yeoman/</guid>
      <description>

&lt;h1 id=&#34;build-tools-yeoman-grunt-requirejs-ea&#34;&gt;Build tools: Yeoman, Grunt, RequireJS ea&lt;/h1&gt;

&lt;p&gt;Zie ook integratie met &lt;a href=&#34;http://www.brainbaking.com/wiki/code/javascript/frameworks/handlebars/&#34;&gt;code/javascript/frameworks/handlebars&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Help nodig? Vast? &amp;gt;&amp;gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gruntjs.com/installing-grunt&#34;&gt;http://gruntjs.com/installing-grunt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yeoman.io/commandline.html&#34;&gt;http://yeoman.io/commandline.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://requirejs.org/docs/api.html&#34;&gt;http://requirejs.org/docs/api.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/twitter/bower&#34;&gt;https://github.com/twitter/bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://npmjs.org/doc/&#34;&gt;https://npmjs.org/doc/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Meer info over Yeoman, tooling support, scaffolding, etc:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://plus.google.com/115133653231679625609/posts/h8shHWJtcKd&#34;&gt;https://plus.google.com/115133653231679625609/posts/h8shHWJtcKd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;deploying&#34;&gt;Deploying&lt;/h2&gt;

&lt;h4 id=&#34;naar-een-ftp-server&#34;&gt;Naar een FTP server&lt;/h4&gt;

&lt;p&gt;Gebruik &lt;code&gt;grunt-ftp-deploy&lt;/code&gt; node plugin: &lt;a href=&#34;https://github.com/zonak/grunt-ftp-deploy&#34;&gt;https://github.com/zonak/grunt-ftp-deploy&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;ftp-deploy&#39;: {
  build: {
    auth: {
      host: &#39;server.com&#39;,
      port: 21,
      authKey: &#39;key1&#39;
    },
    src: &#39;/path/to/source/folder&#39;,
    dest: &#39;/path/to/destination/folder&#39;,
    exclusions: [&#39;/path/to/source/folder/**/.DS_Store&#39;, &#39;/path/to/source/folder/**/Thumbs.db&#39;, &#39;dist/tmp&#39;]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;❗ auth key ref verwijst naar &lt;code&gt;.ftppass&lt;/code&gt; in working dir&lt;/p&gt;

&lt;h2 id=&#34;testing&#34;&gt;Testing&lt;/h2&gt;

&lt;h4 id=&#34;mocha&#34;&gt;Mocha&lt;/h4&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://visionmedia.github.com/mocha/&#34;&gt;http://visionmedia.github.com/mocha/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Built-in support voor yeoman. Verschil met jasmine:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;mocha heeft geen assertions. Yeoman gebruikt by default [&lt;a href=&#34;http://chaijs.com/|chaiJS&#34;&gt;http://chaijs.com/|chaiJS&lt;/a&gt;] assertions.&lt;/li&gt;
&lt;li&gt;mocha heeft geen spies.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;jasmine&#34;&gt;Jasmine&lt;/h4&gt;

&lt;p&gt;Integratie met Grunt mogelijk met &lt;a href=&#34;https://github.com/creynders/grunt-jasmine-task&#34;&gt;https://github.com/creynders/grunt-jasmine-task&lt;/a&gt; en dan in &lt;code&gt;Gruntfile.js&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;grunt.loadNpmTasks(&#39;grunt-jasmine-task&#39;);
jasmine: {
  all: [&#39;specs/specrunner.html&#39;]
},
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;package-managing&#34;&gt;Package managing&lt;/h2&gt;

&lt;p&gt;Modules worden via de node package manager, &lt;code&gt;npm&lt;/code&gt; geïnstalleerd, al dan niet globaal met de &lt;code&gt;-g&lt;/code&gt; flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo npm install grunt-contrib-handlebars --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-g&lt;/code&gt; betekent &lt;strong&gt;niet&lt;/strong&gt; lokaal installeren maar in een bin folder op het systeem. Waarom/wanneer het ene of het andere kiezen? &lt;a href=&#34;http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/&#34;&gt;http://blog.nodejs.org/2011/03/23/npm-1-0-global-vs-local-installation/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;requirejs&#34;&gt;RequireJS&lt;/h2&gt;

&lt;p&gt;Zie requirejs.org/docs/api.html&lt;/p&gt;

&lt;h4 id=&#34;amd-structuur&#34;&gt;AMD Structuur&lt;/h4&gt;

&lt;p&gt;Main file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;require.config({

});
 
require([&#39;app&#39;], function(app) {
	// main module which fires up everything
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Na includen van Rjs in html:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;    &amp;lt;script data-main######&amp;quot;scripts/main&amp;quot; src&amp;quot;scripts/vendor/require.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gaat rjs afhankelijk van &lt;code&gt;data-main&lt;/code&gt; de hoofd JS file inladen (bovenstaande). That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;Module files:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;define([&#39;dep1&#39;, &#39;dep2&#39;], function(dep1, dep2) {

  // dep1, dep2 accessible &amp;amp; loaded

  return {
    api: function() { ... }
  };

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rjs gaat eerst dep1 en dep2 laden en dan de bovenstaande code pas. Hiervoor moeten natuurlijk beide andere APIs ook &lt;code&gt;AMD&lt;/code&gt; wrapped zijn. &lt;a href=&#34;https://github.com/amdjs/amdjs-api/wiki/AMD&#34;&gt;AMD&lt;/a&gt; staat voor &lt;strong&gt;&amp;ldquo;Async Module Definition&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;wat-doe-ik-als-een-api-geen-amd-gebruikt&#34;&gt;Wat doe ik als een API geen AMD gebruikt&lt;/h4&gt;

&lt;p&gt;Gebruik &lt;code&gt;shim&lt;/code&gt; config van Rjs: requirejs.org/docs/api.html#config-shim&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;require.config({
  shim: {
  	&#39;handlebars&#39;: {
  		exports: &#39;Handlebars&#39;
  	}
  },

  paths: {
    jquery: &#39;vendor/jquery.min&#39;,
    handlebars: &#39;./../components/handlebars/handlebars.runtime&#39;
  }
});
 
require([&#39;handlebars&#39;], function(Handlebars) {
	// gogo!
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wat is hier gebeurd:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;jquery&lt;/code&gt; en &lt;code&gt;handlebars&lt;/code&gt; includen wordt via een bepaald pad ingeladen in plaats van het standaard pad&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handlebars&lt;/code&gt; gaat gewrapped worden in een AMD module, die &lt;code&gt;Handlebars&lt;/code&gt; als variabele exporteert.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;hoe-verander-ik-mijn-relatieve-include-paden&#34;&gt;Hoe verander ik mijn (relatieve) include paden&lt;/h4&gt;

&lt;p&gt;Als je &lt;code&gt;grunt&lt;/code&gt; gebruikt, in &lt;code&gt;Gruntfile.js&lt;/code&gt; de hoofd Rjs config file alteren:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    rjs: {
      // no minification, is done by the min task
      optimize: &#39;none&#39;,
      baseUrl: &#39;./scripts&#39;,
      wrap: true,
      name: &#39;main&#39;
    },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bovenstaande gaat altijd vanaf mapje scripts beginnen lezen.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>