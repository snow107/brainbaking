<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Productive_programmer on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/productive_programmer/index.xml</link>
    <description>Recent content in Productive_programmer on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <atom:link href="http://www.brainbaking.com/tags/productive_programmer/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>productive_programmer</title>
      <link>http://www.brainbaking.com/wiki/books/productive_programmer/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/books/productive_programmer/</guid>
      <description>

&lt;h1 id=&#34;the-productive-programmer&#34;&gt;The Productive Programmer&lt;/h1&gt;

&lt;p&gt;Author: Neal Ford&lt;br/&gt;&lt;br/&gt;
&lt;a href=&#34;https://www.goodreads.com/search?utf8=%E2%9C%93&amp;query=Productive%20programmer%7cLibrarything%20Link&#34; target=&#34;_blank&#34;&gt;Productive programmer|Librarything Link&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Dit is een samenvatting van alle &lt;strong&gt;notes&lt;/strong&gt; in essentie, opgedeeld per hoofdstuk.&lt;/p&gt;

&lt;h2 id=&#34;part-1-mechanics&#34;&gt;Part 1: Mechanics&lt;/h2&gt;

&lt;h3 id=&#34;acceleration&#34;&gt;Acceleration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Concentrate on essence, not ceremony.&lt;/li&gt;
&lt;li&gt;The usefulness of an application list is inversely proportional to its length.&lt;/li&gt;
&lt;li&gt;Eye candy looks goot but isn&amp;rsquo;t nutritious.&lt;/li&gt;
&lt;li&gt;Typing is faster than navigation.&lt;/li&gt;
&lt;li&gt;Prefer typing over mousing.&lt;/li&gt;
&lt;li&gt;The address bar is the most efficient Windows interface.&lt;/li&gt;
&lt;li&gt;Take the time to learn all the hidden keyboard shortcuts of your universe.&lt;/li&gt;
&lt;li&gt;Context switching eats time.&lt;/li&gt;
&lt;li&gt;Clipboarding to batches is faster than clipboarding serially.&lt;/li&gt;
&lt;li&gt;Those who remember their history aren&amp;rsquo;t doomed to type it again.&lt;/li&gt;
&lt;li&gt;Embedded command prompts give you access to the best of both worlds.&lt;/li&gt;
&lt;li&gt;Embed the command prompt to make it easier to switch contexts.&lt;/li&gt;
&lt;li&gt;When coding, always prefer the keyboard to the mouse.&lt;/li&gt;
&lt;li&gt;Learn the IDE keyboard shortcuts in context, not by reading long lists.&lt;/li&gt;
&lt;li&gt;When you type a complicated construct for the second time, templatize it.&lt;/li&gt;
&lt;li&gt;For any symmetric operation on multiple lines of text, find a pattern and record a macro.&lt;/li&gt;
&lt;li&gt;The more times you perform a particular operation on a chunck of text, the greater the likehood you&amp;rsquo;ll do it again.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t type the same command over and over again.&lt;/li&gt;
&lt;li&gt;Spend a little time each day to make every day more productive.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img style=&#39;float: left; width: nolink&amp;|px;&#39; src=&#39;http://www.brainbaking.com/img//books/angry_monkeys.png&#39;&gt;&lt;/p&gt;

&lt;h3 id=&#34;focus&#34;&gt;Focus&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The higher the level of concentration, the denser the ideas.&lt;/li&gt;
&lt;li&gt;THe bigger the haystack, the harder it is to find the needle.&lt;/li&gt;
&lt;li&gt;Replace file hierarchies with search.&lt;/li&gt;
&lt;li&gt;Try simpler searching before resorting to &amp;ldquo;hard target&amp;rdquo; searching.&lt;/li&gt;
&lt;li&gt;Take advantage of built-in focus facilities like colors.&lt;/li&gt;
&lt;li&gt;Use links to create virtual project management folders.&lt;/li&gt;
&lt;li&gt;Virtual desktops unclutter your stacks of windows.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;automation&#34;&gt;Automation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use tools out of their original context when appropriate.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t spend time doing by hand what you can automate.&lt;/li&gt;
&lt;li&gt;Performing simple, repetitive tasks squanders your concentration.&lt;/li&gt;
&lt;li&gt;Finding innovatige solutions to problems makes it easier to solve similar problems in the future.&lt;/li&gt;
&lt;li&gt;Timebox speculative development.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;canonicality&#34;&gt;Canonicality&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keep a single copy of everything you don&amp;rsquo;t build in version control.&lt;/li&gt;
&lt;li&gt;Use indirection to create friendlier workspaces.&lt;/li&gt;
&lt;li&gt;Use indirection to keep your life in sync (symlinks).&lt;/li&gt;
&lt;li&gt;No matter what you are copying and pasting, reuse by copy and paste is evil.&lt;/li&gt;
&lt;li&gt;Use virtualization to canonicalize dependencies for your projects.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t let object-relational mapping tools violate canonicality.&lt;/li&gt;
&lt;li&gt;Add behavior to generated code via extention, open classes or partial classes.&lt;/li&gt;
&lt;li&gt;Always keep code and schemas in sync.&lt;/li&gt;
&lt;li&gt;Use migrations to create repeatable snapshots of schema changes.&lt;/li&gt;
&lt;li&gt;Out-of-date documentation is worse than none because it is actively misleading.&lt;/li&gt;
&lt;li&gt;For managers, documentation is about risk mitigation.&lt;/li&gt;
&lt;li&gt;Always keep &amp;ldquo;living&amp;rdquo; documents.&lt;/li&gt;
&lt;li&gt;Anything that takes real effort to create makes its creator irrationally attached to it.&lt;/li&gt;
&lt;li&gt;Whiteboard + digital camera &amp;gt; CASE tools.&lt;/li&gt;
&lt;li&gt;Generate all the technical documents you can.&lt;/li&gt;
&lt;li&gt;Never keep two copies of the same thing.&lt;/li&gt;
&lt;li&gt;Repetition is the single most diminishing force in software development.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;part-2-practice&#34;&gt;Part 2: Practice&lt;/h2&gt;

&lt;h3 id=&#34;statistic-analysis&#34;&gt;Statistic analysis&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Statistic analysis tools represent cheap verification.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;good-citizenship&#34;&gt;Good citizenship&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t create global variables, even the object kind.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;yagni&#34;&gt;YAGNI&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t pay complexity tax unless you absolutely must.&lt;/li&gt;
&lt;li&gt;Software development is first and foremost a communication game.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ancient-philosophers&#34;&gt;Ancient philosophers&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Maximize work on essential complexity; kill accidental complexity.&lt;/li&gt;
&lt;li&gt;Even general-purpose programming languages suffer from the &amp;ldquo;80-10-10&amp;rdquo; rule.&lt;/li&gt;
&lt;li&gt;Pay attention to the lore of &amp;ldquo;ancient&amp;rdquo; technologies. (Smalltalk lol)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;meta-programming&#34;&gt;Meta-programming&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Meta-programming changes your syntactic vocabulary, giving you more ways to express yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;composed-method-and-slap&#34;&gt;Composed method and SLAP&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Refactoring to composed method reveals hidden reusable code.&lt;/li&gt;
&lt;li&gt;TDD predisposes composed method.&lt;/li&gt;
&lt;li&gt;Encapuslate all implementation details away from public methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;find-the-perfect-tools&#34;&gt;Find the perfect Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Find your perfect editor and learn it inside and out.&lt;/li&gt;
&lt;li&gt;Record macros for all symmetrical text manipulations.&lt;/li&gt;
&lt;li&gt;Good knowledge of regexp can save orders of magnitude of effort.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t make round trips when you can batch.&lt;/li&gt;
&lt;li&gt;Use a &amp;ldquo;real&amp;rdquo; scripting language for automation chores.&lt;/li&gt;
&lt;li&gt;Keep behavior in (testable) code.&lt;/li&gt;
&lt;li&gt;Pay attention to the evolution of your tools.&lt;/li&gt;
&lt;li&gt;Pay as little complexitax as you can.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>