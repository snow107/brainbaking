<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Listmerger on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/listmerger/index.xml</link>
    <description>Recent content in Listmerger on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <atom:link href="http://www.brainbaking.com/tags/listmerger/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>listmerger</title>
      <link>http://www.brainbaking.com/wiki/code/java/dynamica/listmerger/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/java/dynamica/listmerger/</guid>
      <description>

&lt;h1 id=&#34;code-java-dynamica-listmerger&#34;&gt;code:java:dynamica &amp;gt;&amp;gt; Listmerger&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public final class ListMerger&amp;lt;ItemType, ItemTypeAfterConversion&amp;gt; {

    private final Function&amp;lt;ItemType, ItemTypeAfterConversion&amp;gt; itemConverterFn;

    public ListMerger() {
        this.itemConverterFn = identityFn();
    }

    public ListMerger(Function&amp;lt;ItemType, ItemTypeAfterConversion&amp;gt; itemConverterFn) {
        this.itemConverterFn = itemConverterFn;
    }

    private Function&amp;lt;ItemType, ItemTypeAfterConversion&amp;gt; identityFn() {
        return new Function&amp;lt;ItemType, ItemTypeAfterConversion&amp;gt;() {

            @SuppressWarnings(&amp;quot;unchecked&amp;quot;)
            @Override
            public ItemTypeAfterConversion apply(ItemType input) {
                return (ItemTypeAfterConversion) input;
            }
        };
    }

    public final void mergeLists(List&amp;lt;? extends ItemType&amp;gt; oldList, List&amp;lt;? extends ItemType&amp;gt; newList, ListMergable&amp;lt;ItemType&amp;gt; mergable) {
        List&amp;lt;ItemTypeAfterConversion&amp;gt; oldTransformed = new ArrayList&amp;lt;ItemTypeAfterConversion&amp;gt;(transform(oldList, itemConverterFn));
        List&amp;lt;ItemTypeAfterConversion&amp;gt; newTransformed = new ArrayList&amp;lt;ItemTypeAfterConversion&amp;gt;(transform(newList, itemConverterFn));

        for (ItemType item : new ArrayList&amp;lt;ItemType&amp;gt;(oldList)) {
            if (!newTransformed.contains(itemConverterFn.apply(item))) {
                mergable.itemHasBeenRemoved(item);
            } else {
                mergable.itemHasBeenChangedInOldList(item);
            }
        }
        for (ItemType item : new ArrayList&amp;lt;ItemType&amp;gt;(newList)) {
            if (!oldTransformed.contains(itemConverterFn.apply(item))) {
                mergable.itemHasBeenAdded(item);
            } else {
                mergable.itemHasBeenChangedInNewList(item);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En de test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class ListMergerTest {

    private AtomicInteger integer = null;
    private AtomicInteger amount = null;

    @Before
    public void setUp() {
        this.integer = new AtomicInteger();
        this.amount = new AtomicInteger(0);
    }

    @Test
    public void noItemsChanged() {
        new ListMerger&amp;lt;Integer, Long&amp;gt;(intToLongFn()).mergeLists(Lists.newArrayList(1, 3), Lists.newArrayList(1, 3), new ListMergable&amp;lt;Integer&amp;gt;() {

            @Override
            public void itemHasBeenRemoved(Integer item) {
                throw new UnsupportedOperationException();
            }

            @Override
            public void itemHasBeenChangedInOldList(Integer item) {
                amount.set(amount.get() + 1);
            }

            @Override
            public void itemHasBeenChangedInNewList(Integer item) {
            }

            @Override
            public void itemHasBeenAdded(Integer item) {
                throw new UnsupportedOperationException();
            }
        });

        assertThat(amount.get()).isEqualTo(2);
    }

    @Test
    public void itemHasBeenAddedUsingIdentity() {
        new ListMerger&amp;lt;Integer, Integer&amp;gt;().mergeLists(Lists.newArrayList(1, 3), Lists.newArrayList(1, 2, 3), new ListMergable&amp;lt;Integer&amp;gt;() {

            @Override
            public void itemHasBeenRemoved(Integer item) {
                throw new UnsupportedOperationException();
            }

            @Override
            public void itemHasBeenChangedInOldList(Integer item) {
            }

            @Override
            public void itemHasBeenChangedInNewList(Integer item) {
            }

            @Override
            public void itemHasBeenAdded(Integer item) {
                integer.set(item);
                amount.set(amount.get() + 1);
            }
        });

        assertThat(amount.get()).isEqualTo(1);
        assertThat(integer.get()).isEqualTo(2);
    }

    @Test
    public void itemHasBeenAdded() {
        new ListMerger&amp;lt;Integer, Long&amp;gt;(intToLongFn()).mergeLists(Lists.newArrayList(1, 3), Lists.newArrayList(1, 2, 3), new ListMergable&amp;lt;Integer&amp;gt;() {

            @Override
            public void itemHasBeenRemoved(Integer item) {
                throw new UnsupportedOperationException();
            }

            @Override
            public void itemHasBeenChangedInOldList(Integer item) {
            }

            @Override
            public void itemHasBeenChangedInNewList(Integer item) {
            }

            @Override
            public void itemHasBeenAdded(Integer item) {
                integer.set(item);
                amount.set(amount.get() + 1);
            }
        });

        assertThat(amount.get()).isEqualTo(1);
        assertThat(integer.get()).isEqualTo(2);
    }

    @Test
    public void itemHasBeenRemovedUsingIdentity() {
        new ListMerger&amp;lt;Integer, Integer&amp;gt;().mergeLists(Lists.newArrayList(1, 3), Lists.newArrayList(1), new ListMergable&amp;lt;Integer&amp;gt;() {

            @Override
            public void itemHasBeenRemoved(Integer item) {
                integer.set(item);
                amount.set(amount.get() + 1);
            }

            @Override
            public void itemHasBeenChangedInOldList(Integer item) {
            }

            @Override
            public void itemHasBeenChangedInNewList(Integer item) {
            }

            @Override
            public void itemHasBeenAdded(Integer item) {
                throw new UnsupportedOperationException();
            }
        });

        assertThat(amount.get()).isEqualTo(1);
        assertThat(integer.get()).isEqualTo(3);
    }

    @Test
    public void itemHasBeenRemoved() {
        new ListMerger&amp;lt;Integer, Long&amp;gt;(intToLongFn()).mergeLists(Lists.newArrayList(1, 2, 3), Lists.newArrayList(1, 3), new ListMergable&amp;lt;Integer&amp;gt;() {

            @Override
            public void itemHasBeenRemoved(Integer item) {
                integer.set(item);
                amount.set(amount.get() + 1);
            }

            @Override
            public void itemHasBeenChangedInOldList(Integer item) {
            }

            @Override
            public void itemHasBeenChangedInNewList(Integer item) {
            }

            @Override
            public void itemHasBeenAdded(Integer item) {
                throw new UnsupportedOperationException();
            }
        });

        assertThat(amount.get()).isEqualTo(1);
        assertThat(integer.get()).isEqualTo(2);
    }

    private Function&amp;lt;Integer, Long&amp;gt; intToLongFn() {
        return new Function&amp;lt;Integer, Long&amp;gt;() {

            @Override
            public Long apply(Integer input) {
                return new Long(input);
            }
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voorbeeld van gebruik:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;        final List&amp;lt;Location&amp;gt; removedLocations = new ArrayList&amp;lt;Location&amp;gt;();
        final List&amp;lt;Location&amp;gt; addedLocations = new ArrayList&amp;lt;Location&amp;gt;();
        new ListMerger&amp;lt;Location, Location&amp;gt;().mergeLists(oldLocations, carpark.getLocations(), new ListMergable&amp;lt;Location&amp;gt;() {

            @Override
            public void itemHasBeenAdded(Location item) {
                addedLocations.add(item);
            }

            @Override
            public void itemHasBeenRemoved(Location item) {
                removedLocations.add(item);
            }

            @Override
            public void itemHasBeenChangedInOldList(Location item) {
            }

            @Override
            public void itemHasBeenChangedInNewList(Location item) {
            }

        });
        if (!removedLocations.isEmpty()) {
            crmImportGatewayService.forDeletion().sendCarparkLocations(carpark, removedLocations);
        }
        if (!addedLocations.isEmpty()) {
            crmImportGatewayService.forCreation().sendCarparkLocations(carpark, addedLocations);
        }

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>