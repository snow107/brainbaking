<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sqlite on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/sqlite/index.xml</link>
    <description>Recent content in Sqlite on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <atom:link href="http://www.brainbaking.com/tags/sqlite/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>sqlite</title>
      <link>http://www.brainbaking.com/wiki/code/db/sqlite/</link>
      <pubDate>Fri, 17 Jul 2015 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/db/sqlite/</guid>
      <description>

&lt;h1 id=&#34;sqlite&#34;&gt;SQLite&lt;/h1&gt;

&lt;h3 id=&#34;ddls-copypasten-van-oracle&#34;&gt;DDLs copypasten van Oracle&lt;/h3&gt;

&lt;p&gt;Bijvoorbeeld de gegenereerde versie (SQL tab) van Oracle SQL Developer overnemen gaat niet zomaar.&lt;/p&gt;

&lt;p&gt;Er zijn enkele verschillen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;NOT NULL ENABLE&lt;/code&gt; wegdoen. &lt;code&gt;NOT NULL&lt;/code&gt; maakt niets uit aangezien het in-memory is om te testen!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;USING INDEX&lt;/code&gt; blabla na de &lt;code&gt;PRIMARY KEY&lt;/code&gt; statements zijn ook allemaal niet nodig (&lt;code&gt;STORAGE&lt;/code&gt; etc)&lt;/li&gt;
&lt;li&gt;speciale defaults of syscalls zoals &lt;code&gt;sys_guid()&lt;/code&gt; bestaan niet.&lt;/li&gt;
&lt;li&gt;definities van groottes: wegdoen van &lt;code&gt;BYTE&lt;/code&gt;: &lt;code&gt;VARCHAR2(26)&lt;/code&gt; dus.&lt;/li&gt;
&lt;li&gt;opletten met datums: zie onder.&lt;/li&gt;
&lt;li&gt;Namespace mag ook weg bij &lt;code&gt;CREATE TABLE &amp;quot;SPACE&amp;quot;.&amp;quot;NAME&amp;quot; (&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;connection-strings&#34;&gt;Connection strings&lt;/h3&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://www.connectionstrings.com/sqlite/&#34;&gt;http://www.connectionstrings.com/sqlite/&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;file-based&#34;&gt;File based&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;Data Source######c:&amp;lt;br/&amp;gt;mydb.db;Version3;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;in-memory&#34;&gt;In-memory&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;Data Source######:memory:;Version3;New=True;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Conventie &lt;code&gt;Data Source=&lt;/code&gt; notatie gehanteerd door &lt;a href=&#34;http:*www.connectionstrings.com/sqlite/&#34;&gt;http:*www.connectionstrings.com/sqlite/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Andere notatie&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FullUri######file::memory:?cacheshared
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notatie gehanteerd door &lt;a href=&#34;https:*www.sqlite.org/inmemorydb.html&#34;&gt;https:*www.sqlite.org/inmemorydb.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Versie en New hoeft blijkbaar niet (?)&lt;/p&gt;

&lt;p&gt;❗ Elke keer als je een connectie opendoet gaat SQLite de inmemory DB state restoren naar default (dus leeg). Als je dus bvb;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;connectie open&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CREATE TABLE;&lt;/code&gt; brol uitvoeren&lt;/li&gt;
&lt;li&gt;connectie sluiten&lt;/li&gt;
&lt;li&gt;roep andere method aan&lt;/li&gt;
&lt;li&gt;connectie open&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT * FROM TABLE;&lt;/code&gt; brol uitvoeren&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;BOEM no such table&amp;hellip;&lt;/p&gt;

&lt;p&gt;Zie ook &lt;a href=&#34;http://stackoverflow.com/questions/17477246/sqlite-in-memory-database-create-table-does-not-work&#34;&gt;SQLite in memory create table does not work&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;❗ Hou dus 1x een connectie open voor unit testen bij een &lt;code&gt;[SetUp]&lt;/code&gt; en geef referenties door.&lt;/p&gt;

&lt;h5 id=&#34;extra-opties-meegeven-via-de-connection-string&#34;&gt;Extra opties meegeven via de connection string&lt;/h5&gt;

&lt;p&gt;Je kan &lt;code&gt;PRAGMA&lt;/code&gt; parameters zoals &lt;a href=&#34;http://www.sqlite.org/pragma.html#pragma_locking_mode&#34;&gt;deze&lt;/a&gt; meegeven.&lt;/p&gt;

&lt;h3 id=&#34;integreren-met-c&#34;&gt;Integreren met C#&lt;/h3&gt;

&lt;h4 id=&#34;db-connectie&#34;&gt;DB Connectie&lt;/h4&gt;

&lt;p&gt;Gebruik &lt;a href=&#34;http://system.data.sqlite.org/index.html/doc/trunk/www/index.wiki&#34;&gt;http://system.data.sqlite.org/index.html/doc/trunk/www/index.wiki&lt;/a&gt; (package &lt;code&gt;System.data.SQLite (x86/x64)&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Voor &lt;code&gt;OleDb&lt;/code&gt; C# code, is er voor elke klasse een equivalent in de &lt;code&gt;SQLite&lt;/code&gt; namespace, bijvoorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        private SQLiteConnection SqLiteDbConnection()
        {
            return new SQLiteConnection()
                {
                    ConnectionString ###### &amp;quot;Data Sourcemydb.s3db;&amp;quot;,
                    Flags = SQLiteConnectionFlags.LogAll
                };
        }

        public void SetupDb()
        {
            using (var connection = SqLiteDbConnection())
            {
                connection.Open();
                var transaction = connection.BeginTransaction();
                var sqLiteCommand = new SQLiteCommand()
                    {
                        Connection = (SQLiteConnection) connection,
                        CommandType = CommandType.Text,
                        CommandText = GetSchemaCreateSql()
                    };
                sqLiteCommand.ExecuteNonQuery();
                transaction.Commit();
            }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;builden-op-x86-x64-systemen&#34;&gt;Builden op x86/x64 systemen&lt;/h4&gt;

&lt;p&gt;Afhankelijk van welke package manager je gebruikt (NuGet bvb.) kan een &lt;code&gt;SQLite.interop.dll&lt;/code&gt; in submapjes &lt;code&gt;x86&lt;/code&gt; en &lt;code&gt;x64&lt;/code&gt; geplaatst worden (Copy always als content). Lokaal werkt dit, maar op de build pc (die bijvoorbeeld enkel 32-bit is) niet, omdat de DLL op dezelfde plaats als de executable verwacht wordt. Hier zijn een paar mogelijke oplossingen voor:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Gebruik enkel de 32bit versie. (er is zo&amp;rsquo;n specifieke package voor)&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Hint&amp;rdquo; de DLL loader om de juiste te gebruiken&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[System.Runtime.InteropServices.DllImport(&amp;quot;kernel32.dll&amp;quot;, CharSet ###### System.Runtime.InteropServices.CharSet.Unicode, SetLastError  true)]
    [return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.Bool)]
    static extern bool SetDllDirectory(string lpPathName);
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    [STAThread]
    static void Main()
    {
        int wsize = IntPtr.Size;
        string libdir ###### (wsize  4)?&amp;quot;x86&amp;quot;:&amp;quot;x64&amp;quot;;
        string appPath = System.IO.Path.GetDirectoryName(Application.ExecutablePath);
        SetDllDirectory(System.IO.Path.Combine(appPath, libdir));
        // ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zie ook &lt;a href=&#34;http:*stackoverflow.com/questions/13028069/unable-to-load-dll-sqlite-interop-dll&#34;&gt;http:*stackoverflow.com/questions/13028069/unable-to-load-dll-sqlite-interop-dll&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;net-dates-en-sqlite-dates&#34;&gt;.NET dates en SQLite dates&lt;/h4&gt;

&lt;p&gt;Als je een &lt;code&gt;DATE&lt;/code&gt; kolom hebt, en een SQL zoals gewoon &lt;code&gt;select * from blah;&lt;/code&gt; uitvoert, kan je de volgende fout krijgen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String was not recognized as a valid DateTime
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dit komt doordat SQLite dynamisch getypeerd is en voor hem een date hetzelfde als een char is, gebruik daarvoor de &lt;code&gt;date()&lt;/code&gt; functie om zelf te parsen! Beetje vervelend in de queries&amp;hellip;&lt;/p&gt;

&lt;p&gt;Een andere mogelijkheid is &lt;code&gt;DateTimeFormat=Ticks&lt;/code&gt; in de connection string meegeven.&lt;/p&gt;

&lt;h4 id=&#34;creating-integration-tests-using-record-objects&#34;&gt;Creating integration tests, using Record objects&lt;/h4&gt;

&lt;p&gt;Maak objecten die extenden van &lt;code&gt;DatabaseInsertable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public abstract class DatabaseInsertable
    {
        protected abstract string GetTable();

        public override string ToString()
        {
            var fieldDict = FieldDictionary();
            var fields = &amp;quot;(&amp;quot; + string.Join(&amp;quot;,&amp;quot;, fieldDict.Keys) + &amp;quot;)&amp;quot;;
            var values = &amp;quot;(&amp;quot; + string.Join(&amp;quot;,&amp;quot;, fieldDict.Values) + &amp;quot;)&amp;quot;;

            return &amp;quot;insert into &amp;quot; + GetTable() + fields + &amp;quot; values &amp;quot; + values;
        }

        public void Save()
        {
            DbConnection.Instance.CreateCommand(ToString()).ExecuteNonQuery();
        }

        private Dictionary&amp;lt;string, string&amp;gt; FieldDictionary()
        {
            var dictionary = new Dictionary&amp;lt;string, string&amp;gt;();

            foreach (var info in this.GetType().GetFields())
            {
                if (info.GetValue(this) != null)
                {
                    dictionary.Add(info.Name, &amp;quot;&#39;&amp;quot; + info.GetValue(this).ToString() + &amp;quot;&#39;&amp;quot;);
                }
            }

            return dictionary;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zoals bijvoorbeeld&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    internal class UnitRecord : DatabaseInsertable
    {
        public string creator;
        public string guid;

        protected override string GetTable()
        {
            return &amp;quot;UNIT&amp;quot;;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gebruik:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;new UnitRecord() { creator ###### &amp;quot;bla&amp;quot;; guid  &amp;quot;lala&amp;quot;; }.Save(); // done!
// execute your SUT stuff here
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;DbConnection&lt;/code&gt; gebruikt dan de SQLite versie om een &amp;ldquo;unit&amp;rdquo; record aan te maken in de DB. Merk op dat de properties 100% moeten overeenkomen.&lt;/p&gt;

&lt;p&gt;Het enige speciale wat in &lt;code&gt;IntegrationTestCase&lt;/code&gt; gedefiniëerd is, is de &amp;ldquo;gewone&amp;rdquo; &lt;code&gt;OleDbConnection&lt;/code&gt; vervangen door de SQLite verie:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public abstract class IntegrationTestCase
    {
        protected SqLitedbConnection connection;

        [TestInitialize]
        public void CleanDb()
        {
            this.connection = new SqLitedbConnection();
            DbConnection.Instance = connection; // instead of OleDbConnection, lazyloaded singleton getter property. 
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Omdat Ole en SQLite soms andere interfaces hebben moeten we er zelf een anticorruptie laag (de IConnection interface) tussen zetten:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    using System.Collections.Generic;
    using System.Data;
    using System.Data.Common;

    public interface IdbConnection
    {
        object QueryProcedure(string procedure, IDictionary&amp;lt;string, object&amp;gt; parameters, string outputParameter);

        DbParameter CreateParameter(string field, object value);

        DbCommand CreateCommand(string query);

        DataSet Query(DbCommand command);

        DataSet Query(string query);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Het verschil is altijd een &lt;code&gt;SQLiteCommand&lt;/code&gt; in plaats van een &lt;code&gt;OleDbCommand&lt;/code&gt; aanmaken. Er zijn soms ook subtiele verschillen in het aanmaken en doorgeven van de parameters.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integration Testing with SQLite</title>
      <link>http://www.brainbaking.com/post/integration-testing-sqlite/</link>
      <pubDate>Mon, 04 Nov 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/post/integration-testing-sqlite/</guid>
      <description>

&lt;p&gt;This article is based on the notes I&amp;rsquo;ve collected on &lt;a href=&#34;http://brainbaking.com/wiki/code/db/sqlite&#34;&gt;My Wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On previous projects I&amp;rsquo;ve worked on, development PCs came with a local version of the database scheme. Each DB change also got rolled out to those computers, which enabled us developers to fool around without breaking anything on the development (or test) environment. This is another step closer to happiness, at least for our proxy customers who didn&amp;rsquo;t have to reinsert their test data every time we flushed something from a table. Sometimes though, there&amp;rsquo;s some lame excuse for not having a local database installed:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have a lot of stored procedures and it&amp;rsquo;s too hard to duplicate them locally&lt;/li&gt;
&lt;li&gt;We worked like this for years, why would I want a local DB?&lt;/li&gt;
&lt;li&gt;But then my data is out of sync!&lt;/li&gt;
&lt;li&gt;I tried doing that but my manager says I should focus on delivering content&lt;/li&gt;
&lt;li&gt;Blah blah blah&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Installing an Oracle XE runtime on your machine might include working around some issues which can take up some time but it&amp;rsquo;s time well invested, compared to multiple developers connecting to one shared database. In any case, there&amp;rsquo;s another possibility: an &lt;strong&gt;in-memory database&lt;/strong&gt;, such as &lt;a href=&#34;http://www.sqlite.org/&#34;&gt;SQLite&lt;/a&gt;. This does still require you to keep the upgrade scripts synced, but also enables you to get rid of a lot of annoying things like &lt;em&gt;foreign key constraints&lt;/em&gt; for testing purposes.&lt;/p&gt;

&lt;h3 id=&#34;integrating-sqlite-with-net&#34;&gt;Integrating SQLite with .NET&lt;/h3&gt;

&lt;p&gt;Simply use &lt;a href=&#34;http://system.data.sqlite.org/index.html/doc/trunk/www/index.wiki&#34;&gt;System.data.SQLite&lt;/a&gt;. For each OleDb object, there&amp;rsquo;s an equivalent SQLite one in the correct namespace. The only problem is, some of them don&amp;rsquo;t share an abstract object so you&amp;rsquo;ll have to come up with an anti-corruption layer yourself. Create a connection using this connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    private SQLiteConnection SqLiteDbConnection()
    {
        return new SQLiteConnection()
            {
                ConnectionString = &amp;quot;Data Source=:memory:;Version=3;New=True;DateTimeFormat=Ticks&amp;quot;,
                Flags = SQLiteConnectionFlags.LogAll
            };
    }

    public void SetupDb()
    {
        using (var connection = SqLiteDbConnection())
        {
            connection.Open();
            var transaction = connection.BeginTransaction();
            var sqLiteCommand = new SQLiteCommand()
                {
                    Connection = (SQLiteConnection) connection,
                    CommandType = CommandType.Text,
                    CommandText = GetSchemaCreateSql()
                };
            sqLiteCommand.ExecuteNonQuery();
            transaction.Commit();
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You need to pay attention to the &lt;code&gt;DateTimeFormat&lt;/code&gt; substring in the connection string as SQLite is &amp;ldquo;dynamically typed&amp;rdquo;, compared to Oracle. This means it stores dates exactly the same as chars, otherwise you might encounter an error like &lt;code&gt;&amp;quot;string was not recognized as a valid DateTime&amp;quot;&lt;/code&gt; when executing a select statement.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Watch out with closing the DB Connection&lt;/strong&gt; using an in-memory DB; as this completely resets everything. As soon as you open a connection, you can execute create table commands (read your stored DDL file and do it in bulk).
Your anti-corruption layer between the abstract DB Connection and SQLite/OleDB should expose a few methods. It should be able to query (with or without parameters or providing a &lt;code&gt;DbCommand&lt;/code&gt;) and possibly stored procedures. This is what I&amp;rsquo;ve come up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface IdbConnection
{
    object QueryProcedure(string procedure, IDictionary&amp;lt;string, object&amp;gt; parameters, string outputParameter);

    DbParameter CreateParameter(string field, object value);

    DbCommand CreateCommand(string query);

    DataSet Query(DbCommand command);

    DataSet Query(string query);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on the implementation, it&amp;rsquo;ll return an &lt;code&gt;SQLiteCommand&lt;/code&gt; or an &lt;code&gt;OleDbCommand&lt;/code&gt; instance.&lt;/p&gt;

&lt;h3 id=&#34;creating-integration-tests-using-record-objects&#34;&gt;Creating integration tests, using Record objects&lt;/h3&gt;

&lt;p&gt;To be able to quickly insert junk in an in-memory table, I came up with a simple object-table mapping which uses reflection to scan for each property of an object, and map that property to a column in a table. Normally you would simply use your domain objects and issue a &lt;code&gt;save()&lt;/code&gt; or &lt;code&gt;persist()&lt;/code&gt; call using for instance &lt;code&gt;NHibernate&lt;/code&gt; but we didn&amp;rsquo;t have anything like that and this was easy to setup.&lt;/p&gt;

&lt;p&gt;Create an object for each table in your unit test project, extending &lt;code&gt;DatabaseInsertable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public abstract class DatabaseInsertable
{
    protected abstract string GetTable();

    public override string ToString()
    {
        var fieldDict = FieldDictionary();
        var fields = &amp;quot;(&amp;quot; + string.Join(&amp;quot;,&amp;quot;, fieldDict.Keys) + &amp;quot;)&amp;quot;;
        var values = &amp;quot;(&amp;quot; + string.Join(&amp;quot;,&amp;quot;, fieldDict.Values) + &amp;quot;)&amp;quot;;

        return &amp;quot;insert into &amp;quot; + GetTable() + fields + &amp;quot; values &amp;quot; + values;
    }

    public void Save()
    {
        DbConnection.Instance.CreateCommand(ToString()).ExecuteNonQuery();
    }

    private Dictionary&amp;lt;string, string&amp;gt; FieldDictionary()
    {
        var dictionary = new Dictionary&amp;lt;string, string&amp;gt;();

        foreach (var info in this.GetType().GetFields())
        {
            if (info.GetValue(this) != null)
            {
                dictionary.Add(info.Name, &amp;quot;&#39;&amp;quot; + info.GetValue(this).ToString() + &amp;quot;&#39;&amp;quot;);
            }
        }

        return dictionary;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;internal class UnitRecord : DatabaseInsertable
{
    public string creator;
    public string guid;

    protected override string GetTable()
    {
        return &amp;quot;UNIT&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can simply issue &lt;code&gt;new UnitRecord() { creator = &amp;quot;bla&amp;quot;; guid = &amp;quot;lala&amp;quot;; }.Save();&lt;/code&gt; and it&amp;rsquo;s saved into the unit table, yay!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>