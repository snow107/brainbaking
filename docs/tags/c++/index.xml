<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Brain Baking</title>
    <link>https://brainbaking.com/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Fri, 03 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://brainbaking.com/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Domain Driven Design in C</title>
      <link>https://brainbaking.com/post/domain-driven-design-in-c/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/domain-driven-design-in-c/</guid>
      <description>As old as the language C may be, it took other languages a long time to catch up with something as mundane as a pointer. Pointers are the bread and butter of any C program and are widely regarded as a horrifying thing to work with. It might be a drag and require some plumbing (as with any language) but the payoff is extreme flexibility and control.
An address can point to anything - that includes functions.</description>
    </item>
    
    <item>
      <title>Bye autotools hello Scons</title>
      <link>https://brainbaking.com/post/scons-building/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/scons-building/</guid>
      <description>Remember this?
 ./configure make make install  That&amp;rsquo;s not so bad, as long as you have the right compiler and linker flags configured, depending on the target OS. The real problem, however, is trying to figure out how to alter something if you didn&amp;rsquo;t write the Makefile yourself. Or if you in fact did write it, but it was some time ago. Two days. No, four hours.
The problem Try to study the autoconf and automake flow diagram, explained on Wikipedia: the GNU build system.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Basics</title>
      <link>https://brainbaking.com/post/cplusplus-basics/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/cplusplus-basics/</guid>
      <description>Scope C++ heeft block level scope, net als Java, alleen is het mogelijk om een variabele binnen een for loop dezelfde naam te geven als een die buiten die block gedefiniëerd is, terwijl dat in Java niet gaat:
int j; for(int i = 0; i &amp;lt; 10; i++) { int j = i + 1; // compile fout in java }  Pointer scope auto_ptr kan gebruikt worden om een pointer automatisch te verwijderen met delete wanneer deze scope verliest - alle andere zaken moet je zelf opkuisen.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Basics: unit testing</title>
      <link>https://brainbaking.com/post/cplusplus-testing/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/cplusplus-testing/</guid>
      <description>Using Google Test Downloaden op https://code.google.com/p/googletest/downloads/list
Waarom?
 Platform onafhankelijk Snelheid Geen gezeik met Managed C++, compatibel met &amp;ldquo;eender wat&amp;rdquo; (enige vereiste: cc compiler variant) Wordt veel gebruikt (Chromium, Stack overflow)  Waarom niet?
 slechte of geen integratie met VStudio (zie onder) wéér een andere syntax dan MS .NET testen beetje awkward assertions  Assertions schrijven #include &amp;quot;../BaseCode/BaseCode.h&amp;quot; #include &amp;quot;gtest/gtest.h&amp;quot; TEST(MyTestCase, MyTest_Success) { EXPECT_EQ(2, MySum(1, 1)); } TEST(MyTestCase, MyTest_Failure) { EXPECT_EQ(3, MySum(1, 2)); }  Waarbij dan BaseCode uw system under test zaken bevat (waar MySum defined is)</description>
    </item>
    
  </channel>
</rss>