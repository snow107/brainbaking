<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Domain Driven Design on Brain Baking</title>
    <link>https://brainbaking.com/tags/domain-driven-design/</link>
    <description>Recent content in Domain Driven Design on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Mon, 26 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://brainbaking.com/tags/domain-driven-design/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hiding Code Complexity</title>
      <link>https://brainbaking.com/post/hiding-complexity/</link>
      <pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/hiding-complexity/</guid>
      <description>We like to talk about the architecture of our software because we like complexity. Software developers are the bears, and complex patterns seem to be the honey. The more I pair with people the more I wonder: &amp;ldquo;what makes us decide to take on a simple question with a difficult answer&amp;rdquo;? Why would anyone choose to implement something so complex, that it cannot be easily understood even the day after it&amp;rsquo;s committed?</description>
    </item>
    
    <item>
      <title>Faking domain logic</title>
      <link>https://brainbaking.com/post/faking-domain-logic/</link>
      <pubDate>Tue, 23 Sep 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/faking-domain-logic/</guid>
      <description>Sometimes, life is just a little bit more difficult than you imagined the day before. Sometimes, you have to work on a legacy codebase with custom frameworks rooted so deeply you&amp;rsquo;re having lot&amp;rsquo;s of trouble trying to build around them. To make it a bit more concrete, here&amp;rsquo;s an example: imagine a separate DLL for interfaces and a separate DLL for the implementation. This decision was made because we use NHibernate as a data mapper and not to write beautiful domain driven design code.</description>
    </item>
    
  </channel>
</rss>