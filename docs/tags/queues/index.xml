<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Queues on Brain Baking</title>
    <link>https://brainbaking.com/tags/queues/</link>
    <description>Recent content in Queues on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Tue, 12 Mar 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://brainbaking.com/tags/queues/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>queues</title>
      <link>https://brainbaking.com/wiki/code/java/queues/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/queues/</guid>
      <description>code:java &amp;gt;&amp;gt; Queues Zie ook code/java/monitoring om JMX te enablen.
Via JMX (HornetQ) queues leegmaken Dit is een TestExecutionListener die je met @TestExecutionListeneres kan gebruiken om na elke test de queues leeg te maken:
public class QueueCleanerContextListener extends AbstractTestExecutionListener { public void cleanQueues() throws Exception { InitialContext initialContext = null; JMXConnector connector = null; try { connector = connectToQueue(); for (String queue : getJMSServerControl(connector).getQueueNames()) { getJMSQueueControl(connector, queue).removeMessages(null); } } finally { connector.</description>
    </item>
    
    <item>
      <title>queues</title>
      <link>https://brainbaking.com/wiki/code/queues/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/queues/</guid>
      <description>Queues HornetQ queues definiÃ«ren in hornetq-jms.xml:
&amp;lt;queue name=&amp;quot;blaQuezue&amp;quot;&amp;gt; &amp;lt;entry name=&amp;quot;/queue/app/queueName&amp;quot;/&amp;gt; &amp;lt;/queue&amp;gt;  store-and-forward systeem opzetten HornetQ werkt met bridges die je moet configureren in de hornetq-configuration.xml:
&amp;lt;bridges&amp;gt; &amp;lt;bridge name=&amp;quot;system1-store-and-forward&amp;quot;&amp;gt; &amp;lt;queue-name&amp;gt;jms.queue.fromQueue&amp;lt;/queue-name&amp;gt; &amp;lt;forwarding-address&amp;gt;jms.queue.toQueue&amp;lt;/forwarding-address&amp;gt; &amp;lt;static-connectors&amp;gt; &amp;lt;connector-ref&amp;gt;forward-to-hornetq-connector&amp;lt;/connector-ref&amp;gt; &amp;lt;/static-connectors&amp;gt; &amp;lt;/bridge&amp;gt; &amp;lt;/bridges&amp;gt; &amp;lt;connectors&amp;gt; &amp;lt;connector name=&amp;quot;forward-to-hornetq-connector&amp;quot;&amp;gt; &amp;lt;factory-class&amp;gt;org.hornetq.core.remoting.impl.netty.NettyConnectorFactory&amp;lt;/factory-class&amp;gt; &amp;lt;param key######&amp;quot;host&amp;quot; value&amp;quot;forwardToAddress&amp;quot;/&amp;gt; &amp;lt;param key######&amp;quot;port&amp;quot; value&amp;quot;5445&amp;quot;/&amp;gt; &amp;lt;/connector&amp;gt; &amp;lt;/connectors&amp;gt;  Waarbij de bridge die gebouwd wordt verwijst naar een connector, hier dus connector-ref forward-to-hornetq-connector die op een andere server kan draaien (forwardToAddress) - maar dat kan evengoed localhost zijn.</description>
    </item>
    
  </channel>
</rss>