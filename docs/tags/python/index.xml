<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Brain Baking</title>
    <link>https://brainbaking.com/tags/python/</link>
    <description>Recent content in python on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Wed, 26 Mar 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://brainbaking.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bye autotools hello Scons</title>
      <link>https://brainbaking.com/post/scons-building/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/scons-building/</guid>
      <description>Remember this?
 ./configure make make install  That&amp;rsquo;s not so bad, as long as you have the right compiler and linker flags configured, depending on the target OS. The real problem, however, is trying to figure out how to alter something if you didn&amp;rsquo;t write the Makefile yourself. Or if you in fact did write it, but it was some time ago. Two days. No, four hours.
The problem Try to study the autoconf and automake flow diagram, explained on Wikipedia: the GNU build system.</description>
    </item>
    
    <item>
      <title>Python Class structure basics</title>
      <link>https://brainbaking.com/post/python-basics/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/python-basics/</guid>
      <description>Handy links:
 special class methods like _ getattr _ and _ new _ dive into python - native datatypes Inside story on new style classes - ter info: Python3 heeft enkel &amp;ldquo;newstyle&amp;rdquo; classes!  Method overriding Is niet mogelijk. Gebruik default values!
def func(i, j = 2, k 3): return i + j + k func(1) # 6 func(1, 1) # 5 func(1, 1, 1) # 3  Wat wel gaat, evt met decorators, zie Five-minute multimethods in Python - is __call__ implementeren en dan met metaprogrammeren te loopen over alle methods en te kijken of de argumenten overeen komen met het type dat required is.</description>
    </item>
    
  </channel>
</rss>