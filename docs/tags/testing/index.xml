<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/testing/index.xml</link>
    <description>Recent content in Testing on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <atom:link href="http://www.brainbaking.com/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>selenium</title>
      <link>http://www.brainbaking.com/wiki/code/java/testing/selenium/</link>
      <pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/java/testing/selenium/</guid>
      <description>

&lt;h1 id=&#34;selenium-scenario-testing&#34;&gt;Selenium Scenario Testing&lt;/h1&gt;

&lt;p&gt;Ter info: Webdriver = selenium 2.x.&lt;/p&gt;

&lt;h2 id=&#34;webdriver-samen-met-phantomjs&#34;&gt;Webdriver samen met PhantomJS&lt;/h2&gt;

&lt;h4 id=&#34;opzet&#34;&gt;opzet&lt;/h4&gt;

&lt;p&gt;Headless webdriver testen draaien gaat met &lt;code&gt;HTMLUnit&lt;/code&gt; - vanaf 2.x zit &lt;code&gt;org.openqa.selenium.htmlunit.HtmlUnitDriver&lt;/code&gt; ook in de jar. De JS die daar evaluated wordt is echter &lt;code&gt;Rhino&lt;/code&gt; JS en niet native browser stuff. We kunnen in de plaats &lt;a href=&#34;http://www.brainbaking.com/wiki/code/javascript/testing/phantomjs/&#34;&gt;code/javascript/testing/phantomjs&lt;/a&gt; gebruiken - deze driver zit in een andere jar. In de centrale maven repo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;selenium-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.32.0&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.github.detro.ghostdriver&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;phantomjsdriver&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.0.3&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/detro/ghostdriver&#34;&gt;ghostdriver&lt;/a&gt; is de ingebouwde koppeling tussen phantomjs en webdriver (selenium server). Dit zit ingebouwd in phantomjs als je deze uitvoert met &lt;code&gt;--webdriver=[port]&lt;/code&gt; - wat de service voor u doet.&lt;/p&gt;

&lt;h4 id=&#34;in-de-java-code&#34;&gt;In de java code&lt;/h4&gt;

&lt;p&gt;Onderstaande voorbeeldcode maakt het mogelijk om zowel met &lt;code&gt;chrome&lt;/code&gt; als met &lt;code&gt;phantomjs&lt;/code&gt; te werken:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public abstract class WebdriverTest extends IntegrationTest {

    private static ChromeDriverService service;
    private static WebDriver driver;

    static {
        Runtime.getRuntime().addShutdownHook(new Thread() {

            @Override
            public void run() {
                driver.quit();
                if (service != null) {
                    service.stop();
                }
            }
        });
    }

    private static void startService() {
        try {
            service = new ChromeDriverService.Builder()
                    .usingDriverExecutable(new File(properties().getChromeDriverExecutable()))
                    .usingAnyFreePort().build();
            service.start();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    @Before
    public void gaNaarStartpagina() {
        getDriver().get(vitrineUrl());
    }

    protected static WebDriver getDriver() {
        if (driver ###### null) {
            driver = startDriver();
            driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
        }
        return driver;
    }

    private static RemoteWebDriver startDriver() {
        if (properties().isChromeWebdriverNodig()) {
            startService();
            return new ChromeDriver(service);
        }
        return new PhantomJSDriver(phantomJSCapabilities());
    }

    private static DesiredCapabilities phantomJSCapabilities() {
        DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setJavascriptEnabled(true);
        capabilities.setCapability(&amp;quot;takesScreenshot&amp;quot;, false);
        capabilities.setCapability(PHANTOMJS_EXECUTABLE_PATH_PROPERTY, properties().getPhantomJSExecutable());
        capabilities.setCapability(PHANTOMJS_CLI_ARGS, new String[] { &amp;quot;--webdriver-loglevel=DEBUG&amp;quot; });
        return capabilities;
    }

    protected String toString(DateMidnight date) {
        return date.toString(&amp;quot;dd/MM/yyyy&amp;quot;);
    }

    protected ZoekPage startPagina() {
        return new ZoekPage(driver);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;essentiÃ«el is het gewoon &lt;code&gt;new PhantomJSDriver(new DesiredCapabilities())&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;############= Webdriver samen met IE ############=&lt;/p&gt;

&lt;p&gt;######= Opzet ######=&lt;/p&gt;

&lt;p&gt;Bij fouten als &amp;ldquo;Protected Mode must be set to the same value&amp;rdquo; (zie &lt;a href=&#34;https://code.google.com/p/selenium/issues/detail?id=1795&#34;&gt;hier&lt;/a&gt; heb je een specifieke switch nodig:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    private static DesiredCapabilities ieCapabilities() {
        DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
        return capabilities;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voor de rest is de setup gelijkaardig aan die van chrome - het maken van de service&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    private static void startIEService() {
        ieService = new InternetExplorerDriverService.Builder()
                .usingDriverExecutable(new File(properties().getIEDriverExecutable()))
                .usingAnyFreePort()
                .build();
        try {
            ieService.start();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En het maken van de driver via &lt;code&gt;return new InternetExplorerDriver(ieService, ieCapabilities());&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;############= Selenium IDE scenarios opnemen ############=&lt;/p&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://seleniumhq.org/projects/ide/&#34;&gt;Selenium IDE Plugin voor Firefox&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;######= identificatie van elementen ######=
Bij voorkeur dien je elke knop, link, invoerveld, enz&amp;hellip; een &amp;lsquo;id&amp;rsquo; te geven zodat Selenium dit object op id kan terugvinden.&lt;/p&gt;

&lt;p&gt;In een aantal gevallen is het niet mogelijk om het object op object id terug te vinden. Dit is bijvoorbeeld gegenereerde code van het metis framework. Hieronder een overzicht en welke oplossing best te nemen&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bvb op Login scherm: klikken op de knop &amp;lsquo;inloggen&amp;rsquo; genereert als target: img[contains(@src,&amp;lsquo;http:*localhost:8080/Hospes/static/images/form/buttons/key.png&amp;rsquo;)] =&amp;gt; hieruit de http:*localhost:8080 weghalen&lt;/li&gt;
&lt;li&gt;klikken op een menu item registreert vaak enkel het openen van het menu en niet het menu item zelf. Hiervoor kan je firebug nemen om het desbetreffende menu item te inspecten en manueel in de target de juiste target invullen (bvb menuItemText2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;######=click(AndWait)######=&lt;/p&gt;

&lt;p&gt;Bij het opnemen van scenario&amp;rsquo;s gaat Selenium bij elke klik op een link, button een &amp;lsquo;click&amp;rsquo; als command registreren. Indien deze click een pagina refresh genereert, moet je manueel het commando vervangen door clickAndWait. Indien je een dubbelklik deed, gaat Selenium IDE ook een click registreren. Deze moet je vervangen door een doubleClickAndWait.&lt;/p&gt;

&lt;p&gt;######=Assert / Verify ######=&lt;/p&gt;

&lt;p&gt;Wat is het verschil tussen assertX en verifyX?
assert stopt de test, verify gaat door.
Zie DOC: &lt;a href=&#34;http://seleniumhq.org/docs/04_selenese_commands.html#assertion-or-verification&#34;&gt;http://seleniumhq.org/docs/04_selenese_commands.html#assertion-or-verification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Selenium gaat niet automatisch asserts toevoegen. Je kan als het scenario opgenomen is, manueel asserts toevoegen. assertValue, assertTextPresent, assertEnabled, assertDisabled &amp;hellip; .
Een heel aantal asserts kan je door een snelle muisklik toevoegen.
* Tekst xxx selecteren in de pagina, rechtermuisknop verifyTextPresent xxx aanklikken voegt een commando toe om deze tekst te asserten.
* Een input field: aanklikken, en rechtermuisknop: verifyElementPresent.
* Rechtermuisknop eender waar: Show all available commands: toont alle mogelijke commando&amp;rsquo;s op huidige pagina&lt;/p&gt;

&lt;p&gt;######=assertEnabled vs assertEditable######=&lt;/p&gt;

&lt;p&gt;assertEnabled bestaat niet, je moet assertEditable gebruiken.&lt;/p&gt;

&lt;p&gt;######= goto(label) en looping ######=&lt;/p&gt;

&lt;p&gt;Kan met de &lt;a href=&#34;https://github.com/darrenderidder/sideflow&#34;&gt;sideflow&lt;/a&gt; Selenium IDE plugin voor firefox (custom js file, zie instructies daar)&lt;/p&gt;

&lt;p&gt;############= Troubleshooting ############=&lt;/p&gt;

&lt;h6 id=&#34;element-is-not-currently-visible-and-so-may-not-be-interacted-with&#34;&gt;element is not currently visible and so may not be interacted with&lt;/h6&gt;

&lt;p&gt;Enkele mogelijke problemen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scherm resolutie door element dat vanonder op de pagina zit maar nu van de pagina af valt&lt;/li&gt;
&lt;li&gt;Z-index: ander element hangt boven het huidig element en er kan niet mee geÃ¯nterageerd worden&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;############= Known Issues ############=&lt;/p&gt;

&lt;p&gt;######= Popup in IE verliest sessie ######=
zie ook: &lt;a href=&#34;http://jira.openqa.org/browse/SRC-501&#34;&gt;http://jira.openqa.org/browse/SRC-501&lt;/a&gt;
In onze seleniumtesten omzeild door elke test waarin waitForPopUp voor IE niet uit te voeren &amp;hellip;&lt;/p&gt;

&lt;p&gt;######= IE en onchange javascript problemen ######=
Elementen waar javascript achter hangt bij een onchange van een element, worden NIET gefired vanuit IE - wanneer men bij selenium een select commando uitvoert. Om de onclick en onchange eventen te laten triggeren moet men ervoor en erna een gewone click uitvoeren. Dus zo:&lt;/p&gt;

&lt;p&gt;click(element)
select(element, value)
click(element)&lt;/p&gt;

&lt;p&gt;######= IE en hidden elementen problemen ######=
Het is niet mogelijk om verifyTextNotPresent te gebruiken voor een hidden div met wat tekst. Daarvoor moet assertVisible en assertNotVisible gebruikt worden - let op dat de value nu geen tekst waarde maar een selector is zoals alle anderen.&lt;/p&gt;

&lt;p&gt;######= IE en verifyValue problemen die af en toe opduiken######=
Soms faalt een verifyValue, omdat de verwachte waarde ook Ã©cht niet in het verwachte inputveldje staat. Vermoedelijk heeft het iets te maken met de rendertijd van IE, en wanneer Selenium beslist van te verifyen.
Op te lossen door waitForTextPresent te gebruiken. Het &amp;ldquo;waitForValue&amp;rdquo;, noch &amp;ldquo;waitForElement&amp;rdquo; + &amp;ldquo;verifyValue&amp;rdquo; commands werken eveneens niet.&lt;/p&gt;

&lt;p&gt;######= click op een link werkt niet (link optesplitst in 2 lijnen) ######=&lt;/p&gt;

&lt;p&gt;Known issue, zie &lt;a href=&#34;http://code.google.com/p/selenium/issues/detail?id=1020&#34;&gt;http://code.google.com/p/selenium/issues/detail?id=1020&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Het probleem is dat selenium &lt;code&gt;boundingRect&lt;/code&gt; gebruikt en op het midden daarvan klikt, als een link opgesplitst is kan het zijn dat selenium nÃ©t niet op de link zelf maar bvb de cell klikt en er niets gebeurt.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>testing</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/testing/</link>
      <pubDate>Fri, 27 Jun 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/testing/</guid>
      <description>

&lt;h1 id=&#34;testing-met-c-net&#34;&gt;Testing met C#/.NET&lt;/h1&gt;

&lt;h2 id=&#34;test-frameworks&#34;&gt;Test frameworks&lt;/h2&gt;

&lt;h3 id=&#34;selenium-webdriver&#34;&gt;Selenium/WebDriver&lt;/h3&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://www.joecolantonio.com/2012/07/31/getting-started-using-selenium-2-0-webdriver-for-ie-in-visual-studio-c/&#34;&gt;http://www.joecolantonio.com/2012/07/31/getting-started-using-selenium-2-0-webdriver-for-ie-in-visual-studio-c/&lt;/a&gt; - essentiÃ«el identiek aan Java.&lt;/p&gt;

&lt;h4 id=&#34;chaining-fluent-acceptance-criteria-definitions&#34;&gt;Chaining - fluent acceptance criteria definitions&lt;/h4&gt;

&lt;p&gt;Een typische test zou er dan zo kunnen uitzien:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        [Test]
        public void OpenAdminAuthenticationManagement()
        {
            LogInto()
                .OpenAdministrationAuthenticationManagement()
                .AuthenticationGrid
                .ShouldContainMinAmountRows(1)
                .DoubleClickOnRowNr(0)
                .ExpectOpened&amp;lt;ModifyUserDetailWindow&amp;gt;()
                .UserNameShouldContainSomeValue();
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Gebruik overal &lt;code&gt;return this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Wanneer je niet wil upcasten en in een abstract component &lt;code&gt;ClickSave()&lt;/code&gt; uw subtype moet retourneren: &lt;code&gt;public class Panel&amp;lt;T&amp;gt; : Window where T : Panel&amp;lt;T&amp;gt;&lt;/code&gt; en &lt;code&gt;return (T) this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Wanneer je niet weet wat het volgend scherm is, gebruik &lt;code&gt;ExpectOpened&amp;lt;Type&amp;gt;()&lt;/code&gt; dat via &lt;a href=&#34;http://www.brainbaking.com/wiki/code/csharp/reflectie/&#34;&gt;code/csharp/reflectie&lt;/a&gt; een instantie aanmaakt van uw component.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;nunit&#34;&gt;NUnit&lt;/h3&gt;

&lt;h4 id=&#34;attributes&#34;&gt;Attributes&lt;/h4&gt;

&lt;p&gt;Zoals in JUnit&amp;rsquo;s annotaties &lt;code&gt;@Before&lt;/code&gt; en &lt;code&gt;@Test&lt;/code&gt; kan je hier &lt;code&gt;[SetUp]&lt;/code&gt; en &lt;code&gt;[Test]&lt;/code&gt; gebruiken. Een test klasse moet met de attribute &lt;code&gt;[TestFixture]&lt;/code&gt; geplakt worden.&lt;/p&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://blogs.msdn.com/b/nnaderi/archive/2007/02/01/mstest-vs-nunit-frameworks.aspx&#34;&gt;MSTest en NUnit comparison&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hoe kan ik dit via command-line uitvoeren?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Installeer &lt;a href=&#34;http://nunit.org/?p=download&#34;&gt;NUnit&lt;/a&gt; en pas uw &lt;code&gt;PATH&lt;/code&gt; aan zodat de install dir er in steekt (program files&lt;br/&gt;nunit). Vanaf dan kan je &lt;code&gt;nunit-console test.dll&lt;/code&gt; via commandline gebruiken om de test zo uit te voeren.&lt;/p&gt;

&lt;h3 id=&#34;mstest&#34;&gt;MSTest&lt;/h3&gt;

&lt;h4 id=&#34;attributes-1&#34;&gt;Attributes&lt;/h4&gt;

&lt;p&gt;Zoals in JUnit&amp;rsquo;s annotaties &lt;code&gt;@Before&lt;/code&gt; en &lt;code&gt;@Test&lt;/code&gt; kan je hier &lt;code&gt;[TestInitialize]&lt;/code&gt; en &lt;code&gt;[TestMethod]&lt;/code&gt; gebruiken. Er zijn enkele &amp;ldquo;pitfalls&amp;rdquo; -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[ClassInitialize]&lt;/code&gt;, zogezegd het equivalent van &lt;code&gt;@BeforeClass&lt;/code&gt;, werkt &lt;strong&gt;niet&lt;/strong&gt; op base classes: zie &lt;a href=&#34;http://blogs.msdn.com/b/densto/archive/2008/05/16/using-a-base-class-for-your-unit-test-classes.aspx&#34;&gt;http://blogs.msdn.com/b/densto/archive/2008/05/16/using-a-base-class-for-your-unit-test-classes.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Een mogelijke &amp;ldquo;oplossing&amp;rdquo; is dit: (let op, niet helemaal hetzelfde)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[TestClass]
public abstract class TestBase
{
    [AssemblyInitializeAttribute]
    public static void Initialize(TestContext context)
    {
        // put your initialize code here
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of overal de base aanroepen&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;mocking-en-stubbing&#34;&gt;Mocking en stubbing&lt;/h2&gt;

&lt;h3 id=&#34;microsoft-fakes&#34;&gt;Microsoft Fakes&lt;/h3&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://msdn.microsoft.com/en-US/library/hh549175&#34;&gt;http://msdn.microsoft.com/en-US/library/hh549175&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Als je &lt;code&gt;Fakes&lt;/code&gt; toevoegt als reference, gebeurt er het volgende (enkel voor interfaces):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The special piece of magic here is the class StubIStockFeed. For every interface in the referenced assembly, the Microsoft Fakes mechanism generates a stub class. The name of the stub class is the derived from the name of the interface, with &amp;ldquo;Fakes.Stub&amp;rdquo; as a prefix, and the parameter type names appended.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;rhino-mocks&#34;&gt;Rhino Mocks&lt;/h3&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://www.hibernatingrhinos.com/oss/rhino-mocks&#34;&gt;http://www.hibernatingrhinos.com/oss/rhino-mocks&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;automatisch-mocking-fields-initializeren&#34;&gt;Automatisch mocking fields initializeren&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public abstract class AbstractTestCase
    {
        [TestInitialize]
        public void CreateMocksBasedOnNamingConvention()
        {
            this.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Instance).Where(x =&amp;gt; x.Name.EndsWith(&amp;quot;Mock&amp;quot;)).All(InitMock);
        }

        private bool InitMock(FieldInfo field)
        {
            field.SetValue(this, MockRepository.GenerateMock(field.FieldType, new Type[]{}));
            return true;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hupla.&lt;/p&gt;

&lt;h2 id=&#34;resources-en-deployment&#34;&gt;Resources en deployment&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms182475.aspx&#34;&gt;How to deploy files for tests&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Er moeten aan een aantal condities voldaan worden:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;een mstest &lt;code&gt;.testsettings&lt;/code&gt; XML file waar de tag &lt;code&gt;&amp;lt;DeploymentEnabled/&amp;gt;&lt;/code&gt; op &lt;code&gt;true&lt;/code&gt; staat (extra te deployen files zijn daar kinderen van) - dit kan automatisch geÃ«dit worden met VS2010 maar blijkbaar niet meer met VS2012&amp;hellip; Als de tag zelf niet voorkomt werkt het in 2012 ook nog (?)&lt;/li&gt;
&lt;li&gt;een resource hebben die op &lt;code&gt;Content&lt;/code&gt; en &lt;code&gt;Copy&lt;/code&gt; staat&lt;/li&gt;
&lt;li&gt;Een &lt;code&gt;DeploymentItem&lt;/code&gt; attribute hebben die de te kopiÃ«ren file specifiÃ«ert (merk op dat subfolders hier ook ingevuld moeten zijn)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    [TestClass]
    [DeploymentItem(&amp;quot;IEDriverServer.exe&amp;quot;)]
    public abstract class EndToEndTestCase
    {
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De deployment items zijn niet nodig als de testen uitgevoerd worden vanuit de bin folder. Meestal is dit een aparte MSTest locatie (temp zoals &lt;code&gt;C:&amp;lt;br/&amp;gt;Users&amp;lt;br/&amp;gt;bkwog&amp;lt;br/&amp;gt;AppData&amp;lt;br/&amp;gt;Local&amp;lt;br/&amp;gt;Temp&amp;lt;br/&amp;gt;TestResults&amp;lt;br/&amp;gt;bkwog_HI18261 2013-12-23 10_28_54&lt;/code&gt;) waar dan resources niet bij steken maar enkel DLLs en PDBs - bijgevolg problemen&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>gtest</title>
      <link>http://www.brainbaking.com/wiki/code/c/testing/gtest/</link>
      <pubDate>Wed, 26 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/testing/gtest/</guid>
      <description>

&lt;h1 id=&#34;google-test&#34;&gt;Google Test&lt;/h1&gt;

&lt;p&gt;Downloaden op &lt;a href=&#34;https://code.google.com/p/googletest/downloads/list&#34;&gt;https://code.google.com/p/googletest/downloads/list&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Waarom&lt;/strong&gt;?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Platform onafhankelijk&lt;/li&gt;
&lt;li&gt;Snelheid&lt;/li&gt;
&lt;li&gt;Geen gezeik met Managed C++, compatibel met &amp;ldquo;eender wat&amp;rdquo; (enige vereiste: &lt;code&gt;cc&lt;/code&gt; compiler variant)&lt;/li&gt;
&lt;li&gt;Wordt veel gebruikt (Chromium, Stack overflow)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Waarom niet&lt;/strong&gt;?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;slechte of geen integratie met VStudio (zie onder)&lt;/li&gt;
&lt;li&gt;wÃ©Ã©r een andere syntax dan MS .NET testen&lt;/li&gt;
&lt;li&gt;beetje awkward assertions&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;assertions-schrijven&#34;&gt;Assertions schrijven&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;quot;../BaseCode/BaseCode.h&amp;quot;

#include &amp;quot;gtest/gtest.h&amp;quot;

TEST(MyTestCase, MyTest_Success)
{
    EXPECT_EQ(2, MySum(1, 1));
}

TEST(MyTestCase, MyTest_Failure)
{
    EXPECT_EQ(3, MySum(1, 2));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Waarbij dan &lt;code&gt;BaseCode&lt;/code&gt; uw system under test zaken bevat (waar &lt;code&gt;MySum&lt;/code&gt; defined is)&lt;/p&gt;

&lt;h4 id=&#34;builden-met-scons-en-g&#34;&gt;Builden met scons en g++&lt;/h4&gt;

&lt;p&gt;Tested in Cygwin Win7 &amp;amp; OSX 10.9&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Import(&#39;env&#39;)
env ###### env.Clone(CPPPATH  &#39;./:./include&#39;)

env.Append(CXXFLAGS = [&#39;-g&#39;, &#39;-Wall&#39;, &#39;-Wextra&#39;, &#39;-pthread&#39;])
gtest ###### env.Library(target  &#39;gtest&#39;, source = [&#39;src/gtest-all.cc&#39;, &#39;src/gtest_main.cc&#39;])

Return(&#39;gtest&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://www.brainbaking.com/wiki/code/build/scons/&#34;&gt;code/build/scons&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;builden-met-visual-studio&#34;&gt;Builden met Visual Studio&lt;/h4&gt;

&lt;p&gt;&lt;img style=&#39;float: left;&#39; src=&#39;http://www.brainbaking.com/img//code/c/testing/screenshot.png|&#39;&gt;&lt;/p&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://leefrancis.org/2010/11/17/google-test-gtest-setup-with-microsoft-visual-studio-2008-c/&#34;&gt;http://leefrancis.org/2010/11/17/google-test-gtest-setup-with-microsoft-visual-studio-2008-c/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Er zijn 2 &lt;code&gt;.sln&lt;/code&gt; files voorzien in de msvc subdir bij de zipfile, Ã©Ã©n voor statische links en Ã©Ã©n voor dynamische. Afhankelijk van uw project (.DLL of .LIB gegenereerde uitkomst), ga je Ã©Ã©n van beiden moeten compileren. Als je van plan bent om &lt;code&gt;/MDd&lt;/code&gt; te gebruiken (dll + debugging), gebruik dan &lt;code&gt;gtest-md.sln&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Daarna kan je een nieuwe solution maken, package naar executable om de test zelf te runnen (om gtest testen te draaien). Verander deze dingen in het project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;General &amp;gt; Configuration type  = Application (.EXE)&lt;/li&gt;
&lt;li&gt;C/C++ &amp;gt; General &amp;gt; Additional Include dirs naar gtest/include verwijzen&lt;/li&gt;
&lt;li&gt;C/C++ &amp;gt; Preprocessor &amp;gt; definitions toevoegen &lt;code&gt;_VARIADIC_MAX=10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Code generation &amp;gt; Runtime library op &lt;code&gt;/MDd&lt;/code&gt; of &lt;code&gt;/MTd&lt;/code&gt; juist zetten (zie boven)&lt;/li&gt;
&lt;li&gt;Linker &amp;gt; Additional Library directories &amp;gt; gtest/Debug (staan reeds binaries indien compiled)&lt;/li&gt;
&lt;li&gt;Linker &amp;gt; Input &amp;gt; Additional dependencies = gtestd.lib;gtest_maind.lib;(rest)&lt;/li&gt;
&lt;li&gt;Linker &amp;gt; System &amp;gt; SubSystem Console &lt;code&gt;/SYBSYSTEM:CONSOLE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Linker &amp;gt; Input &amp;gt; Module Definition file leeg (indien van DLL naar EXE veranderd kan hier wat brol in zitten)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;visual-studio-2012-en-std-problemen&#34;&gt;Visual Studio 2012 en STD problemen&lt;/h4&gt;

&lt;p&gt;Fouten als&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1&amp;gt;a:&amp;lt;br/&amp;gt;gtest&amp;lt;br/&amp;gt;include&amp;lt;br/&amp;gt;gtest&amp;lt;br/&amp;gt;gtest-printers.h(550): error C2977: &#39;std::tuple&#39; : too many template arguments
1&amp;gt;          b:&amp;lt;br/&amp;gt;program files (x86)&amp;lt;br/&amp;gt;microsoft visual studio 2012&amp;lt;br/&amp;gt;vc&amp;lt;br/&amp;gt;include&amp;lt;br/&amp;gt;utility(73) : see declaration of &#39;std::tuple&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Op te lossen met een preprocessor macro _VARIADIC_MAX=10, zie &lt;a href=&#34;http://stackoverflow.com/questions/12558327/google-test-in-visual-studio-2012&#34;&gt;http://stackoverflow.com/questions/12558327/google-test-in-visual-studio-2012&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;integratie-met-visual-studio-2008-2010&#34;&gt;Integratie met Visual Studio &lt;sup&gt;2008&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2010&lt;/sub&gt;&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://googletestaddin.codeplex.com/documentation&#34;&gt;GoogleTestAddin&lt;/a&gt; (kopieer 2 files naar C:&lt;br/&gt;Users&lt;br/&gt;bkwog&lt;br/&gt;Documents&lt;br/&gt;Visual Studio 2008&lt;br/&gt;Addins, map misschien nog aanmaken)&lt;/p&gt;

&lt;p&gt;Niet super nuttig, een knopje om testen snel te herdraaien (of Ã©Ã©n die geselecteerd is), beter dan post-build actie zie boven&amp;hellip;&lt;/p&gt;

&lt;h4 id=&#34;integratie-met-visual-studio-2012&#34;&gt;Integratie met Visual Studio 2012&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://visualstudiogallery.msdn.microsoft.com/f00c0f72-ac71-4c80-bf8b-6fe381548031&#34;&gt;Google Test Adapter&lt;/a&gt; plugin (1.1 - geen actieve development?)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>testing</title>
      <link>http://www.brainbaking.com/wiki/code/ruby/testing/</link>
      <pubDate>Tue, 18 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/ruby/testing/</guid>
      <description>

&lt;h1 id=&#34;testing&#34;&gt;Testing&lt;/h1&gt;

&lt;p&gt;gebruik &lt;code&gt;autotest&lt;/code&gt;!&lt;/p&gt;

&lt;h3 id=&#34;quick-references&#34;&gt;Quick references&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mattsears.com/articles/2011/12/10/minitest-quick-reference&#34;&gt;MiniTest quick reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>testing</title>
      <link>http://www.brainbaking.com/wiki/code/python/testing/</link>
      <pubDate>Wed, 05 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/python/testing/</guid>
      <description>

&lt;h1 id=&#34;python-unit-testing&#34;&gt;Python Unit Testing&lt;/h1&gt;

&lt;h2 id=&#34;unittest-module&#34;&gt;unittest module&lt;/h2&gt;

&lt;p&gt;Spreekt voor zich:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import unittest
from calculator import Calculator

class TestCalculator(unittest.TestCase):

    def setUp(self):
        self.calc = Calculator().calculate;

    def test_calculateBasicNumberReturnsNumber(self):
        self.assertEqual(3, self.calc(&#39;3&#39;))

    def test_calculateSimpleMultiplicationReturnsResult(self):
        self.assertEqual(10, self.calc(&#39;5*2&#39;))

    def test_calculateInvalidStringShouldThrowException(self):
        self.assertRaises(ValueError, self.calc, (&#39;blabl&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://docs.python.org/3/library/unittest.html&#34;&gt;http://docs.python.org/3/library/unittest.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setUp&lt;/code&gt; wordt automatisch aangeroepen. Beforeclass, aftereach etc etc bestaat ook.&lt;/li&gt;
&lt;li&gt;alle methods met &lt;code&gt;test_&lt;/code&gt; worden automatisch herkend.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;hoe-voer-ik-dit-nu-uit&#34;&gt;Hoe voer ik dit nu uit?&lt;/h4&gt;

&lt;p&gt;Dit stuk onder uw py file plakken:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;if __name__ ###### &#39;__main__&#39;:
    unittest.main()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En dan &lt;code&gt;python -m unittest -v calculatorTest&lt;/code&gt;. de v flag geeft wat extra output, anders staat er gewoon OK. De test op zich builden in bijvoorbeeld sublime met de main method erin zorgt er ook voor dat deze automatisch uitgevoerd wordt.&lt;/p&gt;

&lt;p&gt;######= automatic test case discovery ######=&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python -m unittest discover&lt;/code&gt; gaat alle unit testen vanaf huidig dir scannen en uitvoeren (instelbaar met params). Moet voldoen aan:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;extenden van &lt;code&gt;unittest.TestCase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;voldoen aan python module structuur. Testen in files met prefix &amp;ldquo;test_x.py&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Indien in subfolder &amp;ldquo;test&amp;rdquo;: vergeet geen &amp;ldquo;&lt;strong&gt;init&lt;/strong&gt;.py&amp;rdquo; file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;############= autotest ############=&lt;/p&gt;

&lt;p&gt;Mogelijk met onder andere &lt;code&gt;autonose&lt;/code&gt; (nose is een alternatief voor unittest) en &lt;code&gt;sniffer&lt;/code&gt;. Om die te installeren moet je via de &lt;a href=&#34;http://www.brainbaking.com/wiki/code/python/packages/&#34;&gt;pip package manager&lt;/a&gt; gaan, en dan gewoon sniffer uitvoeren in uw base directory.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>testexplorer</title>
      <link>http://www.brainbaking.com/wiki/code/c/testing/testexplorer/</link>
      <pubDate>Thu, 05 Sep 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/testing/testexplorer/</guid>
      <description>

&lt;h1 id=&#34;visual-studio-2012-test-explorer-framework&#34;&gt;Visual Studio 2012 Test Explorer framework&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Waarom&lt;/strong&gt;?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Integratie VStudio, zelfde manier om te &amp;ldquo;runnen&amp;rdquo; als C# testen&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unmanaged&lt;/strong&gt; (native) C++ code testen zonder vettige &lt;code&gt;/cli&lt;/code&gt; mode die nodig is.&lt;/li&gt;
&lt;li&gt;Voor mixed team C#/C++ misschien beter/makkelijker?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Waarom niet&lt;/strong&gt;?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Weeral iets anders, Team Test buiten? Wat gaat het zijn voor VS3013?&lt;/li&gt;
&lt;li&gt;Niet 100% dezelfde syntax als C# (toch al closer, maar bvb geen attributes etc)&lt;/li&gt;
&lt;li&gt;VS2012 only momentel, dus 2008 = kinkloppen&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Voorbeeld project in VS2012: &lt;img style=&#39;&#39; src=&#39;http://www.brainbaking.com/img//code/c/testing/math_testexplorer_vs2012.zip|&#39;&gt;&lt;/p&gt;

&lt;h4 id=&#34;assertions-schrijven&#34;&gt;Assertions schrijven&lt;/h4&gt;

&lt;p&gt;Gebruik namespace &lt;code&gt;CppUnitTestFramework&lt;/code&gt; - voorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#pragma once
#include &amp;quot;stdafx.h&amp;quot;
#include &amp;quot;CppUnitTest.h&amp;quot;
#include &amp;quot;PlusStub.cpp&amp;quot;
#include &amp;quot;../Math/Plus.h&amp;quot;
#include &amp;quot;../Math/Calculator.h&amp;quot;

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace calc
{
    TEST_CLASS(CalculatorTest)
    {
    private:
        int nStartValue;
        Calculator* calc;

        void CreateCalcSUT()
        {
            calc = new Calculator(nStartValue);
        }

    public:
        /*testcase template:
        TEST_METHOD(Classname_Functionname_SpecialParams_ExpectedResult)
        {
        param specialParam = specialvalue;
        ...
        param expectation = whatYouExpect;
        ...
        (SUT creation)
        (call methods)
        ...
        assert(s)
        }*/


        TEST_METHOD_INITIALIZE(InitialiseDefaults)
        {
            calc = NULL;
            nStartValue = 5;
        }

        TEST_METHOD_CLEANUP(CleanupObjects)
        {
            delete calc;
        }

        TEST_METHOD(Calculator_Constructor_NoArgument_GetValueZero)
        {
            int nExpectedValue = 0;
            calc = new Calculator();
            Assert::AreEqual(nExpectedValue, calc-&amp;gt;GetValue());
        }

        TEST_METHOD(Calculator_Constructor_Five_GetValueFive)
        {
            nStartValue = 5;
            int nExpectedValue = 5;
            CreateCalcSUT();
            Assert::AreEqual(nExpectedValue, calc-&amp;gt;GetValue());
        }

    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img style=&#39;&#39; src=&#39;http://www.brainbaking.com/img//code/c/testing/cppunittesting.png|&#39;&gt;&lt;/p&gt;

&lt;p&gt;Zelfde manier om assertions te schrijven.
â dit test project heeft GEEN &lt;code&gt;/clr&lt;/code&gt; flag, dus is ook &lt;strong&gt;unmanaged&lt;/strong&gt;, dat is het voordeel.&lt;/p&gt;

&lt;p&gt;Zoals gezien op screencap is dit volledig geÃ¯ntegreerd met VStudio 2012.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/hh270864.aspx&#34;&gt;Meer informatie over het nieuwe cpp testing framework &amp;lsquo;Test Explorer&amp;rsquo;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>home</title>
      <link>http://www.brainbaking.com/wiki/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/</guid>
      <description>

&lt;h1 id=&#34;code-c-testing-home&#34;&gt;code:c:testing &amp;gt;&amp;gt; Home&lt;/h1&gt;

&lt;h2 id=&#34;inhoudsopgave&#34;&gt;Inhoudsopgave&lt;/h2&gt;

&lt;p&gt;&lt;img style=&#39;&#39; src=&#39;http://www.brainbaking.com/img/indexmenu&gt;.|js navbar nocookie&amp;rsquo;&amp;gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>teamtest</title>
      <link>http://www.brainbaking.com/wiki/code/c/testing/teamtest/</link>
      <pubDate>Wed, 17 Jul 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/c/testing/teamtest/</guid>
      <description>

&lt;h1 id=&#34;visual-studio-2005-teamtest-framework&#34;&gt;Visual Studio 2005 TeamTest Framework&lt;/h1&gt;

&lt;p&gt;Hoofdartikel (2005, C# voorbeelden): &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms379625(v=vs.80).aspx&#34;&gt;http://msdn.microsoft.com/en-us/library/ms379625(v=vs.80).aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Waarom&lt;/strong&gt;?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Zelfde syntax als built-in C# unit tests voor Visual Studio&lt;/li&gt;
&lt;li&gt;Makkelijker te lezen dan bvb &lt;a href=&#34;http://www.brainbaking.com/wiki/code/c/testing/gtest/&#34;&gt;code/c/testing/gtest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Garbage collector van Managed C++, joepie (?)&lt;/li&gt;
&lt;li&gt;Toch mogelijk om unmanaged native C++ te testen (zie onder), integratie VStudio.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Waarom niet&lt;/strong&gt;?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dropped support voor VS2012? zie &lt;a href=&#34;http://www.brainbaking.com/wiki/code/c/testing/testexplorer/&#34;&gt;code/c/testing/testexplorer&lt;/a&gt; in de plaats (native C++)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/cli&lt;/code&gt; flag miserie (zie onder)&lt;/li&gt;
&lt;li&gt;Onduidelijke syntax voor hardcore C++ users die niet aan C# gewend zijn&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;visual-studio-2008&#34;&gt;Visual Studio 2008&lt;/h2&gt;

&lt;p&gt;Hiervoor moeten we een apart test project aanmaken dat met &lt;strong&gt;/CLR&lt;/strong&gt; flag compileert om de .NET test suites te gebruiken (&lt;code&gt;using namespace   Microsoft::VisualStudio::TestTools::UnitTesting;&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;Project &amp;gt; configuration properties &amp;gt; General &amp;gt; Common Language Runtime support&lt;/p&gt;

&lt;p&gt;&lt;img style=&#39;float: left;&#39; src=&#39;http://www.brainbaking.com/img//code/c/testing/clr_unittests.png |&#39;&gt;&lt;/p&gt;

&lt;p&gt;Dit staat op &lt;code&gt;/clr:safe&lt;/code&gt; indien je met VStudio 2008 een nieuwe test aan maakt via menu Test &amp;gt; New Test &amp;gt; Unit Test&lt;/p&gt;

&lt;p&gt;Een voorbeeld header file om te testen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;class MyClass {
public:
    MyClass() {};

    int addUp(int one, int two);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;quot;myclass.h&amp;quot;
#include &amp;lt;iostream&amp;gt;
using namespace std;

int MyClass::addUp(int one, int two)
{
    return one + two;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;managed-test-code-schrijven&#34;&gt;Managed test code schrijven&lt;/h4&gt;

&lt;p&gt;Gebruik dezelfde manier als .NET Unit Testing framework met attributes - dit vereist dus de CLR flag. Voorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;quot;stdafx.h&amp;quot;
#include &amp;quot;../libtest/myclass.h&amp;quot;

using namespace System;
using namespace System::Text;
using namespace System::Collections::Generic;
using namespace Microsoft::VisualStudio::TestTools::UnitTesting;

namespace unittests
{
    [TestClass]
    public ref class MyClassTest
    {

    public: 

        [TestMethod]
        void AddOne()
        {
            Assert::AreEqual(3, MyClass().addUp(1, 2));
        };
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Assert&lt;/strong&gt; heeft een hoop static methods&lt;/p&gt;

&lt;h4 id=&#34;een-externe-klasse-testen-die-van-een-lib-komt&#34;&gt;een externe klasse testen die van een lib komt&lt;/h4&gt;

&lt;p&gt;Als je vanuit je test project wil refereren naar productie code/projecten, kan dit een probleem zijn:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MyClassTest.obj : error LNK2028: unresolved token (0A00000A) &amp;quot;public: __thiscall MyClass::MyClass(void)&amp;quot; (??0MyClass@@$$FQAE@XZ) referenced in function &amp;quot;public: void __clrcall unittests::MyClassTest::AddOne(void)&amp;quot; (?AddOne@MyClassTest@unittests@@$$FQ$AAMXXZ)
MyClassTest.obj : error LNK2028: unresolved token (0A00000B) &amp;quot;public: int __thiscall MyClass::addUp(int,int)&amp;quot; (?addUp@MyClass@@$$FQAEHHH@Z) referenced in function &amp;quot;public: void __clrcall unittests::MyClassTest::AddOne(void)&amp;quot; (?AddOne@MyClassTest@unittests@@$$FQ$AAMXXZ)
MyClassTest.obj : error LNK2019: unresolved external symbol &amp;quot;public: int __thiscall MyClass::addUp(int,int)&amp;quot; (?addUp@MyClass@@$$FQAEHHH@Z) referenced in function &amp;quot;public: void __clrcall unittests::MyClassTest::AddOne(void)&amp;quot; (?AddOne@MyClassTest@unittests@@$$FQ$AAMXXZ)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dat wil zeggen, het compileert, maat het linkt niet. Oplossing: Voeg dit toe aan uw &lt;code&gt;stdafx.cpp&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#pragma comment(lib, &amp;quot;../Debug/libtest.lib&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;gegeven dat &amp;ldquo;libtest&amp;rdquo; uw project under test is. Vanaf dan kan je normaal header files includen in uw test cpp file, zie boven.&lt;/p&gt;

&lt;h4 id=&#34;een-externe-klasse-testen-die-van-een-dll-komt&#34;&gt;een externe klasse testen die van een DLL komt&lt;/h4&gt;

&lt;p&gt;Er wordt pas een &lt;code&gt;.lib&lt;/code&gt; file gegenereerd wanneer je &lt;code&gt;declspec(dllexport)&lt;/code&gt; definiÃ«ert - wanneer niets exported is, kan er ook niets imported worden&amp;hellip; Dus &lt;code&gt;myClass&lt;/code&gt; aanpassen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;
#ifdef FRIENDCLASS_EXPORT
    #define FRIENDCLASS __declspec(dllexport)
#else
    #define FRIENDCLASS __declspec(dllimport)
#endif

class FRIENDCLASS MyClass {
public:
    MyClass();

    int addUp(int one, int two);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En dan het libtest project compileren met de extra preprocessor definitie &lt;code&gt;FRIENDCLASS_EXPORT&lt;/code&gt; zodat in commandline &lt;code&gt;/D &amp;quot;FRIENDCLASS_EXPORT&amp;quot;&lt;/code&gt; erbij komt. Zie ook &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/hhzbb5c8(v=vs.80).aspx&#34;&gt;MSDN Preprocessor definitions&lt;/a&gt;, nu kunnen we hierop checken in de code met &lt;code&gt;#ifdef&lt;/code&gt;. Bovenstaande code doet een export wanneer gedefiniÃ«erd, en een import anders - dit gebeurt wanneer we de header file includen vanuit onze test cpp file.&lt;/p&gt;

&lt;h4 id=&#34;debugging&#34;&gt;Debugging&lt;/h4&gt;

&lt;p&gt;â &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/958x11bc(v=vs.80).aspx&#34;&gt;Debug information format flags&lt;/a&gt;: &lt;code&gt;/ZI&lt;/code&gt; (&amp;ldquo;Edit and Continue feature&amp;rdquo;, retry drukken bij assertion failure) is &lt;strong&gt;niet&lt;/strong&gt; ondersteund in combinatie met &lt;code&gt;/cli&lt;/code&gt;. Debuggen gaat wel op &lt;code&gt;/Zi&lt;/code&gt; niveau.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>angular</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/testing/angular/</link>
      <pubDate>Wed, 05 Jun 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/testing/angular/</guid>
      <description>

&lt;h1 id=&#34;angularjs-testing&#34;&gt;AngularJS testing&lt;/h1&gt;

&lt;p&gt;Voorbeeld voor angular app met mocks en testing en al: &lt;a href=&#34;https://github.com/angular/angular-seed&#34;&gt;angular-seed&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;mocking-en-zo&#34;&gt;Mocking en zo&lt;/h3&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://docs.angularjs.org/api/angular.mock.module&#34;&gt;angular.mock.module&lt;/a&gt; - twee hoofdfuncties die belangrijk zijn: &lt;code&gt;module()&lt;/code&gt; en &lt;code&gt;inject()&lt;/code&gt;. Het eerste maakt de module aan en het tweede zorgt voor de mock dependency injectie. Bijvoorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;angular
    .module(&#39;bla.services&#39;, [])
    
    .factory(&#39;$bla&#39;, [&#39;$http&#39;, function($http) {
            // do stuff with $http, like a .get
            return { go: function() {} }
        }])
;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je kan dus met &lt;code&gt;$bla.go()&lt;/code&gt; een http call uitvoeren waarbij &lt;code&gt;$bla&lt;/code&gt; een geÃ¯njecteerde variabele kan zijn in een Angular controller. Je kan met &lt;a href=&#34;http://docs.angularjs.org/api/ngMock.$httpBackend&#34;&gt;$httpBackend&lt;/a&gt; een &lt;code&gt;$http&lt;/code&gt; mock injecteren:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;describe(&amp;quot;bla service test&amp;quot;, function() {
  var $http, $inject;
  beforeEach(module(&#39;bla.services&#39;));
  beforeEach(inject(function($injector) {
    $inject = $injector;
    $http = $injector.get(&#39;$httpBackend&#39;);
    $http.when(&#39;GET&#39;, &#39;rest/bla&#39;).respond({ &#39;obj&#39;: 1 });
  });
  
  it(&amp;quot;should test stuff&amp;quot;, function() {
    var $bla = $inject.get(&#39;$bla&#39;); // at this moment, service function evaluates
    expect($bla.go().obj).toEqual(1);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;eigen-mocks-in-het-dependency-systeem-van-angularjs-steken&#34;&gt;eigen mocks in het dependency systeem van angularjs steken&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var myMock;
beforeEach(function() {
  myMock = function() { return { toMock: function() {} } };
  module(&#39;app.services&#39;, function($provide) {
    $provide.value(&#39;myMock&#39;, myMock);
  });
  
  // if you want, you can now use inject() to for instance mock $http
  it(&amp;quot;should bla&amp;quot;, inject(function($injector) {
    var App = $inject.get(&#39;App&#39;);
    // expect(); in here
  }));
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>karma</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/testing/karma/</link>
      <pubDate>Fri, 17 May 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/testing/karma/</guid>
      <description>

&lt;h1 id=&#34;karma-testacular&#34;&gt;Karma (Testacular)&lt;/h1&gt;

&lt;p&gt;Ook integratie met &lt;a href=&#34;http://www.brainbaking.com/wiki/code/javascript/testing/phantomjs/&#34;&gt;code/javascript/testing/phantomjs&lt;/a&gt; mogelijk.&lt;/p&gt;

&lt;h3 id=&#34;installatie&#34;&gt;Installatie&lt;/h3&gt;

&lt;p&gt;Om de Karma testen gedraaid te krijgen moet Node geÃ¯nstalleerd zijn samen met karma (&lt;code&gt;npm install karma -g&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Voor de &lt;strong&gt;ANSI console&lt;/strong&gt; in eclipse: &lt;a href=&#34;http://www.mihai-nita.net/eclipse/&#34;&gt;http://www.mihai-nita.net/eclipse/&lt;/a&gt; installeren&lt;/p&gt;

&lt;p&gt;Voor de Karma Phantom launcher in eclipse: dit importeren (launch file)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version######&amp;quot;1.0&amp;quot; encoding&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;
&amp;lt;launchConfiguration type=&amp;quot;org.eclipse.ui.externaltools.ProgramLaunchConfigurationType&amp;quot;&amp;gt;
&amp;lt;listAttribute key=&amp;quot;org.eclipse.debug.ui.favoriteGroups&amp;quot;&amp;gt;
&amp;lt;listEntry value=&amp;quot;org.eclipse.ui.externaltools.launchGroup&amp;quot;/&amp;gt;
&amp;lt;/listAttribute&amp;gt;
&amp;lt;stringAttribute key######&amp;quot;org.eclipse.ui.externaltools.ATTR_LOCATION&amp;quot; value&amp;quot;${workspace_loc:/vitrine/src/test/javascript/test.bat}&amp;quot;/&amp;gt;
&amp;lt;stringAttribute key######&amp;quot;org.eclipse.ui.externaltools.ATTR_WORKING_DIRECTORY&amp;quot; value&amp;quot;${workspace_loc:/vitrine/src/test/javascript}&amp;quot;/&amp;gt;
&amp;lt;/launchConfiguration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Debuggen met eclipse gaat blijkbaar niet, daarvoor moet je best &lt;a href=&#34;http://www.jetbrains.com/webstorm/&#34;&gt;http://www.jetbrains.com/webstorm/&lt;/a&gt; gebruiken. Wat ik nog heb bijgeleerd van jasmine: een individuele test tijdelijk draaien die je door &lt;code&gt;iit()&lt;/code&gt; te gebruiken ipv &lt;code&gt;it()&lt;/code&gt; (twee i&amp;rsquo;s).&lt;/p&gt;

&lt;p&gt;Referentiemateriaal:&lt;/p&gt;

&lt;p&gt;Angular &amp;amp; service mocking:
  1. &lt;a href=&#34;http://docs.angularjs.org/guide/dev_guide.services.testing_services&#34;&gt;http://docs.angularjs.org/guide/dev_guide.services.testing_services&lt;/a&gt;
  2. &lt;a href=&#34;http://docs.angularjs.org/api/ngMock.$httpBackend&#34;&gt;http://docs.angularjs.org/api/ngMock.$httpBackend&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jasmine
  1. &lt;a href=&#34;https://github.com/pivotal/jasmine/wiki/Spies&#34;&gt;https://github.com/pivotal/jasmine/wiki/Spies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Karma
  1. &lt;a href=&#34;https://github.com/angular/angular-seed/&#34;&gt;https://github.com/angular/angular-seed/&lt;/a&gt;
  2. &lt;a href=&#34;http://karma-runner.github.io/0.8/intro/configuration.html&#34;&gt;http://karma-runner.github.io/0.8/intro/configuration.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Node - config
  1. &lt;a href=&#34;https://npmjs.org/doc/config.html#proxy&#34;&gt;https://npmjs.org/doc/config.html#proxy&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm config set proxy http://proxy.be:8080
npm config set https-proxy http://proxy.be:8080
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;integratie-in-maven&#34;&gt;Integratie in maven&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;exec-maven-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;1.2.1&amp;lt;/version&amp;gt;
                &amp;lt;executions&amp;gt;
                    &amp;lt;execution&amp;gt;
                        &amp;lt;id&amp;gt;jsunit&amp;lt;/id&amp;gt;
                        &amp;lt;phase&amp;gt;test&amp;lt;/phase&amp;gt;
                        &amp;lt;goals&amp;gt;
                            &amp;lt;goal&amp;gt;exec&amp;lt;/goal&amp;gt;
                        &amp;lt;/goals&amp;gt;
                    &amp;lt;/execution&amp;gt;
                &amp;lt;/executions&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;skip&amp;gt;${skipTests}&amp;lt;/skip&amp;gt;
                    &amp;lt;successCodes&amp;gt;
                        &amp;lt;successCode&amp;gt;0&amp;lt;/successCode&amp;gt;
                        &amp;lt;successCode&amp;gt;1&amp;lt;/successCode&amp;gt;&amp;lt;!-- on failing test, don&#39;t get a build 
                            error --&amp;gt;
                    &amp;lt;/successCodes&amp;gt;
                    &amp;lt;executable&amp;gt;${basedir}/src/test/javascript/build.bat&amp;lt;/executable&amp;gt;
                    &amp;lt;workingDirectory&amp;gt;${basedir}/src/test/javascript&amp;lt;/workingDirectory&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bovenstaande &lt;code&gt;skip&lt;/code&gt; config houdt dus ook rekening met bvb &lt;code&gt;mvn clean install -DskipTests&lt;/code&gt; - de &lt;code&gt;test&lt;/code&gt; phase van maven wordt &lt;strong&gt;niet&lt;/strong&gt; geskipped maar de testen wel door de &lt;code&gt;maven-failsafe-plugin&lt;/code&gt; - bijgevolg worden goals die aan de test fase hangen ook nog uitgevoerd.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;@echo off

set PHANTOMJS_BIN=C:&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;dvl.home&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;prj&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;vitrine&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;tools&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;phantomjs&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;phantomjs.exe
karma start --log-level=debug --single-run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;â Opgelet in &lt;strong&gt;windows&lt;/strong&gt; met de paden, geen quotes gebruiken en dubbele backslashes wÃ©l gebruiken, anders werkt het niet en blijft karma hangen.&lt;/p&gt;

&lt;h3 id=&#34;een-voorbeeld-conf-file-voor-een-angular-app&#34;&gt;Een voorbeeld conf file voor een Angular app&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;basePath = &#39;.&#39;;

files = [
  JASMINE,
  JASMINE_ADAPTER,
  &#39;../../main/webapp/js/lib/jquery*.js&#39;,
  &#39;../../main/webapp/js/lib/angular.min.js&#39;,
  &#39;../../main/webapp/js/lib/angular-*.js&#39;,
  &#39;../../main/webapp/js/**/*.js&#39;,
  &#39;lib/*.js&#39;,
  &#39;specs/*.js&#39;
];

// Nodig voor Jenkins en in de build te integreren: singleRun ipv autoWatch
autoWatch = true;
//singleRun = true;

browsers = [&#39;PhantomJS&#39;];
reporters = [&#39;dots&#39;, &#39;junit&#39;];

junitReporter = {
  outputFile: &#39;../../../target/surefire-reports/be.vdab.vitrine.javascripts.xml&#39;,
  suite: &#39;unit&#39;
};

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>strategie</title>
      <link>http://www.brainbaking.com/wiki/code/java/testing/strategie/</link>
      <pubDate>Fri, 17 May 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/java/testing/strategie/</guid>
      <description>

&lt;h1 id=&#34;test-strategie&#34;&gt;Test strategie&lt;/h1&gt;

&lt;p&gt;Er zijn verschillende soorten testen en deze komen (eventueel) in elke laag terug.&lt;/p&gt;

&lt;h2 id=&#34;unit-testen&#34;&gt;Unit testen&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;* Wat? Testen of een kleine unit/component op zich werkt.
* Welke gevallen? alle gevallen: elk successpad (alle boundary conditions), alle mogelijke failure paden
* Eventueel vriendjes van deze component wegmocken (let op voor mockitis!)
* Testen zonder databank of andere integratie (rest calls)
* Extenden van BaseTestCase -&amp;gt; NOOIT meer `[MockitoAnnotations.initMocks(this)](http://mockito.googlecode.com/svn/branches/1.6/javadoc/org/mockito/MockitoAnnotations.html)` uitvoeren!! We gebruiken nu de PowerMockRunner.
* Elke entity/aggregate root moet een xxxBuilder klasse hebben om test data te maken.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bijvoorbeeld bij web testen is het meestal beter om de stubs van ActionMapping, HttpServletRequest etc te gebruiken dan een mock aan te maken. -&amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void BlaActionTest extends StrutsTestCase {
  @Test
  public void testDit() {
     action.doeIets(mappingStub, requestStub, ...) // ipv mock
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Opletten met PowerMock static mocks - zo weinig mogelijk gebruiken, de &lt;code&gt;PowerMock&lt;/code&gt; class loader is nogal een memory-hog.&lt;/p&gt;

&lt;p&gt;We gebruiken nu in plaats van Hamcrest assertThat altijd FEST Assert.
Manual/wiki hier: &lt;a href=&#34;http://docs.codehaus.org/display/FEST/FEST-Assert&#34;&gt;http://docs.codehaus.org/display/FEST/FEST-Assert&lt;/a&gt;
Het komt erop neer dat je nooit meer dan 1x hoeft te static-importen door &lt;code&gt;assertThat(blabla).isX().hasY()&lt;/code&gt;&amp;hellip; en alles (indien gewenst) te chainen.&lt;/p&gt;

&lt;h2 id=&#34;integratie-testen&#34;&gt;Integratie testen&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;* Testen dat de integratie van een aantal componenten met een extern infrastructure systeem correct werkt
* Test persistentie van domain objecten + queries : d.i. integratie met databank
* Extenden van IntegrationTestCase
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;postdeploy-testen&#34;&gt;Postdeploy testen&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;* Testen dat de applicatie als geheel werkt.
* Testen vereisen een gedeployde applicatie 
* [code/java/testing/selenium](/wiki/code/java/testing/selenium/). Voor specifieke commando&#39;s van selenium en pitfalls, zie de wiki link!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;â &lt;strong&gt;Argument Catching matchers&lt;/strong&gt; - Indien je denkt deze matcher nodig te hebben bij het unit testen is het misschien beter om na te denken over de implementatie die getest wordt. Zit deze OK in elkaar qua design? Meestal helpt een beetje refactoren beter dan die matcher te schrijven of je integratie-test een klein stukje.&lt;/p&gt;

&lt;p&gt;â &lt;strong&gt;Falende Selenium Testen&lt;/strong&gt; - Best eens nakijken of er geen testen ontbreken in de code die dit zou moeten opvangen. Anders wordt er te veel berust op de selenium testen die alles zouden moeten afdekken.&lt;/p&gt;

&lt;h1 id=&#34;testen-per-laag&#34;&gt;Testen per Laag&lt;/h1&gt;

&lt;h2 id=&#34;domein&#34;&gt;Domein&lt;/h2&gt;

&lt;p&gt;Alle domain code wordt geunit-tested.&lt;/p&gt;

&lt;p&gt;Alle persistentie code (elk veld) wordt geÃ¯ntegratietested
    * elk field op een entity/aggregateroot
    * elke relatie tussen entities/aggregateroots
    * elke query + fields waar men op kan filteren&lt;/p&gt;

&lt;h2 id=&#34;presentatie&#34;&gt;Presentatie&lt;/h2&gt;

&lt;p&gt;Dit zijn selenium testen, waarbij men het volgende wil testen:
    * Of het scherm in het algemeen &amp;ldquo;werkt&amp;rdquo; door de titel te asserten (ipv verify: direct falen dan)
    * Of ik velden kan invullen en saven, en daarna terug kan opvragen
    * Of ik wanneer het kan bepaalde velden &lt;em&gt;in bepaalde gevallen al dan niet kan zien&lt;/em&gt; (combobox hide/show)&lt;br/&gt;&lt;br/&gt;Dit is belangrijk!
    * Belangrijke validaties (bijvoorbeeld datum van &amp;lt; datum tot, maar niet ingeldige datum)
    * Of ik records kan verwijderen uit een lijst wanneer mogelijk
    * Flow tussen verschillende schermen: bvb. van aanmaken vreemdeling naar aanvraag naar bepaalde tab
    * Effecten van struts configuratie bvb: errorhandler &lt;code&gt;DomainValidationExceptionHandler&lt;/code&gt; correct geconfigureerd?&lt;/p&gt;

&lt;p&gt;Het is belangrijk om voor Javascript-specifieke zaken ook testen te schrijven omdat bijvoorbeeld &lt;a href=&#34;http://www.brainbaking.com/wiki/code/jsp/jstl/&#34;&gt;code/jsp/jstl&lt;/a&gt; geen exception throwt indien er geen bean gevonden is met dollar.&lt;/p&gt;

&lt;p&gt;Unit testen voor de weblaag:
    * Op de form de init aggregate root en update aggregate root (create/update) (en eventueel andere methods)
    * Eventueel: action methodes testen (indien eenvoudig te testen, anders via selenium integratie test)&lt;/p&gt;

&lt;h2 id=&#34;application&#34;&gt;Application&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;* In principe zou deze laag heel dun moeten zijn, de logica bevindt zich in de domein laag. De applicatie laag zou enkel mogen delegeren, voor zo&#39;n zaken zijn we eerder pragmatisch en schrijven we geen testen. &amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;â &lt;strong&gt;Let Op&lt;/strong&gt; - Wanneer er toch logica in dreigt te komen (bvb &lt;code&gt;if()... {}&lt;/code&gt;) -&amp;gt; natuurlijk wÃ©l testen!&lt;/p&gt;

&lt;h2 id=&#34;infrastructure&#34;&gt;Infrastructure&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;* Alle code unit testen
* Hera gateway integratie testen: eventueel in HeraStub een &#39;speciaal geval&#39; zetten dat een fout genereert zodat je de correct de foutafhandeling test
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>phantomjs</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/testing/phantomjs/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/testing/phantomjs/</guid>
      <description>

&lt;h1 id=&#34;test-automatisatie-phantomjs&#34;&gt;Test automatisatie: PhantomJS&lt;/h1&gt;

&lt;p&gt;Een experiment om mijn &lt;code&gt;JasmineTestRunner&lt;/code&gt; uit te breiden (of volledig op te splitsen) van &lt;strong&gt;Rhino + Envjs 1.2&lt;/strong&gt; naar &lt;strong&gt;PhantomJS 1.4&lt;/strong&gt; (liefst 1.5 maar dit moet ik nog compilerend krijgen onder Windows).&lt;/p&gt;

&lt;h3 id=&#34;phantom-js-test-code&#34;&gt;Phantom.js test code&lt;/h3&gt;

&lt;h4 id=&#34;start-script&#34;&gt;Start script&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;
console.log(&amp;quot;loading&amp;quot;);
var page = new WebPage();

// Is nodig omdat anders in uw testpagina console.log() niets doet. 
page.onConsoleMessage = function(msg) {
    console.log(&amp;quot;debug from page: &amp;quot; + msg);
};

/**
 * Phantom JS 1.4 tests voor EnvJS &amp;quot;fixes&amp;quot; die ik heb moeten erin hacken.
 * Alles werkt blijkbaar native, hoera!
 *
 * TODO:
 * -----
 * # Waarom werken relatieve paden niet met openen van de pagina (crash Phantom)
 * # Waarom werken script includes niet, lokaal op relatief pad? Absoluut = access denied
 *   -&amp;gt; Een HTTP pad opgeven werkt wel, zoals jQuery.com include. 
 *   -&amp;gt; Zolang dit niet goed werkt kunnen we niet naar de jasmine HTML suite gaan! 
 * # testen van set/clearTimeout en set/clearInterval
 * # Heb ik Rhino dan nog wel nodig? Hoe kan ik phantomjs output evalueren en dan in een TestRunner knallen?
 * 
 * Jasmine integratie
 * ------------------
 * Custom XML reporters, zie
 *  - http://code.google.com/p/phantomjs/wiki/ExternalArticles
 *  - http://code.google.com/p/phantomjs/wiki/TestFrameworkIntegration
 *  - https://github.com/detro/phantomjs-jasminexml-example
 **/
page.open(&#39;D:&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;Profiles&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;BVERBEKE&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;Desktop&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;phantomjs-1.4.1-win32-dynamic&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;test.html&#39;, function(status) {

    console.log(&amp;quot;should have printed &#39;yoo&#39; AND &#39;sup?&#39;, include from test.js??&amp;quot;);
    console.log(&amp;quot;&amp;quot;);
    
    var testHTML = page.evaluate(function() {
        return document.getElementById(&#39;test&#39;).innerHTML;
    });
    
    var isKnopHidden = page.evaluate(function() {
        return $(&amp;quot;#hiddenKnop&amp;quot;).is(&amp;quot;:hidden&amp;quot;);
    });
    
    var whichIsFocussed = page.evaluate(function() {
        return document.activeElement.id;
    });
    
    var divHeightCSSGetterTest = page.evaluate(function() {
        return $(&amp;quot;#test&amp;quot;).css(&amp;quot;height&amp;quot;);
    });
    
    var jQueryCheckedSelectorTest = page.evaluate(function() {
        $(&amp;quot;#check&amp;quot;).click();
        return $(&amp;quot;#check&amp;quot;).is(&amp;quot;:checked&amp;quot;);
    }); 
    
    console.log(&amp;quot;got testHTML &amp;quot; + testHTML);
    console.log(&amp;quot;is knop hidden? (should be) --&amp;gt; &amp;quot; + isKnopHidden);
    console.log(&amp;quot;which is focussed? (should be textarea) --&amp;gt; #&amp;quot; + whichIsFocussed);
    console.log(&amp;quot;div height? (should be 100px) --&amp;gt; &amp;quot; + divHeightCSSGetterTest);
    console.log(&amp;quot;checkbox checked? (should be true) --&amp;gt; &amp;quot; + jQueryCheckedSelectorTest);
    
    phantom.exit();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;test-js-script&#34;&gt;Test.js script&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log(&amp;quot;supp??&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;test-html-resources&#34;&gt;Test.html resources&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &amp;quot;-*W3C*DTD HTML 4.01 Transitional//EN&amp;quot;
&amp;quot;http://www.w3.org/TR/html4/loose.dtd&amp;quot;&amp;gt;

    &amp;lt;head&amp;gt;
        &amp;lt;script type######&amp;quot;text/javascript&amp;quot; src&amp;quot;test.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script src=&amp;quot;http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;test&amp;quot;&amp;gt;bla&amp;lt;/div&amp;gt;
    &amp;lt;form&amp;gt;
        &amp;lt;input type######&amp;quot;button&amp;quot; id&amp;quot;knop&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;
        &amp;lt;textarea id=&amp;quot;text&amp;quot;&amp;gt;eerste val&amp;lt;/textarea&amp;gt;
        &amp;lt;input type######&amp;quot;button&amp;quot; id&amp;quot;hiddenKnop&amp;quot; value=&amp;quot;hidden&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;
        &amp;lt;input type######&amp;quot;checkbox&amp;quot; id&amp;quot;check&amp;quot;&amp;gt;&amp;lt;/input&amp;gt;
    &amp;lt;/form&amp;gt;
    
        &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
        console.log(&amp;quot;yoo&amp;quot;);
        document.getElementById(&amp;quot;test&amp;quot;).innerHTML = &amp;quot;nieuwe blabla&amp;quot;;
        
        $(&amp;quot;#test&amp;quot;).html(&amp;quot;jquery nieuwe blabla&amp;quot;).css(&amp;quot;height&amp;quot;, &amp;quot;100px&amp;quot;);
        $(&amp;quot;#hiddenKnop&amp;quot;).hide();
        $(&amp;quot;#text&amp;quot;).focus();
        
        console.log(&amp;quot;is knop hidden? (should be) --&amp;gt; &amp;quot; + $(&amp;quot;#hiddenKnop&amp;quot;).is(&amp;quot;:hidden&amp;quot;));
        
        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;console-output-bovenstaande&#34;&gt;Console Output bovenstaande&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;D:&amp;lt;br/&amp;gt;Profiles&amp;lt;br/&amp;gt;BVERBEKE&amp;lt;br/&amp;gt;Desktop&amp;lt;br/&amp;gt;phantomjs-1.4.1-win32-dynamic&amp;gt;phantomjs start.js
loading
debug from page: yoo
debug from page: is knop hidden? (should be) --&amp;gt; true
should have printed &#39;yoo&#39; AND &#39;sup?&#39;, include from test.js??

got testHTML jquery nieuwe blabla
is knop hidden? (should be) --&amp;gt; true
which is focussed? (should be textarea) --&amp;gt; #text
div height? (should be 100px) --&amp;gt; 100px
checkbox checked? (should be true) --&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;phantom-js-uitvoeren&#34;&gt;Phantom.js uitvoeren&lt;/h3&gt;

&lt;p&gt;Downloaden (1.4 voor windows&amp;hellip;) op &lt;a href=&#34;http://code.google.com/p/phantomjs/downloads/list&#34;&gt;http://code.google.com/p/phantomjs/downloads/list&lt;/a&gt;, zit Qt4 libs in. Dan met:&lt;/p&gt;

&lt;p&gt;-&amp;gt; &lt;code&gt;phantomjs start.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Die dan met &lt;code&gt;page.open()&lt;/code&gt; een webpagina inlaadt. Blijkbaar werkt &lt;code&gt;&amp;lt;script/&amp;gt;&lt;/code&gt; tags evaluaten nog niet voor bepaalde paden?&lt;/p&gt;

&lt;h4 id=&#34;relatieve-paden-probleem&#34;&gt;Relatieve paden probleem&lt;/h4&gt;

&lt;p&gt;Mogelijke oorzaak: &lt;code&gt;Qt 4.8.0&lt;/code&gt; die URLs anders behandelt. Wordt gerevert vanaf &lt;code&gt;4.8.1&lt;/code&gt; en zou ook moeten werken met &lt;code&gt;4.7.0&lt;/code&gt;. Vereist zelf compileren van PhantomJS&amp;hellip;&lt;/p&gt;

&lt;p&gt;Zie ook&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/phantomjs/issues/detail?id=231&#34;&gt;http://code.google.com/p/phantomjs/issues/detail?id=231&lt;/a&gt; en&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/9261803/phantomjs-is-not-loading-scripts-correctly-from-html-page-with-tests&#34;&gt;http://stackoverflow.com/questions/9261803/phantomjs-is-not-loading-scripts-correctly-from-html-page-with-tests&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Mottige tijdelijke oplossing:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;page.open(&amp;quot;url&amp;quot;, function() {
  page.injectJs(&amp;quot;filename&amp;quot;); // rel.path is OK here.
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;oplossing-in-windows-werk-met-absoluut-path-dat-de-base-html-include&#34;&gt;Oplossing in Windows: werk met absoluut path dat de base HTML include&lt;/h5&gt;

&lt;p&gt;â Bovenstaande &lt;code&gt;.page.open(absoluteUrl)&lt;/code&gt; vervangen door:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;page.open(require(&#39;fs&#39;).absolute(&#39;test.html&#39;), function() {});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vanaf dan werken ook relatieve &lt;code&gt;&amp;lt;SCRIPT/&amp;gt;&lt;/code&gt; tag includes!&lt;/p&gt;

&lt;h3 id=&#34;evalueren-in-page-context-en-in-phantom-context&#34;&gt;Evalueren in page context en in Phantom context&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;page.evaluate()&lt;/code&gt; wordt in een sandbox uitgevoerd, geen mogelijkheid tot closure scope Ã©n geen mogelijkheid tot toegang van het &lt;code&gt;phantom&lt;/code&gt; object. Hoe kunnen we dan argumenten meegeven, of objecten of functies?&lt;/p&gt;

&lt;p&gt;Hier is een &amp;ldquo;hackje&amp;rdquo; voor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function evaluate(page, func) {
    var args = [].slice.call(arguments, 2);
    var str = &#39;function() { return (&#39; + func.toString() + &#39;)(&#39;;
    for (var i ###### 0, l  args.length; i &amp;lt; l; i++) {
        var arg = args[i];
        if (/object|string/.test(typeof arg)) {
            str += &#39;JSON.parse(&#39; + JSON.stringify(JSON.stringify(arg)) + &#39;),&#39;;
        } else {
            str += arg + &#39;,&#39;;
        }
    }
    str = str.replace(/,$/, &#39;); }&#39;);
    return page.evaluate(str);
}

var page = require(&#39;webpage&#39;).create();
var func = function() {
    console.log(&#39;hello, &#39; + document.title + &#39;&amp;lt;br/&amp;gt;n&#39;);
    
    for (var i ###### 0, l  arguments.length; i &amp;lt; l; i++) {
        var arg = arguments[i];
        console.log(typeof arg + &#39;:&amp;lt;br/&amp;gt;t&#39; + arg);
    }
};
page.onLoadFinished = function() {
    evaluate(page, func, true, 0, function() {
        return require(&#39;fs&#39;).read
    });
    phantom.exit(0);
};
page.open(&#39;http://www.google.com/&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wat helaas NIET werkt is het volgende:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var func = function() {
  arguments[0](&#39;bla.html&#39;);
}

page.onLoadFinished = function() {
  var read = require(&#39;fs&#39;).read;
  evaluate(page, func, read);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Waarom niet? &lt;code&gt;ReferenceError: Can&#39;t find variable: require&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Hoe kan ik dan &lt;code&gt;Phantom&lt;/code&gt;/&lt;code&gt;commonJs&lt;/code&gt; variabelen gebruiken? Voorlopig niet? Feature request voor 1.6 - zie &lt;a href=&#34;http://code.google.com/p/phantomjs/issues/detail?id=132&#34;&gt;http://code.google.com/p/phantomjs/issues/detail?id=132&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;phantomjs-en-jquery-ajax&#34;&gt;PhantomJS en jQuery Ajax&lt;/h3&gt;

&lt;p&gt;Werkt maar niet in &lt;code&gt;async: false&lt;/code&gt; mode. Zie &lt;a href=&#34;http://code.google.com/p/phantomjs/issues/detail?id######463&amp;amp;thanks463&amp;amp;ts=1332850556&#34;&gt;http://code.google.com/p/phantomjs/issues/detail?id######463&amp;amp;thanks463&amp;amp;ts=1332850556&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;page.evaluate(function() {
    console.log(&amp;quot;ajaxying&amp;quot;);
  jQuery.ajax({
    async: false,
    dataType: &#39;html&#39;,
    url: &#39;test.html&#39;,
    success: function(data) {
        console.log(&amp;quot;--success!!&amp;quot;);
        console.log(data);
        console.log(&amp;quot;--&amp;quot;);
    }
  });       
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Print:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--success!!

--
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;?? Async mode moet uit staan voor jasmine fixtures te kunnen laden&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;phantomjs-en-jasmine-integratie&#34;&gt;Phantomjs en Jasmine integratie&lt;/h3&gt;

&lt;p&gt;Werkend met &lt;strong&gt;jasmine 1.1.0&lt;/strong&gt;: zie uitgewerkt voorbeeld op &lt;a href=&#34;https://github.com/detro/phantomjs-jasminexml-example/&#34;&gt;https://github.com/detro/phantomjs-jasminexml-example/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Het komt basically hierop neer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;een js file die de suite.html inleest en wacht tot jasmine klaar is met runnen&lt;/li&gt;
&lt;li&gt;een custom reporter van jasmine die JUnit XML genereert. Wanneer dit klaar is schrijft de suite.html opener met phantom code de file weg.&lt;/li&gt;
&lt;li&gt;een maven plugin om de executable te draaien en de XML naar de juiste &lt;code&gt;surefire-reports&lt;/code&gt; directory weg te schrijven.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;in-pom-xml&#34;&gt;in pom.xml&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;exec-maven-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;1.1&amp;lt;/version&amp;gt;
                &amp;lt;executions&amp;gt;
                    &amp;lt;execution&amp;gt;
                        &amp;lt;id&amp;gt;jsunit&amp;lt;/id&amp;gt;
                        &amp;lt;phase&amp;gt;test&amp;lt;/phase&amp;gt;
                        &amp;lt;goals&amp;gt;
                            &amp;lt;goal&amp;gt;exec&amp;lt;/goal&amp;gt;
                        &amp;lt;/goals&amp;gt;
                    &amp;lt;/execution&amp;gt;
                &amp;lt;/executions&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;executable&amp;gt;phantomjs.exe&amp;lt;/executable&amp;gt;
                    &amp;lt;workingDirectory&amp;gt;${project.js.test.directory}/lib&amp;lt;/workingDirectory&amp;gt;
                    &amp;lt;arguments&amp;gt;
                        &amp;lt;argument&amp;gt;run-jasmine.js&amp;lt;/argument&amp;gt;
                        &amp;lt;argument&amp;gt;./../suite.html&amp;lt;/argument&amp;gt;
                        &amp;lt;argument&amp;gt;${project.build.directory}/surefire-reports&amp;lt;/argument&amp;gt;
                    &amp;lt;/arguments&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;phantomjs-en-qunit-integratie&#34;&gt;Phantomjs en QUnit integratie&lt;/h3&gt;

&lt;p&gt;GeÃ¯ntegreerd met maven:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://kennychua.net/blog/running-qunit-tests-in-a-maven-continuous-integration-build-with-phantomjs&#34;&gt;http://kennychua.net/blog/running-qunit-tests-in-a-maven-continuous-integration-build-with-phantomjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/phantomjs-qunit-runner/&#34;&gt;http://code.google.com/p/phantomjs-qunit-runner/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;fixtures-inladen&#34;&gt;Fixtures inladen&lt;/h4&gt;

&lt;p&gt;Voor zover de QUnit documentatie aanwezig is, zijn fixtures child DOM elementen van &lt;code&gt;#fixtures&lt;/code&gt;, een div die buiten het scherm float:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The #qunit-fixture element can be used to provide and manipulate test markup, and it&amp;rsquo;s content will be automatically reset after each test (see QUnit.reset). The element is styled with position:absolute; top:-10000px; left:-10000; - with these, it won&amp;rsquo;t be obstructing the result, without affecting code the relies on the affected elements to be visible (instead of display:none).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Wordt dus automatisch gereset, maar we hebben dan ook &lt;code&gt;jQuery.ajax&lt;/code&gt; nodig om externe files in te laden -&amp;gt; zelfde probleem!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>stubs</title>
      <link>http://www.brainbaking.com/wiki/code/java/testing/stubs/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/java/testing/stubs/</guid>
      <description>

&lt;h1 id=&#34;stubs&#34;&gt;Stubs&lt;/h1&gt;

&lt;h2 id=&#34;embedded-jetty&#34;&gt;Embedded Jetty&lt;/h2&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://docs.codehaus.org/display/JETTY/Embedding+Jetty&#34;&gt;http://docs.codehaus.org/display/JETTY/Embedding+Jetty&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stub Http server:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class StubHttpServer implements StubServer {

    private RequestRecordingFilter filter = new RequestRecordingFilter();

    private int port;

    private Server httpServer;

    private Map&amp;lt;String, ResettableHttpServlet&amp;gt; servlets = new HashMap&amp;lt;String, ResettableHttpServlet&amp;gt;();

    public StubHttpServer(int port) {
        this.port = port;
    }

    public void addHttpServlet(String uri, final HttpServlet servlet) {
        addHttpServlet(uri, new ResettableHttpServlet() {

            @Override
            public void reset() {
            }

            @Override
            public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {
                servlet.service(req, res);
            }

        });
    }

    public void addHttpServlet(String uri, ResettableHttpServlet servlet) {
        this.servlets.put(uri, servlet);
    }

    public boolean hasReceivedRequest(String method, String uri) {
        return filter.hasReceivedRequest(method, uri);
    }

    public boolean hasMatchingRequest(String method, String uriRegex) {
        return filter.hasMatchingRequest(method, uriRegex);
    }

    public void reset() {
        filter.reset();
        for (ResettableHttpServlet servlet : servlets.values()) {
            servlet.reset();
        }
    }

    public void start() throws Exception {
        if (httpServer ###### null) {
            httpServer = new Server();
            SocketConnector connector = new SocketConnector();
            connector.setPort(port);
            httpServer.setConnectors(new Connector[] { connector });
            Context root = new Context(httpServer, &amp;quot;/&amp;quot;, Context.SESSIONS);
            root.addFilter(new FilterHolder(filter), &amp;quot;/*&amp;quot;, 0);
            for (String servletMapping : servlets.keySet()) {
                root.addServlet(new ServletHolder(servlets.get(servletMapping)), servletMapping);
            }
            httpServer.start();

            Runtime.getRuntime().addShutdownHook(new Thread() {

                @Override
                public void run() {
                    StubHttpServer.this.stop();
                }
            });
        }
    }

    public void stop() {
        if (httpServer != null) {
            try {
                httpServer.stop();
            } catch (Exception e) {
                // ignore
            } finally {
                httpServer = null;
            }
        }
    }

    @Override
    public void startGooiExceptionIndienPoortNogNietVrij() throws Exception {
        start();
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Concreet voorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@StubServer(port = OEStubServer.PORT)
public class OEStubServer extends be.test.stubserver.StubHttpServer {

    public static final int PORT = 9106;

    private static OEStubServer INSTANCE;

    public synchronized static OEStubServer getInstance() {
        if (INSTANCE ###### null) {
            INSTANCE = new OEStubServer();
        }
        return INSTANCE;
    }

    private OeClientAwareServlet oeClientAwareServlet = new OeClientAwareServlet();

    private OEStubServer() {
        super(PORT);
        addHttpServlet(&amp;quot;/*&amp;quot;, oeClientAwareServlet);
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De annotatie &lt;code&gt;@StubServer&lt;/code&gt; is louter ter informatie. Het belangrijkste is &lt;code&gt;addHttpServlet()&lt;/code&gt; van de &lt;code&gt;javax.servlet.http.HttpServlet&lt;/code&gt; klasse (hier leidt &lt;code&gt;OeClientAwareServlet&lt;/code&gt; van af). Dan wordt &lt;code&gt;doGet&lt;/code&gt; of &lt;code&gt;doPost&lt;/code&gt; ook geÃ¯mplementeerd. That&amp;rsquo;s it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>testing</title>
      <link>http://www.brainbaking.com/wiki/code/java/testing/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/java/testing/</guid>
      <description>

&lt;h1 id=&#34;testing-in-java&#34;&gt;Testing in Java&lt;/h1&gt;

&lt;p&gt;&lt;img style=&#39;&#39; src=&#39;http://www.brainbaking.com/img/indexmenu&gt;code/java/testing|js&amp;rsquo;&amp;gt;&lt;/p&gt;

&lt;h2 id=&#34;acceptatietesten&#34;&gt;Acceptatietesten&lt;/h2&gt;

&lt;p&gt;Zie &amp;gt;&amp;gt; &lt;a href=&#34;http://www.brainbaking.com/wiki/code/java/testing/selenium/&#34;&gt;code/java/testing/selenium&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;mocking&#34;&gt;Mocking&lt;/h2&gt;

&lt;h3 id=&#34;static-mocking-met-powermock&#34;&gt;Static mocking met PowerMock&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;PowerMock&lt;/code&gt; gebruikt een eigen Classloader om klassen in te laden. Als er veel testen powermock gebruiken gaat de build alsmaar trager worden. Om te vermijden dat de boel dicht slibt een speciale annotatie gebruiken:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(PowerMockRunner.class)
@PrepareForTest({WebApplicationContextUtils.class, SecurityManager.class })
@PowerMockIgnore({&amp;quot;org.apache.log4j&amp;quot;, &amp;quot;org.apache.commons.logging&amp;quot;, &amp;quot;org.apache.struts.util&amp;quot; })
public class Test {
  public void setUp() {
    PowerMockito.mockStatic(SecurityManager.class);
  }
  
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Het is &lt;strong&gt;niet&lt;/strong&gt; meer nodig om in combinatie met mockito ook nog eens de &lt;code&gt;@Mock&lt;/code&gt; initializatie te doen (met &lt;code&gt;MockitoAnnotations.initMocks(this);&lt;/code&gt; - dit gebeurt vanzelf)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>testing</title>
      <link>http://www.brainbaking.com/wiki/code/javascript/testing/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/javascript/testing/</guid>
      <description>

&lt;h1 id=&#34;testing-js-code&#34;&gt;Testing JS Code&lt;/h1&gt;

&lt;h2 id=&#34;testen-schrijven&#34;&gt;Testen schrijven&lt;/h2&gt;

&lt;h3 id=&#34;klassieke-unit-testen&#34;&gt;Klassieke Unit testen&lt;/h3&gt;

&lt;p&gt;Frameworks gebruiken zoals jQuery&amp;rsquo;s &lt;a href=&#34;http://docs.jquery.com/Qunit&#34;&gt;QUnit&lt;/a&gt; die het makkelijk maken modulair te testen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;test(&amp;quot;dit zou dat moeten doen blabla&amp;quot;, function() {
  equal(expected, actual);
  ok(someThingExpectedToBeTrue);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mocking van bijvoorbeeld &lt;code&gt;$&lt;/code&gt; mogelijk via &lt;a href=&#34;http://johanneslink.net/projects/mockme.html&#34;&gt;MockMe&lt;/a&gt;, een door Mockito geÃ¯nspireerde Javascript Object spy API. Iets van:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;when(f)(&#39;in&#39;).thenReturn(&#39;out&#39;);
assertEqual(&#39;out&#39;, f(&#39;in&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;â Vereist &lt;code&gt;Prototype JS&lt;/code&gt;, en &lt;code&gt;JsUnit&lt;/code&gt; om de &lt;code&gt;assert&lt;/code&gt; functions te kunnen gebruiken&lt;/p&gt;

&lt;h3 id=&#34;gedrag-testen-met-jasmine&#34;&gt;Gedrag testen met Jasmine&lt;/h3&gt;

&lt;p&gt;Inspiratie van de &lt;em&gt;Ruby&lt;/em&gt; community gehaald, met name &lt;strong&gt;RSpec&lt;/strong&gt;-based.&lt;br/&gt;&lt;br/&gt;
Frameworks gebruiken zoals &lt;a href=&#34;http://pivotal.github.com/jasmine/&#34;&gt;Jasmine&lt;/a&gt; ((Niet afhankelijk van andere JS Frameworks, vereist geen DOM dus geen Envjs nodig serverside!)):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;describe(&amp;quot;Rekenmasjien&amp;quot;, function() {
  it(&amp;quot;should add one number&amp;quot;, function() {
    var calc = new Calc(0);
    expect(calc.increase()).toEqual(1);
  });
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Krachten:
  * Schrijf code door &lt;em&gt;expectations&lt;/em&gt; (&lt;a href=&#34;https://github.com/pivotal/jasmine/wiki/Matchers&#34;&gt;Matchers vbs&lt;/a&gt;) op te bouwen, in dezelfde trand als &lt;code&gt;FESTAssert&lt;/code&gt;.
  * Bundel expectations in een suite (&amp;ldquo;beschrijvend&amp;rdquo;)
  * Schrijf makkelijk extenties om eigen expectation functions op te bouwen als de standaard API niet volstaat
  * &lt;code&gt;beforeEach()&lt;/code&gt; en &lt;code&gt;afterEach()&lt;/code&gt; functions binnen suites
  * Snel disablen van testen via &lt;code&gt;xit()&lt;/code&gt; (&lt;code&gt;@Ignore&lt;/code&gt; zogezegd)
  * &lt;strong&gt;mocking&lt;/strong&gt; en &lt;strong&gt;spying&lt;/strong&gt; heel eenvoudig mogelijk: zie &lt;a href=&#34;https://github.com/pivotal/jasmine/wiki/Spies&#34;&gt;https://github.com/pivotal/jasmine/wiki/Spies&lt;/a&gt;
  * Plugins voor reporting, custom matching, &amp;hellip;&lt;/p&gt;

&lt;p&gt;Zwakheden:
  * Async testen vereist &lt;code&gt;waitsFor()&lt;/code&gt; ea. Zie onder
  * Vereist specRunner.html files, standaard altijd in een browser runnen. &lt;strong&gt;Genereer specRunners&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Betere matchers speciaal voor jQuery ea zijn beschikbaar: &lt;a href=&#34;https://github.com/velesin/jasmine-jquery&#34;&gt;https://github.com/velesin/jasmine-jquery&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;aynschrone-code-testen&#34;&gt;Aynschrone code testen&lt;/h5&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://www.brainbaking.com/wiki/code/javascript/async/&#34;&gt;async&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;jasmine-integreren-met-jstestdriver&#34;&gt;Jasmine integreren met jsTestDriver&lt;/h5&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://skaug.no/ingvald/2010/10/javascript-unit-testing.html&#34;&gt;http://skaug.no/ingvald/2010/10/javascript-unit-testing.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Er is een &lt;strong&gt;Jasmine adapter&lt;/strong&gt; beschikbaar: &lt;a href=&#34;https://github.com/ibolmo/jasmine-jstd-adapter&#34;&gt;https://github.com/ibolmo/jasmine-jstd-adapter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Het kan ook handig zijn om een &lt;strong&gt;Junit XML Reporter&lt;/strong&gt; te gebruiken om bijvoorbeeld voor Hudson het makkelijker te maken om de test output files te verwerken. Er zijn reeds enkele reporter plugins zoals deze beschikbaar, hier: &lt;a href=&#34;https://github.com/larrymyers/jasmine-reporters&#34;&gt;https://github.com/larrymyers/jasmine-reporters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;â Integratie met Hudson, EnvJS en Rhino ea: zie eigen junit test runner: &lt;a href=&#34;https://github.com/jefklak/jasmine-junit-runner&#34;&gt;https://github.com/jefklak/jasmine-junit-runner&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;andere-js-test-frameworks&#34;&gt;Andere JS Test frameworks&lt;/h3&gt;

&lt;p&gt;Interessante links:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://tddjs.com/&#34;&gt;http://tddjs.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/300855/looking-for-a-better-javascript-unit-test-tool&#34;&gt;Stack overflow: Looking for a better Javascript unit test tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;testen-automatiseren&#34;&gt;Testen automatiseren&lt;/h2&gt;

&lt;h3 id=&#34;distributed-testing-in-browser&#34;&gt;Distributed testing in-browser&lt;/h3&gt;

&lt;h4 id=&#34;jstestdriver&#34;&gt;jsTestDriver&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/js-test-driver/&#34;&gt;http://code.google.com/p/js-test-driver/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wat doet dit?
  * Een jar dat een &lt;strong&gt;server&lt;/strong&gt; opstart die een browser bestuurt en bepaalde &lt;strong&gt;JS&lt;/strong&gt; files (uw testen en uw productiecode) automatisch inlaadt en uitvoert
  * Bevat een API met asserts
  * Reportgeneratie met plugins voor eclipse om ze JUnit-like te tonen
  * Integratie met build etc mogelijk
  * Integratie met Jasmine mogelijk: &lt;a href=&#34;https://github.com/ibolmo/jasmine-jstd-adapter&#34;&gt;https://github.com/ibolmo/jasmine-jstd-adapter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jsTestDriver integreren met Hudson&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://cjohansen.no/en/javascript/javascript_continuous_integration_with_hudson_and_jstestdriver&#34;&gt;http://cjohansen.no/en/javascript/javascript_continuous_integration_with_hudson_and_jstestdriver&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Het komt eigenlijk hierop neer: maak een nieuw target, voer extern dit commando uit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -jar test/JsTestDriver-1.2.2.jar &amp;lt;br/&amp;gt;
  --config jsTestDriver.conf &amp;lt;br/&amp;gt;
  --server http://localhost:4223 
  --tests all --testOutput . --reset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dit neemt aan dat de server reeds gestart is, kan met een shell script op de Hudson server bak: &lt;code&gt;java -jar test/JsTestDriver-1.2.2.jar --port 4223&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;jsunit-server&#34;&gt;JsUnit Server&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jsunit.net/documentation/index.html&#34;&gt;http://www.jsunit.net/documentation/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wat doet dit?
  * Een jar dat een &lt;strong&gt;Jetty Server&lt;/strong&gt; opstart die een browser bestuurt en bepaalde &lt;strong&gt;HTML&lt;/strong&gt; files inlaadt en uitvoert, waar testen in zitten
  * Afhankelijk van &lt;code&gt;Prototype JS&lt;/code&gt; om asserts uit te voeren
  * Integratie met ant zeer eenvoudig&lt;/p&gt;

&lt;h4 id=&#34;testswarm&#34;&gt;TestSwarm&lt;/h4&gt;

&lt;p&gt;Zie http:*swarm.jquery.org/ en https:*github.com/jquery/testswarm/wiki&lt;/p&gt;

&lt;h3 id=&#34;headless-testen&#34;&gt;Headless testen&lt;/h3&gt;

&lt;h4 id=&#34;mogelijkheid-1-envjs&#34;&gt;Mogelijkheid 1: EnvJS&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;EnvJS&lt;/em&gt; is een &lt;em&gt;gesimuleerde&lt;/em&gt; browser omgeving geschreven in JS. Zie &lt;a href=&#34;http://www.envjs.com/&#34;&gt;http://www.envjs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Voordeel&lt;/strong&gt;: heel snel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nadeel&lt;/strong&gt;: &lt;code&gt;Java&lt;/code&gt; ofzoiets nodig om JS te evalueren (&lt;strong&gt;Rhino&lt;/strong&gt; of &lt;strong&gt;V8&lt;/strong&gt; in C++ van Google), plus kan onregelmatigheden vertonen met hevig gebruik maken van UI frameworks -&amp;gt; dit zou moeten werken allemaal, maar het blijft een gesimuleerde omgeving.&lt;/p&gt;

&lt;p&gt;â Zie &lt;a href=&#34;https://github.com/jefklak/jasmine-junit-runner&#34;&gt;https://github.com/jefklak/jasmine-junit-runner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Integreren met hudson als extern commando:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -cp lib/envjs/js.jar:lib/envjs/jline.jar org.mozilla.javascript.tools.shell.Main -opt -1 -f lib/envjs/envjs.bootstrap.js -f test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;test.js&lt;/code&gt; heeft dan maar 1 regel die naar de juiste specRunner.html gaat met &lt;code&gt;window.location&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;mogelijkheid-2-qt-webkit-widget&#34;&gt;Mogelijkheid 2: Qt Webkit widget&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Webkit&lt;/em&gt; is een opensource web renderer, en er is een implementatie in &lt;code&gt;Qt&lt;/code&gt; beschikbaar (vereist libs geÃ¯nstalleerd te hebben). Zie &lt;a href=&#34;http://trac.webkit.org/wiki/QtWebKit&#34;&gt;http://trac.webkit.org/wiki/QtWebKit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Voordeel&lt;/strong&gt;: gedrag volledig in een &amp;ldquo;echte&amp;rdquo; website rendered, in plaats van via een omweg. Aangezien het een Qt Widget is, hoeft het niet expliciet op het scherm gerendered te worden (dit pollt gewoon totdat bvb &lt;em&gt;&amp;ldquo;Jasmine tests run&amp;rdquo;&lt;/em&gt; ofzoiets van tekst verschijnt, om dan de HTML te retourneren als resultaat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nadeel&lt;/strong&gt;: Qt libs vereist, nog altijd niet volledig &amp;ldquo;headless&amp;rdquo;, aparte widget spec runner in de achtergrond die draait.&lt;/p&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://johnbintz.github.com/jasmine-headless-webkit/&#34;&gt;http://johnbintz.github.com/jasmine-headless-webkit/&lt;/a&gt; (Implementatie in Ruby met nogal veel nadruk op gems ea&amp;hellip; Handig?)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.phantomjs.org/&#34;&gt;Phantom JS&lt;/a&gt; is een full stack headless browser implementatie gebaseerd op WebKit (C++/Python implementatie).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>