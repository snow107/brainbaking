<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/spring/</link>
    <description>Recent content in Spring on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Tue, 12 Mar 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.brainbaking.com/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>spring</title>
      <link>http://www.brainbaking.com/wiki/code/java/spring/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/java/spring/</guid>
      <description>Spring Wiring How to access target object behind proxy bean Zie http://www.techper.net/2009/06/05/how-to-acess-target-object-behind-a-spring-proxy/
@SuppressWarnings(&amp;quot;unchecked&amp;quot;) protected &amp;lt;Type&amp;gt; Type getTargetObject(Object proxy, Class&amp;lt;Type&amp;gt; targetClass) { try { if ((AopUtils.isJdkDynamicProxy(proxy))) { return (Type) getTargetObject(((Advised) proxy).getTargetSource().getTarget(), targetClass); } return (Type) proxy; // expected to be cglib proxy then, which is simply a specialized class } catch (Exception ex) { throw new IllegalStateException(ex); } }  Geen loadtime weaving? Geen probleem. Gebruik de static springContext accessor (maar met mate(n) natuurlijk:</description>
    </item>
    
  </channel>
</rss>