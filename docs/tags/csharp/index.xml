<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Csharp on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/csharp/index.xml</link>
    <description>Recent content in Csharp on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <atom:link href="http://www.brainbaking.com/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>resources</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/resources/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/resources/</guid>
      <description>

&lt;h1 id=&#34;c-resources&#34;&gt;C# Resources&lt;/h1&gt;

&lt;h2 id=&#34;in-tests&#34;&gt;In Tests&lt;/h2&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://www.brainbaking.com/wiki/code/csharp/testing/&#34;&gt;code/csharp/testing&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;web-config&#34;&gt;Web config&lt;/h2&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/dd465326(VS.100).aspx&#34;&gt;http://msdn.microsoft.com/en-us/library/dd465326(VS.100).aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.NET 4&lt;/code&gt; voorziet een manier om de &lt;code&gt;Web.config&lt;/code&gt; file automatisch te &lt;strong&gt;transformeren&lt;/strong&gt; afhankelijk van uw build configuratie (Debug, Release, custom). Je hebt hier 2 files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web.config (base)&lt;/li&gt;
&lt;li&gt;Web.[BuildConfigName].config (transformer)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wat in de tweede file staat, gaat toegepast worden op de eerste file. Je kan dus niet zomaar zaken copypasten en overschrijven, maar moet tags die je wil replacen &lt;strong&gt;XDT&lt;/strong&gt; transformaties op definiëren:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;appSettings&amp;gt;
  &amp;lt;add key######&amp;quot;Bla&amp;quot; value&amp;quot;blie&amp;quot;/&amp;gt;
&amp;lt;/appSettings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;met transformer&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;appSettings xdt:Transform=&amp;quot;Replace&amp;quot;&amp;gt;
  &amp;lt;add key######&amp;quot;Bla&amp;quot; value&amp;quot;bloebloe&amp;quot;/&amp;gt;
&amp;lt;/appSettings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zal de hele &lt;code&gt;appSettings&lt;/code&gt; tag vervangen in de base file. Vergeet dat attribuut en er gebeurt niets.&lt;/p&gt;

&lt;h2 id=&#34;embedded-resources-ophalen&#34;&gt;Embedded resources ophalen&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        private Stream GetIconAsStream(string icon)
        {
            return Assembly.GetExecutingAssembly()
                           .GetManifestResourceStream(
                               &amp;quot;Full.Namespace.Of.Class.dir.to.image&amp;quot; +
                               icon);
        }

        private void CopyIconsToDir(string dir, params string[] iconNames)
        {
            foreach (var icon in iconNames)
            {
                var downloadStream = GetIconAsStream(icon);
                var tmpFileCreate = File.Create(dir + &amp;quot;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;quot; + icon);
                downloadStream.CopyTo(tmpFileCreate);
                tmpFileCreate.Close();
                downloadStream.Close();
            }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;csproj-file-inlezen-parsen&#34;&gt;.CSPROJ file inlezen &amp;amp; parsen&lt;/h2&gt;

&lt;p&gt;Waarom is dit handig? Om bijvoorbeeld te kunnen kijken welke files allemaal included zijn in uw project en met een test alle SQL files verplicht te laten embedden. &lt;br/&gt;&lt;br/&gt;
(Op die manier staan ze niet als &amp;ldquo;Content&amp;rdquo; in de XML structuur). Regex op loslaten of XML parsen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        private static string ReadProjectFile()
        {
            var dbAssembly = typeof(AbstractUpdater).Assembly;
            * format: &#39;file:*/C:/Sources/project/UnitTestproject/bin/Debug/project.UnitTest.DLL&#39;
            var projectDir = dbAssembly.CodeBase.Substring(0, dbAssembly.CodeBase.IndexOf(&amp;quot;.UnitTest&amp;quot;, StringComparison.InvariantCulture));
            var csprojFile = Directory.GetFiles(projectDir.Replace(&amp;quot;file:///&amp;quot;, &amp;quot;&amp;quot;), &amp;quot;*.csproj&amp;quot;)[0];

            var csproj = File.ReadAllText(csprojFile);
            return csproj;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;managed-resources-disposen&#34;&gt;Managed resources disposen&lt;/h2&gt;

&lt;p&gt;❗ Zie &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/b1yfkh5e(v=vs.110).aspx&#34;&gt;Dispose Pattern @ MSDN&lt;/a&gt;; volgende template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class DisposableResourceHolder : IDisposable {
 
    private SafeHandle resource; // handle to a resource

    public DisposableResourceHolder(){
        this.resource = ... // allocates the resource
    }

    public void Dispose(){
        Dispose(true);
        GC.SuppressFinalize(this); // tell the GC disposing it isn&#39;t needed anymore
    }

    protected virtual void Dispose(bool disposing){
        if (disposing){
            if (resource!= null) resource.Dispose();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;using&#34;&gt;using()&lt;/h4&gt;

&lt;p&gt;De .NET CLR vertaalt&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using (MyResource myRes = new MyResource())
{
    myRes.DoSomething();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;naar&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;{ // limits scope of myRes
    MyResource myRes= new MyResource();
    try
    {
        myRes.DoSomething();
    }
    finally
    {
        // Check for a null resource.
        if (myRes!= null)
            // Call the object&#39;s Dispose method.
            ((IDisposable)myRes).Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Moet dan uw object de interface &lt;code&gt;IDisposable&lt;/code&gt; implementeren? Harde cast toch?&lt;/p&gt;

&lt;h4 id=&#34;java-vs-c&#34;&gt;Java VS C#&lt;/h4&gt;

&lt;p&gt;Beiden plaatsten objecten in een finalizer queue maar het uitvoeren hiervan is nooit gegarandeerd (crash process, iets anders dat kan gebeuren, &amp;hellip;). &lt;code&gt;IDisposable&lt;/code&gt; kan gebruikt worden om managed resources op te kuisen, &lt;strong&gt;maar moet manueel aangeroepen worden&lt;/strong&gt; door clients die dit object gebruiken - hier is ook nog niets van gegarandeerd! Behalve in een &lt;code&gt;using(obj) { }&lt;/code&gt; block - hierna wordt &lt;code&gt;Dispose()&lt;/code&gt; aangeroepen, ook als er ondertussen een of andere Exception opgetreden is. In Java 6 en lager moet je dit met &lt;code&gt;try { } finally { }&lt;/code&gt; manueel doen.&lt;/p&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://www.brainbaking.com/wiki/code/java/resources/&#34;&gt;java resources wiki pagina&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>linqtosql</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/linqtosql/</link>
      <pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/linqtosql/</guid>
      <description>

&lt;h1 id=&#34;code-csharp-linqtosql&#34;&gt;code:csharp &amp;gt;&amp;gt; Linqtosql&lt;/h1&gt;

&lt;p&gt;Zie ook &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb425822.aspx&#34;&gt;MSDN LinqToSql pagina&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;basic&#34;&gt;Basic&lt;/h2&gt;

&lt;p&gt;Principe is een &lt;strong&gt;DataContext&lt;/strong&gt; object aanmaken waar je je connectionstring aan meegeeft (&lt;code&gt;Log&lt;/code&gt; kan naar &lt;code&gt;Console.Out&lt;/code&gt; ofzo). Vanaf dan via het context object werken:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;context.GetTable&amp;lt;T&amp;gt;().Where(t ######&amp;gt; t.Property  x).ToList()&lt;/code&gt; om te queryen&lt;/li&gt;
&lt;li&gt;bij deleten of wijzigen: &lt;code&gt;.Attach(entity)&lt;/code&gt; en &lt;code&gt;.DeleteOnSubmit(entity)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Modellen: annoteren met &lt;code&gt;[Table(Name######&amp;quot;tabelnaam&amp;quot;)]&lt;/code&gt;, kolommen met &lt;code&gt;[Column(Name&amp;quot;kolomnaam&amp;quot;, IsPrimaryKey ###### true, IsDbGenerated  true)]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Wijzigingen doorvoeren met &lt;code&gt;SubmitChanges()&lt;/code&gt; door simpelweg properties van modellen te wijzigen, zoals een &amp;ldquo;echte&amp;rdquo; ER tool.&lt;/p&gt;

&lt;h2 id=&#34;advanced&#34;&gt;Advanced&lt;/h2&gt;

&lt;h4 id=&#34;manytoone-relaties-en-domain-driven-design&#34;&gt;ManyToOne relaties en domain driven design&lt;/h4&gt;

&lt;p&gt;In het model: &lt;code&gt;[Association(ThisKey ###### &amp;quot;ReferenceId&amp;quot;, IsForeignKey  true)]&lt;/code&gt; attribuut toevoegen.&lt;/p&gt;

&lt;p&gt;Als je een Fetch wil doen en associaties ook wenst op te halen moet je dit &lt;strong&gt;altijd meegeven&lt;/strong&gt;: &lt;code&gt;new DataLoadOptions().LoadWith&amp;lt;T&amp;gt;(t =&amp;gt; t.AssociationProperty)&lt;/code&gt;. Ook deze loadoptions meegeven aan de context.&lt;/p&gt;

&lt;p&gt;Indien dit overgeslagen wordt, zal bij een ToList in LINQ die property niet opgehaald worden. Dit is vervelend om elke keer mee te geven - kan ook generiek, bijvoorbeeld zo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        private static void AddLoadOptions&amp;lt;T&amp;gt;(DataContext context) where T : class, new()
        {
            if (IsAssociation&amp;lt;T&amp;gt;())
            {
                var loadOps = new DataLoadOptions();
                ((IAssociationModel)new T()).AssociationsToLoad(loadOps);
                context.LoadOptions = loadOps;
            }
        }

        private static bool IsAssociation&amp;lt;T&amp;gt;() where T : class, new()
        {
            return typeof(IAssociationModel).IsAssignableFrom(typeof(T));
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;AddLoadOptions&lt;/code&gt; altijd aanroepen wanneer een fetch in een repository zou gebeuren. Dit zit er op de interface:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public interface IAssociationModel
    {
        IList&amp;lt;object&amp;gt; AssocationsToAttach();

        void AssociationsToLoad(DataLoadOptions loadOps);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zo kan iedere entiteit zijn eigen &lt;code&gt;LoadWith&lt;/code&gt; oproepen.&lt;/p&gt;

&lt;h4 id=&#34;transacties&#34;&gt;Transacties&lt;/h4&gt;

&lt;p&gt;Gebruik &lt;code&gt;TransactionScope&lt;/code&gt; object, aanmaken voor je iets doet en &lt;code&gt;.Complete()&lt;/code&gt; of &lt;code&gt;.Dispose()&lt;/code&gt; oproepen. &lt;br/&gt;&lt;br/&gt;
Om dit niet de helel tidj zelf te moeten beheren, complexiteit opbergen in een basis Repository klasse, zoiets:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;            using (var repo = Repository.Instance.Transactional())
            {
               Fetch(); // ...
               Delete(); 
               // ...
            }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;om dan in de &lt;code&gt;Dispose()&lt;/code&gt; de transactie te completen. De transactionele method maakt een scope aan.&lt;/p&gt;

&lt;h2 id=&#34;compleet-voorbeeld-repository&#34;&gt;Compleet voorbeeld repository&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-chsarp&#34;&gt;    public class Repository : IRepository
    {
        private readonly string _ConnectionString;

        private DataContext _CurrentContext;
        private TransactionScope _TransactionScope;

        public Repository(string connectionString)
        {
            _ConnectionString = connectionString;
        }

        private Repository(Repository baseRepo)
            : this(baseRepo._ConnectionString)
        {
            _CurrentContext = CreateContext();
            _TransactionScope = new TransactionScope();
        }

        public static IRepository Instance { get; set; }

        private bool InTransaction
        {
            get { return _TransactionScope != null; }
        }

        public void Add&amp;lt;T&amp;gt;(T entity) where T : class, new()
        {
            InContext(context =&amp;gt;
            {
                var table = context.GetTable&amp;lt;T&amp;gt;();

                if (IsAssociation&amp;lt;T&amp;gt;())
                {
                    foreach (var toAttach in ((IAssociationModel)entity).AssocationsToAttach())
                    {
                        context.GetTable(toAttach.GetType()).Attach(toAttach);
                    }
                }
                table.InsertOnSubmit(entity);
            });
        }

        public void Add&amp;lt;T&amp;gt;(IEnumerable&amp;lt;T&amp;gt; entities) where T : class
        {
            InContext(context =&amp;gt; context.GetTable&amp;lt;T&amp;gt;().InsertAllOnSubmit(entities));
        }

        public void CommitChanges&amp;lt;T&amp;gt;(T entity) where T : class
        {
            InContext(context =&amp;gt;
            {
                var entityTable = context.GetTable&amp;lt;T&amp;gt;();
                if (!InTransaction)
                {
                    entityTable.Attach(entity);
                }
                context.Refresh(RefreshMode.KeepCurrentValues, entity);
            });
        }

        public int Count&amp;lt;T&amp;gt;(ICanModifyIQueryable&amp;lt;T&amp;gt; queryModifier) where T : class, new()
        {
            return InContext(context =&amp;gt;
            {
                AddLoadOptions&amp;lt;T&amp;gt;(context);

                IQueryable&amp;lt;T&amp;gt; list = context.GetTable&amp;lt;T&amp;gt;();

                list = queryModifier.ModifyForCount(list);

                return list.Count();
            });
        }

        public void Delete&amp;lt;T&amp;gt;(T entity) where T : class
        {
            InContext(context =&amp;gt;
            {
                var entityTable = context.GetTable&amp;lt;T&amp;gt;();
                if (!InTransaction)
                {
                    entityTable.Attach(entity);
                }
                entityTable.DeleteOnSubmit(entity);
            });
        }

        public void Dispose()
        {
            CompleteTransaction();
        }

        public List&amp;lt;T&amp;gt; Fetch&amp;lt;T&amp;gt;() where T : class, new()
        {
            return InContext(context =&amp;gt;
            {
                AddLoadOptions&amp;lt;T&amp;gt;(context);
                return context.GetTable&amp;lt;T&amp;gt;().ToList();
            });
        }

        public List&amp;lt;T&amp;gt; FetchBy&amp;lt;T&amp;gt;(Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; whereClause) where T : class, new()
        {
            return InContext(context =&amp;gt;
            {
                AddLoadOptions&amp;lt;T&amp;gt;(context);

                return context.GetTable&amp;lt;T&amp;gt;()
                    .Where(whereClause)
                    .ToList();
            });
        }

        public List&amp;lt;T&amp;gt; FetchBy&amp;lt;T&amp;gt;(ICanModifyIQueryable&amp;lt;T&amp;gt; queryModifier) where T : class, new()
        {
            return InContext(context =&amp;gt;
            {
                AddLoadOptions&amp;lt;T&amp;gt;(context);

                IQueryable&amp;lt;T&amp;gt; list = context.GetTable&amp;lt;T&amp;gt;();

                list = queryModifier.Modify(list);

                return list.ToList();
            });
        }

        public IRepository Transactional()
        {
            return new Repository(this);
        }

        private static void AddLoadOptions&amp;lt;T&amp;gt;(DataContext context) where T : class, new()
        {
            if (IsAssociation&amp;lt;T&amp;gt;())
            {
                var loadOps = new DataLoadOptions();
                ((IAssociationModel)new T()).AssociationsToLoad(loadOps);
                context.LoadOptions = loadOps;
            }
        }

        private static bool IsAssociation&amp;lt;T&amp;gt;() where T : class, new()
        {
            return typeof(IAssociationModel).IsAssignableFrom(typeof(T));
        }

        private void CompleteTransaction()
        {
            if (_CurrentContext ###### null || !InTransaction)
            {
                return;
            }

            try
            {
                _CurrentContext.SubmitChanges();
                _TransactionScope.Complete();
            }
            finally
            {
                _TransactionScope.Dispose();
                _CurrentContext.Dispose();

                _TransactionScope = null;
                _CurrentContext = null;
            }
        }

        private DataContext CreateContext()
        {
            return new DataContext(_ConnectionString) { Log = Console.Out };
        }

        private void InContext(Action&amp;lt;DataContext&amp;gt; action)
        {
            InContext(context =&amp;gt;
            {
                action(context);
                return true;
            });
        }

        private T InContext&amp;lt;T&amp;gt;(Func&amp;lt;DataContext, T&amp;gt; action)
        {
            var context = _CurrentContext;
            var newContext = false;

            if (context ###### null)
            {
                context = CreateContext();
                newContext = true;
            }

            try
            {
                //      context.Log = Console.Out;
                var value = action(context);
                if (newContext)
                {
                    context.SubmitChanges();
                }
                return value;
            }
            finally
            {
                if (newContext)
                {
                    context.Dispose();
                }
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>persistence</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/persistence/</link>
      <pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/persistence/</guid>
      <description>

&lt;h1 id=&#34;persistence&#34;&gt;Persistence&lt;/h1&gt;

&lt;h2 id=&#34;nhibernate&#34;&gt;NHibernate&lt;/h2&gt;

&lt;h3 id=&#34;second-level-caching&#34;&gt;Second level caching&lt;/h3&gt;

&lt;p&gt;Gebruik &lt;a href=&#34;http://www.codeproject.com/Articles/529016/NHibernate-Second-Level-Caching-Implementation&#34;&gt;SysCache2&lt;/a&gt; voor Web projecten. Hoe enablen? DLL ref + in config:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;            Configuration.SessionFactory().Caching.Through&amp;lt;SysCacheProvider&amp;gt;().WithDefaultExpiration(60);
            Configuration.SetProperty(Environment.UseSecondLevelCache, &amp;quot;true&amp;quot;);
            Configuration.SetProperty(Environment.UseQueryCache, &amp;quot;true&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In hbm mappings moet je entiteiten cache-baar markeren (read-only, read-write, &amp;hellip; zie docs) met &lt;code&gt;&amp;lt;cache usage=&amp;quot;read-write&amp;quot; /&amp;gt;&lt;/code&gt;. Vanaf dan kan je aan Criteria of LINQ queries dingen doen als:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Session.Query&amp;lt;Obj&amp;gt;().Cachable().List()&lt;/code&gt; of&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Session.CreateCriteria&amp;lt;Obj&amp;gt;().SetCachable(true)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Groeperen in &amp;ldquo;regions&amp;rdquo; is ook mogelijk, mee te geven met criteria.&lt;/p&gt;

&lt;h4 id=&#34;clearing-everything&#34;&gt;Clearing everything&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;            SessionFactory.EvictQueries();
            foreach (var collectionMetadata in SessionFactory.GetAllCollectionMetadata())
                SessionFactory.EvictCollection(collectionMetadata.Key);
            foreach (var classMetadata in SessionFactory.GetAllClassMetadata())
                SessionFactory.EvictEntity(classMetadata.Key);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;using-regions&#34;&gt;Using regions&lt;/h4&gt;

&lt;p&gt;Sectie toevoegen in &lt;code&gt;configSections&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;section name######&amp;quot;syscache2&amp;quot; type&amp;quot;NHibernate.Caches.SysCache2.SysCacheSection, NHibernate.Caches.SysCache2&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En dan dit stuk bijvoorbeeld om syscache2 te configureren:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;syscache2&amp;gt;
    &amp;lt;cacheRegion name######&amp;quot;RegionName&amp;quot; priority&amp;quot;High&amp;quot;&amp;gt;
      &amp;lt;dependencies&amp;gt;
        &amp;lt;commands&amp;gt;
          &amp;lt;add name=&amp;quot;test&amp;quot;
            command=&amp;quot;Select col from dbo.[Table]&amp;quot;
            connectionName=&amp;quot;default&amp;quot;
            connectionStringProviderType=&amp;quot;Utilities.Connection.SysCache2ConnectionStringProvider, PFW.Utilities&amp;quot;/&amp;gt;
        &amp;lt;/commands&amp;gt;
      &amp;lt;/dependencies&amp;gt;
    &amp;lt;/cacheRegion&amp;gt;
  &amp;lt;/syscache2&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Queries en entiteiten laten cachen via die naam.&lt;/p&gt;

&lt;p&gt;Er is een standaard connectionStringProvider die uit het &lt;code&gt;connectionStrings&lt;/code&gt; stuk uit de web/app.config uw string uitleest geïmplementeerd: &lt;code&gt;ConfigConnectionStringProvider&lt;/code&gt;. Indien iets custom nodig zoals in bovenstaand voorbeeld, afleiden van &lt;code&gt;IConnectionStringProvider&lt;/code&gt; en zelf de connectionstring voorzien (connectionName wordt als parameter meegegeven maar is in dit geval nutteloos).&lt;/p&gt;

&lt;p&gt;Op database niveau moet je ook nog een aantal dingen nagaan:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is de dbo user eigenaar van de database voor het region command uit te voeren? (&lt;code&gt;use [DbName] EXEC sp_changedbowner &#39;sa&lt;/code&gt;&amp;rsquo;)&lt;/li&gt;
&lt;li&gt;Is de broker service actief? Indien neen zet aan, zie &lt;a href=&#34;http://www.brainbaking.com/wiki/code/db/mssql/&#34;&gt;code/db/mssql&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;linq-or-queries-schrijven&#34;&gt;LINQ OR queries schrijven&lt;/h3&gt;

&lt;p&gt;AND queries zijn makkelijk te schrijven met &lt;code&gt;.Where()&lt;/code&gt; chaining in LINQ. Hoe doe je dit met SQL ORs? Met de PredicateBuilder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    /// &amp;lt;summary&amp;gt;
    */ http:*www.albahari.com/nutshell/predicatebuilder.aspx
    /// &amp;lt;/summary&amp;gt;
    public static class PredicateBuilder
    {
        public static Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; And&amp;lt;T&amp;gt;(this Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expr1,
            Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expr2)
        {
            var invokedExpr = Expression.Invoke(expr2, expr1.Parameters);
            return Expression.Lambda&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt;
                (Expression.AndAlso(expr1.Body, invokedExpr), expr1.Parameters);
        }

        public static Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; False&amp;lt;T&amp;gt;()
        {
            return f =&amp;gt; false;
        }

        public static Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; Or&amp;lt;T&amp;gt;(this Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expr1,
            Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; expr2)
        {
            var invokedExpr = Expression.Invoke(expr2, expr1.Parameters);
            return Expression.Lambda&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt;
                (Expression.OrElse(expr1.Body, invokedExpr), expr1.Parameters);
        }

        public static Expression&amp;lt;Func&amp;lt;T, bool&amp;gt;&amp;gt; True&amp;lt;T&amp;gt;()
        {
            return f =&amp;gt; true;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;            var pred = PredicateBuilder.False&amp;lt;IOccupation&amp;gt;();
            pred ###### pred.Or(occ &amp;gt; new List&amp;lt;decimal&amp;gt;() {1, 2}.Contains(occ.Id));
            pred ###### pred.Or(occ &amp;gt; new List&amp;lt;decimal&amp;gt;() {1, 2}.Contains(occ.Id));
            Session.Query&amp;lt;IOccupation&amp;gt;()
                .Where(pred)
                .ToList();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sessie-contexten&#34;&gt;Sessie contexten&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.nhforge.org/doc/nh/en/index.html#architecture-current-session&#34;&gt;Current session architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Te mappen in xml:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;property name=&amp;quot;current_session_context_class&amp;quot;&amp;gt;thread_static&amp;lt;/property&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zelf te (un-)binden via:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;            var session = sessionFactory.OpenSession();
            if (!CurrentSessionContext.HasBind(sessionFactory))
            {
                CurrentSessionContext.Bind(session);
            }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dan kan je &lt;code&gt;SessionFactory.GetCurrentSession()&lt;/code&gt; gebruiken.&lt;/p&gt;

&lt;p&gt;Een typische manier van werken is session-per-request, in begin van request een sessie openen &amp;amp; binden, en op het einde sluiten. Dit zorgt voor problemen bij asynchrone calls omdat de sessie gebind wordt op &lt;code&gt;HttpContext&lt;/code&gt; die dan uiteraard verdwenen is. Een tussenoplossing is werken met een hybride sessie context: gebruik de HTTP context indien mogelijk, werk anders met een &lt;code&gt;ThreadStatic&lt;/code&gt; variabele. Bijvoorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class HybridWebSessionContext : WebSessionContext
    {
        private const string _SessionFactoryMapKey = &amp;quot;NHibernate.Context.WebSessionContext.SessionFactoryMapKey&amp;quot;;

        [ThreadStatic]
        private static IDictionary _ThreadSessionMap;

        private ISession ThreadSession
        {
            set
            {
                if (_ThreadSessionMap ###### null)
                {
                    _ThreadSessionMap = new Dictionary&amp;lt;ISessionFactoryImplementor, ISession&amp;gt;();
                }
                if (value ###### null)
                {
                    _ThreadSessionMap.Remove(_Factory);
                }
                else
                {
                    _ThreadSessionMap[_Factory] = value;
                }
            }
        }

        private readonly ISessionFactoryImplementor _Factory;

        // This constructor should be kept, otherwise NHibernate will fail to create an instance of this class.
        public HybridWebSessionContext(ISessionFactoryImplementor factory) : base(factory)
        {
            _Factory = factory;
        }

        protected override IDictionary GetMap()
        {
            var currentContext = ReflectiveHttpContext.HttpContextCurrentGetter();
            if (currentContext != null)
            {
                return ReflectiveHttpContext.HttpContextCurrentItems[_SessionFactoryMapKey] as IDictionary;
            }

            return _ThreadSessionMap;
        }

        protected override ISession Session
        {
            set
            {
                base.Session = value;
                ThreadSession = value;
            }
        }

        protected override void SetMap(IDictionary value)
        {
            var currentContext = ReflectiveHttpContext.HttpContextCurrentGetter();
            
            if (currentContext != null)
            {
                ReflectiveHttpContext.HttpContextCurrentItems[_SessionFactoryMapKey] = value;
                return;
            }
            _ThreadSessionMap = value;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Die dan in de hibernate config injecteren:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;configuration.SetProperty(NHibernate.Cfg.Environment.CurrentSessionContextClass, typeof(HybridWebSessionContext).AssemblyQualifiedName);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Op die manier werkt &lt;code&gt;Bind()&lt;/code&gt; altijd.&lt;/p&gt;

&lt;p&gt;❗ Geen sessie factory sluiten op het einde van de request maar enkel de &lt;code&gt;ISession&lt;/code&gt; - uw pooling zit in de factory!&lt;/p&gt;

&lt;p&gt;############ Transacties ############&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mattwrock.com/post/2010/12/26/Getting-TransactionScope-to-play-nice-with-NHibernate.aspx&#34;&gt;Getting TransactionScope to play nice with NHibernate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thatextramile.be/blog/2008/10/batching-nhibernates-dm-statements/&#34;&gt;Batching NHibernate&amp;rsquo;s DML Statements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ayende.com/blog/3987/nhibernate-ipreupdateeventlistener-ipreinserteventlistener&#34;&gt;NHibernate IPreUpdateEventListener &amp;amp; IPreInsertEventListener&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;######= Multiple nested transactions ######=&lt;/p&gt;

&lt;p&gt;is &lt;strong&gt;niet&lt;/strong&gt; mogelijk in NHibernate! Hier kan je rond werken door een dummy te retourneren (wel &lt;code&gt;ISession.BeginTransaction()&lt;/code&gt; decoreren op de onderstaande manier)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        public ITransaction BeginTransaction()
        {
            if (_Session.Transaction.IsActive)
            {
                // bad programmer&#39;s code, nice going. nested transactions are not supported in NHibernate! 
                * see http:*rajputyh.blogspot.be/2011/02/nested-transaction-handling-with.html and http://stackoverflow.com/questions/1192111/how-do-i-do-nested-transactions-in-nhibernate
                return new HibernateTransactionDummy();
            }

            var newTransaction = _Session.BeginTransaction();
            return newTransaction;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;######= Locking ######=&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ayende.com/blog/3946/nhibernate-mapping-concurrency&#34;&gt;NHibernate mapping &amp;amp; concurrency&lt;/a&gt; - pessimistic locking kan gedaan worden door in een query de &lt;code&gt;LockMode&lt;/code&gt; mee te geven:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var person = session.Get&amp;lt;Person&amp;gt;(1,LockMode.Upgrade);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Binnen een transactie uiteraard. Dit genereert &lt;code&gt;with(updlock, rowlock)&lt;/code&gt; in de &lt;code&gt;SELECT&lt;/code&gt; statements. De lock wordt gereleased wanneer de transactie gecommit wordt. Dit is &lt;a href=&#34;http://stackoverflow.com/questions/19873880/understanding-effects-of-with-updlock-rowlock-on-a-query-in-sql-server&#34;&gt;blijkbaar geen table lock&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;updlock&lt;/code&gt; will place update locks on every row being touched (selected) - so this means until the end of the transaction (explicit or implicit), the row(s) touched by the SELECT will have an update lock on them which allows for other transactions to read, but not update or delete the row. The &lt;code&gt;rowlock&lt;/code&gt; just indicates that you want row-level locks instead of page or table locks. That lock makes sense if you need to select first, then update a row within the same explicit transaction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It doesn&amp;rsquo;t make it run any faster, and can cause other transactions to be blocked&lt;/p&gt;

&lt;p&gt;############ Event listeners ############&lt;/p&gt;

&lt;p&gt;❗ in events als &lt;code&gt;IPreInsertEventListener&lt;/code&gt; moet je zowel het object (via &lt;code&gt;@Event.Entity&lt;/code&gt;) als de state (via &lt;code&gt;@Event.State&lt;/code&gt;) wijzigen. Hoe werkt dit met &lt;code&gt;IPersistEventListener&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Custom event listener die de Java annotaties zoals &lt;code&gt;@PrePersist&lt;/code&gt; ea mogelijk maakt in C# met attributes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class HibernateAttributeEventListener : IPreUpdateEventListener, IPreInsertEventListener, IPersistEventListener, IFlushEntityEventListener
    {
        public bool OnPreUpdate(PreUpdateEvent @event)
        {
            InvokeMethodsWithAttribute(@event.Entity, @event.Session, typeof(PreUpdate));
            return false;
        }

        public bool OnPreInsert(PreInsertEvent @event)
        {
            InvokeMethodsWithAttribute(@event.Entity, @event.Session, typeof(PreInsert));
            return false;
        }

        public void OnPersist(PersistEvent @event)
        {
            InvokeMethodsWithAttribute(@event.Entity, @event.Session, typeof(PrePersist));
        }

        public void OnPersist(PersistEvent @event, IDictionary createdAlready)
        {
        }

        public void OnFlushEntity(FlushEntityEvent @event)
        {
        }

        private static void InvokeMethodsWithAttribute(object entity, ISession session, Type attributeType)
        {
            entity.GetType()
                .GetMethods()
                .Where(method =&amp;gt; method.GetCustomAttributes(attributeType, false).Length &amp;gt; 0)
                .ForEach(method =&amp;gt; Invoke(entity, session, method));
        }

        private static void Invoke(object entity, ISession session, MethodInfo method)
        {
            var parameters = method.GetParameters();
            if (parameters.Length ###### 0)
            {
                method.Invoke(entity, new object[] {});
            } else if (parameters.Length ###### 1 &amp;amp;&amp;amp; parameters[0].ParameterType ###### typeof (ISession))
            {
                method.Invoke(entity, new object[] {session});
            }
            else
            {
                throw new ArgumentException(&amp;quot;Error while invoking attribute event method, only 0 or 1 params (ISession) is supported!&amp;quot;);
            }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dit kan je dan aan de config hangen met &lt;code&gt;_Configuration.EventListeners.PreInsertEventListeners = new IPreInsertEventListener[] {new HibernateAttributeEventListener()};&lt;/code&gt; - moet per type listener dat je wenst te gebruiken. De attributes zijn zo gedefiniëerd (enkel op method):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    [AttributeUsage(AttributeTargets.Method)]
    public class PrePersist : Attribute
    {
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;❗ Indien state wijzigt in &lt;code&gt;PrePersist&lt;/code&gt; of &lt;code&gt;PreUpdate&lt;/code&gt; moet je ook de @event.State wijzigen, naast de state van het object zelf.&lt;/p&gt;

&lt;p&gt;Voor details zie &lt;a href=&#34;http:*ayende.com/blog/3987/nhibernate-ipreupdateeventlistener-ipreinserteventlistener&#34;&gt;http:*ayende.com/blog/3987/nhibernate-ipreupdateeventlistener-ipreinserteventlistener&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Een manier is bvb om dirty field checks te doen met reflectie:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        public static Dictionary&amp;lt;string, object&amp;gt; GetFieldValues(this Type type, object obj)
        {
            return type.GetProperties().ToDictionary(
                property =&amp;gt; property.Name,
                property =&amp;gt; property.GetValue(obj, null));
        }

        private static void Set(IEntityPersister persister, object[] state, string propertyName, object value)
        {
            var index = Array.IndexOf(persister.PropertyNames, propertyName);
            if (index ###### -1)
                return;
            state[index] = value;
        }

// ...
var initialFieldValues = @event.Entity.GetType().GetFieldValues(@event.Entity);
// invoke [makes some fields dirty]
UpdateDirtyFieldValuesInState(@event, state, initialFieldValues);

        private static void UpdateDirtyFieldValuesInState(AbstractPreDatabaseOperationEvent @event, object[] state, Dictionary&amp;lt;string, object&amp;gt; initialFieldValues)
        {
            foreach (var actualValue in @event.Entity.GetType().GetFieldValues(@event.Entity))
            {
                if (!Equals(initialFieldValues[actualValue.Key], actualValue.Value))
                {
                    Set(@event.Persister, state, actualValue.Key, actualValue.Value);
                }
            }
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;############ Identity generators ############&lt;/p&gt;

&lt;p&gt;❗ &lt;code&gt;identity&lt;/code&gt; gebruikt de native autoincrement aan de DB maar is helemaal niet performant, maakt &lt;code&gt;batch_size&lt;/code&gt; redundant - veel roundtrips nodig. Een alternatief bijvoorbeeld:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://daniel.wertheim.se/2011/03/08/nhibernate-custom-id-generator/&#34;&gt;NHibernate – Custom Id-generator based on hilo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Zie ook &lt;a href=&#34;http://docs.jboss.org/hibernate/orm/3.3/reference/en/html/mapping.html&#34;&gt;Hibernate doc: mappings&lt;/a&gt; voor alle mogelijkheden.&lt;/p&gt;

&lt;p&gt;Een custom generator die een tabel gebruikt met een kolom die de entity weergeeft werkt zo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class NHibIdGenerator : TableHiLoGenerator
    {
        public override void Configure(IType type, IDictionary&amp;lt;string, string&amp;gt; parms, Dialect dialect)
        {
            if (!parms.ContainsKey(&amp;quot;table&amp;quot;))
                parms.Add(&amp;quot;table&amp;quot;, &amp;quot;NHibHiLoIdentities&amp;quot;);

            if (!parms.ContainsKey(&amp;quot;column&amp;quot;))
                parms.Add(&amp;quot;column&amp;quot;, &amp;quot;NextHiValue&amp;quot;);

            if (!parms.ContainsKey(&amp;quot;max_lo&amp;quot;))
                parms.Add(&amp;quot;max_lo&amp;quot;, &amp;quot;100&amp;quot;);

            if (!parms.ContainsKey(&amp;quot;where&amp;quot;))
                parms.Add(&amp;quot;where&amp;quot;, string.Format(&amp;quot;EntityName=&#39;{0}&#39;&amp;quot;, parms[&amp;quot;target_table&amp;quot;]));

            base.Configure(type, parms, dialect);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En dan in de hibernate mapping:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;    &amp;lt;id name######&amp;quot;Id&amp;quot; column&amp;quot;`id`&amp;quot;&amp;gt;
      &amp;lt;generator class=&amp;quot;Utilities.Database.NHibIdGenerator, Utilities&amp;quot; /&amp;gt;
    &amp;lt;/id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Na de komma staat de full-qualified assembly.&lt;/p&gt;

&lt;p&gt;############ Probleemoplossing ############&lt;/p&gt;

&lt;h6 id=&#34;can-only-generate-ids-as-part-of-bulk-insert-with-either-sequence-or-post-insert-style-generators&#34;&gt;can only generate ids as part of bulk insert with either sequence or post-insert style generators&lt;/h6&gt;

&lt;p&gt;Identity generator voor die bepaalde tabel moet een custom post-insert generator zijn (zoals bovenstaande &lt;code&gt;hilo&lt;/code&gt; generator). Waarom? Dit gaat:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;eerst in bluk inserts doen&lt;/li&gt;
&lt;li&gt;dan in bulk ids bepalen afhankelijk van custom generator (bvb tabel met next id)&lt;/li&gt;
&lt;li&gt;dan in bulk update uitvoeren om id te plaatsten in db&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dit betekent ook dat de ID kolom nullable moet zijn en er geen native generator in de weg mag zitten.&lt;/p&gt;

&lt;h6 id=&#34;there-is-already-an-open-datareader-associated-with-this-connection-which-must-be-closed-first&#34;&gt;There is already an open DataReader associated with this Connection which must be closed first&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;Exception: 
Exception has been thrown by the target of an invocation.
Inner Exception: 
MySql.Data.MySqlClient.MySqlException (0x80004005): There is already an open DataReader associated with this Connection which must be closed first. at MySql.Data.MySqlClient.ExceptionInterceptor.Throw(Exception exception) at MySql.Data.MySqlClient.MySqlCommand.Throw(Exception ex) at MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior) at MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery() at MySql.Data.MySqlClient.MySqlTransaction.Rollback() at NHibernate.Transaction.AdoTransaction.Dispose(Boolean isDisposing) in d:&amp;lt;br/&amp;gt;BuildAgents&amp;lt;br/&amp;gt;BuildAgentTwo&amp;lt;br/&amp;gt;work&amp;lt;br/&amp;gt;9126a46c2421d993&amp;lt;br/&amp;gt;PFW.Base&amp;lt;br/&amp;gt;NHibernate&amp;lt;br/&amp;gt;Transaction&amp;lt;br/&amp;gt;AdoTransaction.cs:line 368 at NHibernate.Transaction.AdoTransaction.Dispose() in d:&amp;lt;br/&amp;gt;BuildAgents&amp;lt;br/&amp;gt;BuildAgentTwo&amp;lt;br/&amp;gt;work&amp;lt;br/&amp;gt;9126a46c2421d993&amp;lt;br/&amp;gt;PFW.Base&amp;lt;br/&amp;gt;NHibernate&amp;lt;br/&amp;gt;Transaction&amp;lt;br/&amp;gt;AdoTransaction.cs:line 340 at 
...

Exception:Exception has been thrown by the target of an invocation.Inner Exception:System.InvalidOperationException: There is already an open DataReader associated with this Command which must be closed first. at System.Data.SqlClient.SqlInternalConnectionTds.ValidateConnectionForExecute(SqlCommand command) at System.Data.SqlClient.SqlInternalTransaction.Rollback() at System.Data.SqlClient.SqlInternalTransaction.Dispose(Boolean disposing) at System.Data.SqlClient.SqlTransaction.Dispose(Boolean disposing) at NHibernate.Transaction.AdoTransaction.Dispose(Boolean isDisposing) at PFW.Utilities.Layers.ServiceLayer.TransactionalAttribute.OnExit(MethodExecutionArgs args) at ServiceLayer.Person.PersonBaseSL.Persist(IPersonBase person) at FacadeLayer.Person.PersonBaseRF.Persist(HttpRequest request)  Exception:Exception has been thrown by the target of an invocation.Inner Exception:System.InvalidOperationException: There is already an open DataReader associated with this Command which must be closed first. at System.Data.SqlClient.SqlInternalConnectionTds.ValidateConnectionForExecute(SqlCommand command) at System.Data.SqlClient.SqlInternalTransaction.Rollback() at System.Data.SqlClient.SqlInternalTransaction.Dispose(Boolean disposing) at System.Data.SqlClient.SqlTransaction.Dispose(Boolean disposing) at NHibernate.Transaction.AdoTransaction.Dispose(Boolean isDisposing) at
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Als we kijken in de code van &lt;code&gt;MySqlCommand&lt;/code&gt; vinden we:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    private void CheckState()
    {
      if (this.connection ###### null)
        this.Throw((Exception) new InvalidOperationException(&amp;quot;Connection must be valid and open.&amp;quot;));
      if (this.connection.State != ConnectionState.Open &amp;amp;&amp;amp; !this.connection.SoftClosed)
        this.Throw((Exception) new InvalidOperationException(&amp;quot;Connection must be valid and open.&amp;quot;));
      if (!this.connection.IsInUse || this.internallyCreated)
        return;
      this.Throw((Exception) new MySqlException(&amp;quot;There is already an open DataReader associated with this Connection which must be closed first.&amp;quot;));
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;IsInUse&lt;/code&gt; wordt gezet in de setter van &lt;code&gt;Reader&lt;/code&gt; in &lt;code&gt;MySqlConnection&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Zowel in &lt;code&gt;MySqlClient&lt;/code&gt; als &lt;code&gt;SqlClient&lt;/code&gt;, dus client onafhankelijk&lt;/li&gt;
&lt;li&gt;Volgens google betekent dit dat we &lt;code&gt;ISession&lt;/code&gt; objecten delen over verschillende threads/requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;❗ Probleem was dat wij &lt;a href=&#34;http://www.postsharp.net/aspects/examples/transaction&#34;&gt;PostSharp&lt;/a&gt; gebruiken maar op de attribute class state bijhielden (de transactie zelf) om die bij onexit te kunnen committen. Andere users herbruiken diezelfde klasse blijkbaar, waarbij user1 transacties van user2 gaat committen etc. Correcte implementatie - zie link postsharp als voorbeeld; of:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    [Serializable]
    public class TransactionalAttribute : OnMethodBoundaryAspect
    {
        public override void OnEntry(MethodExecutionArgs args)
        {
            NHibernateFactory.CurrentSession.BeginTransaction();
            base.OnEntry(args);
        }

        public override void OnExit(MethodExecutionArgs args)
        {
            NHibernateFactory.CurrentSession.Transaction.Dispose();
            base.OnExit(args);
        }

        public override void OnSuccess(MethodExecutionArgs args)
        {
            NHibernateFactory.CurrentSession.Transaction.Commit();
            base.OnSuccess(args);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Blijkbaar mag ook &lt;code&gt;MethodExecutionArgs&lt;/code&gt; gebruikt worden om tijdelijk state in te storen die je bij &lt;code&gt;OnExit()&lt;/code&gt; terug kan resolven - zie voorbeeld op de &lt;a href=&#34;http://www.postsharp.net/aspects/examples/transaction&#34;&gt;PostSharp website&lt;/a&gt;.&lt;/p&gt;

&lt;h6 id=&#34;detached-entity-passed-to-persist-in-een-test&#34;&gt;Detached entity passed to persist (in een test)&lt;/h6&gt;

&lt;p&gt;Uw Id niet zelf meegeven, steekt een generator in uw mapping&amp;hellip;&lt;/p&gt;

&lt;h6 id=&#34;system-argumentoutofrangeexception-index-was-out-of-range-must-be-non-negative-and-less-than-the-size-of-the-collection&#34;&gt;System.ArgumentOutOfRangeException : Index was out of range. Must be non-negative and less than the size of the collection.&lt;/h6&gt;

&lt;p&gt;Oplossing: in hibernate mapping file staan twee keer kolommen gedefiniëerd (eventueel onder een &lt;code&gt;composite-id&lt;/code&gt;) - deze moet &lt;code&gt;update&lt;/code&gt; en &lt;code&gt;insert&lt;/code&gt; attributes op &lt;code&gt;false&lt;/code&gt; hebben, of niet dubbel gemapped worden, hier kan Hibernate blijkbaar niet mee om gaan&amp;hellip;&lt;/p&gt;

&lt;h6 id=&#34;no-data-type-for-node-entityproperty&#34;&gt;No data type for node [entityProperty]&lt;/h6&gt;

&lt;p&gt;Bij een &lt;code&gt;HQL&lt;/code&gt; query, wanneer je meer dan 8 properties select, &lt;strong&gt;moet&lt;/strong&gt; je een alias gebruiken:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select entity.one, entity.two, entity.three, ... from Entity entity where entity.Id in (10, 11)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;en dus niet&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select one, two, three from Entity where Id in (10, 11)
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;the-multi-part-identifier-occupation0-functieid-could-not-be-bound&#34;&gt;The multi-part identifier &amp;ldquo;occupation0_.functieid&amp;rdquo; could not be bound.&lt;/h6&gt;

&lt;p&gt;Impliciete en expliciete joins worden gemixed in uw select statement (al dan niet gewild door NHibernate). Probleem:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT tbl1.col1, tbl2.col2, tbl3.col3
FROM tbla tbl1, tblb tbl2
   INNER JOIN tblc tbl3 on tbl1.joincol = tbl1.joincol
WHERE tbl1.joincol2 = tbl2.joincol2
AND tbl2.joincol3 = tbl3.joincol3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;er wordt zowel met &lt;code&gt;INNER JOIN&lt;/code&gt; als met &lt;code&gt;WHERE&lt;/code&gt; een join gelegd naar andere tabellen. In MSSQL geeft dit problemen (sommige andere DBs niet?). Mogelijke oplossingen in NHibernate:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Gebruik Criteria om alles expliciet te joinen (joepie&amp;hellip;)&lt;/li&gt;
&lt;li&gt;Selecteer in een LINQ query geen entiteit maar de Id en map die achteraf&lt;/li&gt;
&lt;/ol&gt;

&lt;h6 id=&#34;error-code-1054-unknown-column-personlite2-werknemerid-in-on-clause&#34;&gt;Error Code: 1054. Unknown column &amp;lsquo;personlite2_.WerknemerID&amp;rsquo; in &amp;lsquo;on clause&amp;rsquo;&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Multiple join in HQL die in de verkeerde volgorde staat? Draai &lt;code&gt;join x as y join y as z&lt;/code&gt; eens om, zodat de joins andersom gelegd worden.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Concreet voorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT col1, col2, col3 
FROM bliebloe
INNER JOIN tabel alias ON alias.x = bliebloe.y,
col4,
INNER JOIN tabel2 alias2 ON alias2.x = bliebloe.y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Zou moeten zijn:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT col1, col2, col3 
FROM bliebloe
INNER JOIN tabel alias ON alias.x = bliebloe.y,
INNER JOIN tabel2 alias2 ON alias2.x = bliebloe.y,
col4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maar hoe vertellen we &lt;code&gt;Hibernate&lt;/code&gt; dit? &lt;strong&gt;zet expliciete joins in uw HQL&lt;/strong&gt; in de gewenste volgorde:&lt;/p&gt;

&lt;p&gt;&amp;ldquo;select a.x, b.y, c.z
from a
join a.h as b
join a.i as c&amp;rdquo;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In MySQL: syntax join mixen ###### no go, zoals select * from table1, table2 where table1.id  table2.key join bla join blie - zowel met komma als met de join operator joinen. Doet Hibernate normaal niet.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>reflectie</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/reflectie/</link>
      <pubDate>Mon, 09 Feb 2015 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/reflectie/</guid>
      <description>

&lt;h1 id=&#34;reflectie&#34;&gt;Reflectie&lt;/h1&gt;

&lt;h2 id=&#34;get-type-based-on-string&#34;&gt;Get Type based on string&lt;/h2&gt;

&lt;p&gt;Probleem: een fully qualified classname in string vorm is geen &lt;code&gt;Type&lt;/code&gt; en &lt;code&gt;Type.GetType()&lt;/code&gt; gaat standaard in de huidige assembly kijken of die klasse daar in steekt. Hoe haal ik dit type op als ik niet vanbuiten weet in welke assembly ik moet gaan kijken? Via uw &lt;code&gt;AppDomain&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;                    return AppDomain.CurrentDomain.GetAssemblies()
                        .Single(app ######&amp;gt; app.GetType(fullClassName) ! null)
                        .GetType(fullClassName);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-subclasses-interfaces-of-class&#34;&gt;Get Subclasses/interfaces of class&lt;/h2&gt;

&lt;p&gt;Gebruik &lt;code&gt;type.Assembly.GetTypes()&lt;/code&gt; en filter verder.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Als je een &lt;strong&gt;interface&lt;/strong&gt; wil hebben, moet je &lt;code&gt;IsAssignableFrom()&lt;/code&gt; gebruiken (in de omgekeerde richting).&lt;/li&gt;
&lt;li&gt;Als je een &lt;strong&gt;subklasse&lt;/strong&gt; wil hebben, moet je ofwel de &lt;code&gt;.BaseType&lt;/code&gt; property gebruiken als direct kind, ofwel de &lt;code&gt;IsSubclassOf()&lt;/code&gt; method.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        public string HandleMessage(IHostService hostService)
        {
            var requestType = typeof (IHostServiceNativeRequest);
            var handlerType = requestType.Assembly.GetTypes()
                                         .Where(requestType.IsAssignableFrom)
                                         .Single(t ######&amp;gt; (NativeRequestInstance(t)).Key  Key);

            return NativeRequestInstance(handlerType).ParseRequest(hostService);
        }

        private IHostServiceNativeRequest NativeRequestInstance(Type t)
        {
            return (IHostServiceNativeRequest) Activator.CreateInstance(t);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;reflective-instantiation&#34;&gt;Reflective instantiation&lt;/h2&gt;

&lt;p&gt;Zie vorig voorbeeld; een nieuwe instantie van een &lt;code&gt;Type&lt;/code&gt; maken kan via &lt;code&gt;Activator.CreateInstance()&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;protected-constructor-with-arguments&#34;&gt;Protected constructor with arguments&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;            return (T)Activator.CreateInstance(typeof(T),
                BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance,
                null, new object[] { arg1 }, CultureInfo.CurrentCulture);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;appdomains&#34;&gt;AppDomains&lt;/h2&gt;

&lt;h5 id=&#34;q-ik-wil-een-dll-dynamisch-laden&#34;&gt;Q: Ik wil een DLL dynamisch laden&lt;/h5&gt;

&lt;p&gt;Gebruik &lt;code&gt;Assembly.LoadFrom(string)&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;q-ik-wil-loopen-over-alle-appdomains&#34;&gt;Q: Ik wil loopen over alle AppDomains&lt;/h5&gt;

&lt;p&gt;Niet zo simpel te realiseren: (zie &lt;a href=&#34;http:*stackoverflow.com/questions/14758915/get-all-processes-with-their-corresponding-app-domains&#34;&gt;http:*stackoverflow.com/questions/14758915/get-all-processes-with-their-corresponding-app-domains&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private static List&amp;lt;AppDomainInf&amp;gt; GetAppDomains()
    {
        IList&amp;lt;AppDomain&amp;gt; mAppDomainsList = new List&amp;lt;AppDomain&amp;gt;();
        List&amp;lt;AppDomainInf&amp;gt; mAppDomainInfos = new List&amp;lt;AppDomainInf&amp;gt;();

        IntPtr menumHandle = IntPtr.Zero;
        ICorRuntimeHost host = new CorRuntimeHost();

        try
        {
            host.EnumDomains(out menumHandle);
            object mTempDomain = null;

            //add all the current app domains running
            while (true)
            {
                host.NextDomain(menumHandle, out mTempDomain);
                if (mTempDomain ###### null) break;
                AppDomain tempDomain = mTempDomain as AppDomain;
                mAppDomainsList.Add((tempDomain));
            }

            //retrieve every app domains detailed information
            foreach (var appDomain in mAppDomainsList)
            {
                AppDomainInf domainInf = new AppDomainInf();

                domainInf.Assemblies = GetAppDomainAssemblies(appDomain);
                domainInf.AppDomainName = appDomain.FriendlyName;

                mAppDomainInfos.Add(domainInf);
            }

            return mAppDomainInfos;
        }
        catch (Exception)
        {
            throw; //rethrow
        }
        finally
        {
            host.CloseEnum(menumHandle);
            Marshal.ReleaseComObject(host);
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ref toevoegen, mscoree.tld in .NET root folder.&lt;/p&gt;

&lt;p&gt;############= Generic Type arguments &amp;amp; reflectie ############=&lt;/p&gt;

&lt;h6 id=&#34;q-ik-wil-een-type-meegeven-dat-moet-extenden-van-een-basisklasse-waarna-ik-dat-type-wil-instantiëren&#34;&gt;Q: Ik wil een Type meegeven dat moet extenden van een basisklasse, waarna ik dat type wil instantiëren.&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;protected IList&amp;lt;TInsertable&amp;gt; Load&amp;lt;TInsertable&amp;gt;() where TInsertable : DatabaseInsertable
{
    var myInstance = Activator.CreateInstance(typeof(TInsertable));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;❗ &lt;code&gt;Type&lt;/code&gt; zelf is niet generic omdat dit at-runtime gebruikt wordt voor typeinformatie en de andere dingen at-compiletime. Je kan dus geen &lt;code&gt;Type&amp;lt;T&amp;gt; where T : MyClass&lt;/code&gt; gebruiken, zoals in Java bijvoorbeeld &lt;code&gt;Class&amp;lt;? extends MyClass&amp;gt;&lt;/code&gt; gebruikt wordt. Merk op dat in Java er met het generic type argument geen klasse aangemaakt kan worden, zie &lt;a href=&#34;http://www.brainbaking.com/wiki/code/java/reflectie/&#34;&gt;code/java/reflectie&lt;/a&gt; voor java.&lt;/p&gt;

&lt;h6 id=&#34;q-ik-wil-een-variabel-aantal-generic-type-argumenten-definiëren&#34;&gt;Q: Ik wil een variabel aantal generic type argumenten definiëren&lt;/h6&gt;

&lt;p&gt;Genaaid, dit gaat niet. Kijk maar naar bijvoorbeeld &lt;code&gt;Func&amp;lt;&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Func&amp;lt;in T1, in T2, out Result&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Func&amp;lt;in T1, in T2, in T3, out Result&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Func&amp;lt;in T1, in T2, in T3, in T4, out Result&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Je kan die wel allemaal laten refereren naar één (private) methode die &lt;code&gt;params[]&lt;/code&gt; gebruikt, bijvoorbeeld onderstaande count:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        protected int Count&amp;lt;TInsertable&amp;gt;()
            where TInsertable : DatabaseInsertable
        {
            return Count(typeof (TInsertable));
        }

        protected int Count&amp;lt;TInsertable1, TInsertable2&amp;gt;()
            where TInsertable1 : DatabaseInsertable
            where TInsertable2 : DatabaseInsertable
        {
            return Count(typeof (TInsertable1), typeof (TInsertable2));
        }

        protected int Count&amp;lt;TInsertable1, TInsertable2, TInsertable3&amp;gt;() 
            where TInsertable1 : DatabaseInsertable
            where TInsertable2 : DatabaseInsertable
            where TInsertable3 : DatabaseInsertable
        {
            return Count(typeof (TInsertable1), typeof (TInsertable2), typeof (TInsertable3));
        }

        private int Count(params Type[] insertableTypes)
        {
            var count = 0;
            foreach (var type in insertableTypes)
            {
                var select = &amp;quot;select count(*) from &amp;quot; + GetTableOfType(type);
                count += Int32.Parse(factory.CreateCommand(this.connection, select).ExecuteScalar().ToString());
            }
            return count;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;############= Reflectie en dynamisch code genereren ############=&lt;/p&gt;

&lt;p&gt;Mogelijk met &lt;strong&gt;Reflection EMIT&lt;/strong&gt;, om dynamisch IL code te genereren. IL is de bytecode tussenlaag in .NET, die je ook in C# kan schrijven.&lt;/p&gt;

&lt;p&gt;Compleet voorbeeld: &lt;a href=&#34;http://www.codeproject.com/Articles/121568/Dynamic-Type-Using-Reflection-Emit&#34;&gt;http://www.codeproject.com/Articles/121568/Dynamic-Type-Using-Reflection-Emit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bijvoorbeeld, om een getal te delen door een ander met &lt;code&gt;getal / other&lt;/code&gt;, genereert de volgende code dit in IL:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;MethodBuilder mDivide = tbuilder.DefineMethod(&amp;quot;Divide&amp;quot;, MethodAttributes.Public |
    MethodAttributes.HideBySig |
    MethodAttributes.NewSlot |
    MethodAttributes.Virtual |
    MethodAttributes.Final,
    CallingConventions.Standard,
    typeof(System.Single),
    new Type[] { typeof(System.Int32), typeof(System.Int32) });
mDivide.SetImplementationFlags(MethodImplAttributes.Managed);
ILGenerator dil = mDivide.GetILGenerator();

dil.Emit(OpCodes.Nop);
Label lblTry = dil.BeginExceptionBlock();

dil.Emit(OpCodes.Nop);
dil.Emit(OpCodes.Ldarg_1);
dil.Emit(OpCodes.Ldarg_2);
dil.Emit(OpCodes.Div);
dil.Emit(OpCodes.Conv_R4); // Converts to Float32
dil.Emit(OpCodes.Stloc_1);
dil.Emit(OpCodes.Leave, lblTry);

dil.BeginCatchBlock(typeof(DivideByZeroException));
dil.Emit(OpCodes.Stloc_0);
dil.Emit(OpCodes.Nop);
dil.Emit(OpCodes.Ldstr, &amp;quot;ZeroDivide exception : {0}&amp;quot;);
dil.Emit(OpCodes.Ldloc_0);
MethodInfo minfo = typeof(DivideByZeroException).GetMethod(&amp;quot;get_Message&amp;quot;);
dil.Emit(OpCodes.Callvirt, minfo);
MethodInfo wl = typeof(System.Console).GetMethod(&amp;quot;WriteLine&amp;quot;, new Type[] 
                                      { typeof(string), typeof(object) });
dil.Emit(OpCodes.Call, wl);
dil.Emit(OpCodes.Nop);
dil.Emit(OpCodes.Ldc_R4, 0.0);
dil.Emit(OpCodes.Stloc_1);
dil.Emit(OpCodes.Leave_S, lblTry);

dil.EndExceptionBlock();
dil.Emit(OpCodes.Nop);
dil.Emit(OpCodes.Ldloc_1);
dil.Emit(OpCodes.Ret);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Genereert dit in IL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.method public hidebysig newslot virtual final 
            instance float32  Divide(int32 firstnum,
                        int32 secondnum) cil managed
    {
        // Code size       39 (0x27)
        .maxstack  2
        .locals init (class [mscorlib]System.DivideByZeroException V_0,
                float32 V_1)
        IL_0000:  nop
        .try
        {
        IL_0001:  nop
        IL_0002:  ldarg.1
        IL_0003:  ldarg.2
        IL_0004:  div
        IL_0005:  conv.r4
        IL_0006:  stloc.1
        IL_0007:  leave.s    IL_0024
        }  // end .try
        catch [mscorlib]System.DivideByZeroException 
        {
        IL_0009:  stloc.0
        IL_000a:  nop
        IL_000b:  ldstr      &amp;quot;ZeroDivide exception : {0}&amp;quot;
        IL_0010:  ldloc.0
        IL_0011:  callvirt   instance string [mscorlib]System.Exception::get_Message()
        IL_0016:  call       void [mscorlib]System.Console::WriteLine(string,
                                                                        object)
        IL_001b:  nop
        IL_001c:  ldc.r4     0.0
        IL_0021:  stloc.1
        IL_0022:  leave.s    IL_0024
        }  // end handler
        IL_0024:  nop
        IL_0025:  ldloc.1
        IL_0026:  ret
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>dynamica</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/dynamica/</link>
      <pubDate>Wed, 05 Nov 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/dynamica/</guid>
      <description>

&lt;h1 id=&#34;dynamica&#34;&gt;Dynamica&lt;/h1&gt;

&lt;p&gt;Zie ook &lt;a href=&#34;http://www.brainbaking.com/wiki/code/csharp/reflectie/&#34;&gt;code/csharp/reflectie&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;expression-trees-opbouwen&#34;&gt;Expression trees opbouwen&lt;/h3&gt;

&lt;h5 id=&#34;van-een-methodinfo-instantie-naar-een-func&#34;&gt;Van een MethodInfo instantie naar een Func&amp;lt;&amp;gt;&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;            var instanceToMemoize = Activator.CreateInstance&amp;lt;TClassToMemoize&amp;gt;();
            foreach (var method in instanceToMemoize.GetType().GetMethods(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance))
            {
                var parameters ###### method.GetParameters().Select(p &amp;gt; Expression.Constant(&amp;quot;test&amp;quot;));

                var expr = Expression.Lambda(Expression.Call(Expression.Constant(instanceToMemoize), method, parameters)).Compile();
                _Delegates.Add(method.ToString(), expr);
            }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Argumenten stuk klopt nog niet. Refs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/2933221/can-you-get-a-funct-or-similar-from-a-methodinfo-object&#34;&gt;http://stackoverflow.com/questions/2933221/can-you-get-a-funct-or-similar-from-a-methodinfo-object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/11367830/how-to-find-full-name-of-calling-method-c-sharp&#34;&gt;http://stackoverflow.com/questions/11367830/how-to-find-full-name-of-calling-method-c-sharp&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&#34;memoization&#34;&gt;Memoization&lt;/h5&gt;

&lt;p&gt;Ook mogelijk via &lt;code&gt;Func&amp;lt;&amp;gt;&lt;/code&gt; wrappers; zie&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaylee.org/post/2013/04/18/Memoization-and-Immutable-data-in-CSharp-Part-1.aspx&#34;&gt;http://www.jaylee.org/post/2013/04/18/Memoization-and-Immutable-data-in-CSharp-Part-1.aspx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jaylee.org/post/2013/04/22/Immutable-Data-and-Memoization-in-CSharp-Part-2.aspx&#34;&gt;http://www.jaylee.org/post/2013/04/22/Immutable-Data-and-Memoization-in-CSharp-Part-2.aspx&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Dit is een extension die 2 type arguments aanvaard:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        public static Func&amp;lt;TArg1, TArg2, TResult&amp;gt; AsMemoized&amp;lt;TArg1, TArg2, TResult&amp;gt;(this Func&amp;lt;TArg1, TArg2, TResult&amp;gt; func)
        {
            var values = new Dictionary&amp;lt;MemoizedKey&amp;lt;TArg1, TArg2&amp;gt;, TResult&amp;gt;();
            return (arg1, arg2) =&amp;gt; MemoizedValue(func, arg1, arg2, values);
        }

        public static Func&amp;lt;TArg, TResult&amp;gt; AsMemoized&amp;lt;TArg, TResult&amp;gt;(this Func&amp;lt;TArg, TResult&amp;gt; funcArg)
        {
            Func&amp;lt;TArg, object, TResult&amp;gt; func ###### (arg1, arg2) &amp;gt; funcArg(arg1);
            var values = new Dictionary&amp;lt;MemoizedKey&amp;lt;TArg, object&amp;gt;, TResult&amp;gt;();
            return (arg) =&amp;gt; MemoizedValue(func, arg, null, values);
        }
        private static TResult MemoizedValue&amp;lt;TArg1, TArg2, TResult&amp;gt;(Func&amp;lt;TArg1, TArg2, TResult&amp;gt; func, TArg1 arg1, TArg2 arg2, Dictionary&amp;lt;MemoizedKey&amp;lt;TArg1, TArg2&amp;gt;, TResult&amp;gt; values)
        {
            TResult value;

            var memoizedKey = new MemoizedKey&amp;lt;TArg1, TArg2&amp;gt;(arg1, arg2);
            if (!values.TryGetValue(memoizedKey, out value))
            {
                value ###### values[memoizedKey]  func(memoizedKey.Arg1, memoizedKey.Arg2);
            }

            return value;
        }

        private class MemoizedKey&amp;lt;TArg1, TArg2&amp;gt;
        {
            public MemoizedKey(TArg1 arg1, TArg2 arg2)
            {
                Arg1 = arg1;
                Arg2 = arg2;
            }

            public TArg1 Arg1 { get; private set; }

            public TArg2 Arg2 { get; private set; }

            public override bool Equals(object obj)
            {
                if (ReferenceEquals(null, obj)) return false;
                if (ReferenceEquals(this, obj)) return true;
                if (obj.GetType() != this.GetType()) return false;
                return Equals((MemoizedKey&amp;lt;TArg1, TArg2&amp;gt;)obj);
            }

            public override int GetHashCode()
            {
                unchecked
                {
                    return (EqualityComparer&amp;lt;TArg1&amp;gt;.Default.GetHashCode(Arg1) * 397) ^ EqualityComparer&amp;lt;TArg2&amp;gt;.Default.GetHashCode(Arg2);
                }
            }

            private bool Equals(MemoizedKey&amp;lt;TArg1, TArg2&amp;gt; other)
            {
                return EqualityComparer&amp;lt;TArg1&amp;gt;.Default.Equals(Arg1, other.Arg1) &amp;amp;&amp;amp; EqualityComparer&amp;lt;TArg2&amp;gt;.Default.Equals(Arg2, other.Arg2);
            }
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Equals is nodig voor de &lt;code&gt;Dictionary&lt;/code&gt; (generated).&lt;/p&gt;

&lt;h3 id=&#34;aspect-oriented-programming&#34;&gt;Aspect Oriented Programming&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;PostSharp&lt;/strong&gt;: &lt;a href=&#34;http:*www.postsharp.net&#34;&gt;http:*www.postsharp.net&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;transacties-wiren&#34;&gt;Transacties wiren&lt;/h4&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://www.brainbaking.com/wiki/code/csharp/persistence/&#34;&gt;code/csharp/persistence&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;aspects-applyen-op-assembly-level&#34;&gt;Aspects applyen op assembly level&lt;/h4&gt;

&lt;p&gt;Q: Ik wil AOP toepassen voor alle klassen (&amp;amp; [publieke] methods) in een bepaald project (DLL)&lt;br/&gt;&lt;br/&gt;
A: Gebruik &lt;a href=&#34;http://www.postsharp.net/aspects/multicasting&#34;&gt;Multicasting aspects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bijvoorbeeld, om exceptions overal op te vangen, en dan door te delegeren, evt screenshot van de app te nemen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[assembly: ScenarioTests.ScenarioExceptionHandler]

namespace ScenarioTests
{
    [Serializable]
    [ScenarioExceptionHandler(AttributeExclude = true)]
    public class ScenarioExceptionHandler : OnMethodBoundaryAspect
    {
        public override void OnException(MethodExecutionArgs args)
        {
            WebDriverExceptionHandler.Handle(args.Exception);
            base.OnException(args);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De eerste regel, &lt;code&gt;[assembly:]&lt;/code&gt; is van belang, zie documentatie. Je kan ook verder filteren by visibility etc, zoals in &lt;a href=&#34;http://www.brainbaking.com/wiki/code/java/dynamica/aspectj/&#34;&gt;Spring AOP/AspectJ&lt;/a&gt; de strings in XML gedfiniëerd zijn.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>signing</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/signing/</link>
      <pubDate>Fri, 11 Jul 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/signing/</guid>
      <description>

&lt;h1 id=&#34;signing&#34;&gt;Signing&lt;/h1&gt;

&lt;h4 id=&#34;compile-fouten-cannot-import-the-following-key-file&#34;&gt;Compile fouten: &amp;lsquo;cannot import the following key file&amp;rsquo;&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;lt;br/&amp;gt;Windows&amp;lt;br/&amp;gt;Microsoft.NET&amp;lt;br/&amp;gt;Framework&amp;lt;br/&amp;gt;v4.0.30319&amp;lt;br/&amp;gt;Microsoft.Common.targets(2455, 5): error MSB3325: Cannot import the following key file: ign.pfx. The key file may be password protected. To correct this, try to import the certificate again or manually install the certificate to the Strong Name CSP with the following key container name: VS_KEY_0E36C1B21D0EBCA4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oplossen door met &lt;code&gt;sntool&lt;/code&gt; te registreren en die container naam aan te maken (VS&lt;em&gt;KEY&lt;/em&gt;&amp;hellip;)&lt;/p&gt;

&lt;h4 id=&#34;assemblies-signen&#34;&gt;Assemblies signen&lt;/h4&gt;

&lt;p&gt;Properties -&amp;gt; Signing -&amp;gt; Sign the assembly aanvinken. Choose a strong name key file&amp;hellip; (browse)&lt;/p&gt;

&lt;h4 id=&#34;friend-classes-signed-assemblies&#34;&gt;Friend classes &amp;amp; signed assemblies&lt;/h4&gt;

&lt;p&gt;In &lt;code&gt;AssemblyInfo.cs&lt;/code&gt; ook de public key meegeven van de friend assembly:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[assembly: InternalsVisibleTo(&amp;quot;ServiceLayer.UnitTest, PublicKey=00240000048000002a51cadd46bbd321cda4e67d2...c125d7eb&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;de-public-key-opvragen-van-een-assembly&#34;&gt;De public key opvragen van een assembly&lt;/h5&gt;

&lt;p&gt;Met &lt;code&gt;sn.exe&lt;/code&gt;, geïnstalleerd onder uw .NET SDK dir, bijvoorbeeld &lt;code&gt;C:&amp;lt;br/&amp;gt;Program Files (x86)&amp;lt;br/&amp;gt;Microsoft SDKs&amp;lt;br/&amp;gt;Windows&amp;lt;br/&amp;gt;v7.0A&amp;lt;br/&amp;gt;Bin&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sn -Tp [assembly.dll]&lt;/code&gt; uitvoeren. Of de sign file vastnemen en deze uitlezen. Zie &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/k5b5tt23(v=vs.110).aspx&#34;&gt;MSDN Strong Name Tool help&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>aspdotnet</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/aspdotnet/</link>
      <pubDate>Mon, 30 Jun 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/aspdotnet/</guid>
      <description>

&lt;h1 id=&#34;asp-net&#34;&gt;ASP.NET&lt;/h1&gt;

&lt;h3 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h3&gt;

&lt;h4 id=&#34;webform-dopostbackwithoptions-is-undefined-in-ie1&#34;&gt;&amp;lsquo;WebForm_DoPostBackWithOptions&amp;rsquo; is undefined in IE1&lt;/h4&gt;

&lt;p&gt;Probleem: &lt;a href=&#34;http://blogs.telerik.com/aspnet-ajax/posts/13-12-19/how-to-get-your-asp.net-application-working-in-ie11&#34;&gt;How to get your ASP.NET application working in IE11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fix: &lt;a href=&#34;http://www.shubho.net/2011/01/what-is-appbrowsers-folder-in-aspnet.html&#34;&gt;App_Browsers&lt;/a&gt; folder aanmaken in uw webapp en een &lt;code&gt;.browser&lt;/code&gt; file toevoegen:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;browsers&amp;gt;
  &amp;lt;browser id######&amp;quot;IE11&amp;quot; parentID&amp;quot;Mozilla&amp;quot;&amp;gt;
    &amp;lt;identification&amp;gt;
      &amp;lt;userAgent match=&amp;quot;Trident/(?&#39;layoutVersion&#39;[7-9]|0*[1-9]&amp;lt;br/&amp;gt;d+)(&amp;lt;br/&amp;gt;.&amp;lt;br/&amp;gt;d+)?;(.*;)?&amp;lt;br/&amp;gt;s*rv:(?&#39;version&#39;(?&#39;major&#39;&amp;lt;br/&amp;gt;d+)(&amp;lt;br/&amp;gt;.(?&#39;minor&#39;&amp;lt;br/&amp;gt;d+)))&amp;quot; /&amp;gt;
      &amp;lt;userAgent nonMatch=&amp;quot;IEMobile&amp;quot; /&amp;gt;
    &amp;lt;/identification&amp;gt;
    &amp;lt;capture&amp;gt;
      &amp;lt;userAgent match=&amp;quot;Trident/(?&#39;layoutVersion&#39;&amp;lt;br/&amp;gt;d+)&amp;quot; /&amp;gt;
    &amp;lt;/capture&amp;gt;
    &amp;lt;capabilities&amp;gt;
      &amp;lt;capability name######&amp;quot;browser&amp;quot;              value&amp;quot;IE&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;layoutEngine&amp;quot;         value&amp;quot;Trident&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;layoutEngineVersion&amp;quot;  value&amp;quot;${layoutVersion}&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;extra&amp;quot;                value&amp;quot;${extra}&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;isColor&amp;quot;              value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;letters&amp;quot;              value&amp;quot;${letters}&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;majorversion&amp;quot;         value&amp;quot;${major}&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;minorversion&amp;quot;         value&amp;quot;${minor}&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;screenBitDepth&amp;quot;       value&amp;quot;8&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;type&amp;quot;                 value&amp;quot;IE${major}&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;version&amp;quot;              value&amp;quot;${version}&amp;quot; /&amp;gt;
    &amp;lt;/capabilities&amp;gt;
  &amp;lt;/browser&amp;gt;
  
  &amp;lt;!-- Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11,0) like Gecko --&amp;gt;
  &amp;lt;browser id######&amp;quot;IE110&amp;quot; parentID&amp;quot;IE11&amp;quot;&amp;gt;
    &amp;lt;identification&amp;gt;
      &amp;lt;capability name######&amp;quot;majorversion&amp;quot; match&amp;quot;11&amp;quot; /&amp;gt;
    &amp;lt;/identification&amp;gt;
  
    &amp;lt;capabilities&amp;gt;
      &amp;lt;capability name######&amp;quot;ecmascriptversion&amp;quot;    value&amp;quot;3.0&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;jscriptversion&amp;quot;       value&amp;quot;5.6&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;javascript&amp;quot;           value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;javascriptversion&amp;quot;    value&amp;quot;1.5&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;msdomversion&amp;quot;         value&amp;quot;${majorversion}.${minorversion}&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;w3cdomversion&amp;quot;        value&amp;quot;1.0&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;ExchangeOmaSupported&amp;quot; value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;activexcontrols&amp;quot;      value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;backgroundsounds&amp;quot;     value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;cookies&amp;quot;              value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;frames&amp;quot;               value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;javaapplets&amp;quot;          value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;supportsCallback&amp;quot;     value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;supportsFileUpload&amp;quot;   value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;supportsMultilineTextBoxDisplay&amp;quot; value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;supportsMaintainScrollPositionOnPostback&amp;quot; value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;supportsVCard&amp;quot;        value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;supportsXmlHttp&amp;quot;      value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;tables&amp;quot;               value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;supportsAccessKeyAttribute&amp;quot;    value&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;tagwriter&amp;quot;            value&amp;quot;System.Web.UI.HtmlTextWriter&amp;quot; /&amp;gt;
      &amp;lt;capability name######&amp;quot;vbscript&amp;quot;             value&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;/capabilities&amp;gt;
  &amp;lt;/browser&amp;gt;
&amp;lt;/browsers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ofwel&lt;/strong&gt; .NET 4.5 op server installeren (ook al gebruik je 4.0!)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>testing</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/testing/</link>
      <pubDate>Fri, 27 Jun 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/testing/</guid>
      <description>

&lt;h1 id=&#34;testing-met-c-net&#34;&gt;Testing met C#/.NET&lt;/h1&gt;

&lt;h2 id=&#34;test-frameworks&#34;&gt;Test frameworks&lt;/h2&gt;

&lt;h3 id=&#34;selenium-webdriver&#34;&gt;Selenium/WebDriver&lt;/h3&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://www.joecolantonio.com/2012/07/31/getting-started-using-selenium-2-0-webdriver-for-ie-in-visual-studio-c/&#34;&gt;http://www.joecolantonio.com/2012/07/31/getting-started-using-selenium-2-0-webdriver-for-ie-in-visual-studio-c/&lt;/a&gt; - essentiëel identiek aan Java.&lt;/p&gt;

&lt;h4 id=&#34;chaining-fluent-acceptance-criteria-definitions&#34;&gt;Chaining - fluent acceptance criteria definitions&lt;/h4&gt;

&lt;p&gt;Een typische test zou er dan zo kunnen uitzien:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        [Test]
        public void OpenAdminAuthenticationManagement()
        {
            LogInto()
                .OpenAdministrationAuthenticationManagement()
                .AuthenticationGrid
                .ShouldContainMinAmountRows(1)
                .DoubleClickOnRowNr(0)
                .ExpectOpened&amp;lt;ModifyUserDetailWindow&amp;gt;()
                .UserNameShouldContainSomeValue();
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Gebruik overal &lt;code&gt;return this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Wanneer je niet wil upcasten en in een abstract component &lt;code&gt;ClickSave()&lt;/code&gt; uw subtype moet retourneren: &lt;code&gt;public class Panel&amp;lt;T&amp;gt; : Window where T : Panel&amp;lt;T&amp;gt;&lt;/code&gt; en &lt;code&gt;return (T) this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Wanneer je niet weet wat het volgend scherm is, gebruik &lt;code&gt;ExpectOpened&amp;lt;Type&amp;gt;()&lt;/code&gt; dat via &lt;a href=&#34;http://www.brainbaking.com/wiki/code/csharp/reflectie/&#34;&gt;code/csharp/reflectie&lt;/a&gt; een instantie aanmaakt van uw component.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;nunit&#34;&gt;NUnit&lt;/h3&gt;

&lt;h4 id=&#34;attributes&#34;&gt;Attributes&lt;/h4&gt;

&lt;p&gt;Zoals in JUnit&amp;rsquo;s annotaties &lt;code&gt;@Before&lt;/code&gt; en &lt;code&gt;@Test&lt;/code&gt; kan je hier &lt;code&gt;[SetUp]&lt;/code&gt; en &lt;code&gt;[Test]&lt;/code&gt; gebruiken. Een test klasse moet met de attribute &lt;code&gt;[TestFixture]&lt;/code&gt; geplakt worden.&lt;/p&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://blogs.msdn.com/b/nnaderi/archive/2007/02/01/mstest-vs-nunit-frameworks.aspx&#34;&gt;MSTest en NUnit comparison&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hoe kan ik dit via command-line uitvoeren?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Installeer &lt;a href=&#34;http://nunit.org/?p=download&#34;&gt;NUnit&lt;/a&gt; en pas uw &lt;code&gt;PATH&lt;/code&gt; aan zodat de install dir er in steekt (program files&lt;br/&gt;nunit). Vanaf dan kan je &lt;code&gt;nunit-console test.dll&lt;/code&gt; via commandline gebruiken om de test zo uit te voeren.&lt;/p&gt;

&lt;h3 id=&#34;mstest&#34;&gt;MSTest&lt;/h3&gt;

&lt;h4 id=&#34;attributes-1&#34;&gt;Attributes&lt;/h4&gt;

&lt;p&gt;Zoals in JUnit&amp;rsquo;s annotaties &lt;code&gt;@Before&lt;/code&gt; en &lt;code&gt;@Test&lt;/code&gt; kan je hier &lt;code&gt;[TestInitialize]&lt;/code&gt; en &lt;code&gt;[TestMethod]&lt;/code&gt; gebruiken. Er zijn enkele &amp;ldquo;pitfalls&amp;rdquo; -&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[ClassInitialize]&lt;/code&gt;, zogezegd het equivalent van &lt;code&gt;@BeforeClass&lt;/code&gt;, werkt &lt;strong&gt;niet&lt;/strong&gt; op base classes: zie &lt;a href=&#34;http://blogs.msdn.com/b/densto/archive/2008/05/16/using-a-base-class-for-your-unit-test-classes.aspx&#34;&gt;http://blogs.msdn.com/b/densto/archive/2008/05/16/using-a-base-class-for-your-unit-test-classes.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Een mogelijke &amp;ldquo;oplossing&amp;rdquo; is dit: (let op, niet helemaal hetzelfde)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;[TestClass]
public abstract class TestBase
{
    [AssemblyInitializeAttribute]
    public static void Initialize(TestContext context)
    {
        // put your initialize code here
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of overal de base aanroepen&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;mocking-en-stubbing&#34;&gt;Mocking en stubbing&lt;/h2&gt;

&lt;h3 id=&#34;microsoft-fakes&#34;&gt;Microsoft Fakes&lt;/h3&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://msdn.microsoft.com/en-US/library/hh549175&#34;&gt;http://msdn.microsoft.com/en-US/library/hh549175&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Als je &lt;code&gt;Fakes&lt;/code&gt; toevoegt als reference, gebeurt er het volgende (enkel voor interfaces):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The special piece of magic here is the class StubIStockFeed. For every interface in the referenced assembly, the Microsoft Fakes mechanism generates a stub class. The name of the stub class is the derived from the name of the interface, with &amp;ldquo;Fakes.Stub&amp;rdquo; as a prefix, and the parameter type names appended.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;rhino-mocks&#34;&gt;Rhino Mocks&lt;/h3&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://www.hibernatingrhinos.com/oss/rhino-mocks&#34;&gt;http://www.hibernatingrhinos.com/oss/rhino-mocks&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&#34;automatisch-mocking-fields-initializeren&#34;&gt;Automatisch mocking fields initializeren&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public abstract class AbstractTestCase
    {
        [TestInitialize]
        public void CreateMocksBasedOnNamingConvention()
        {
            this.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Instance).Where(x =&amp;gt; x.Name.EndsWith(&amp;quot;Mock&amp;quot;)).All(InitMock);
        }

        private bool InitMock(FieldInfo field)
        {
            field.SetValue(this, MockRepository.GenerateMock(field.FieldType, new Type[]{}));
            return true;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hupla.&lt;/p&gt;

&lt;h2 id=&#34;resources-en-deployment&#34;&gt;Resources en deployment&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms182475.aspx&#34;&gt;How to deploy files for tests&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Er moeten aan een aantal condities voldaan worden:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;een mstest &lt;code&gt;.testsettings&lt;/code&gt; XML file waar de tag &lt;code&gt;&amp;lt;DeploymentEnabled/&amp;gt;&lt;/code&gt; op &lt;code&gt;true&lt;/code&gt; staat (extra te deployen files zijn daar kinderen van) - dit kan automatisch geëdit worden met VS2010 maar blijkbaar niet meer met VS2012&amp;hellip; Als de tag zelf niet voorkomt werkt het in 2012 ook nog (?)&lt;/li&gt;
&lt;li&gt;een resource hebben die op &lt;code&gt;Content&lt;/code&gt; en &lt;code&gt;Copy&lt;/code&gt; staat&lt;/li&gt;
&lt;li&gt;Een &lt;code&gt;DeploymentItem&lt;/code&gt; attribute hebben die de te kopiëren file specifiëert (merk op dat subfolders hier ook ingevuld moeten zijn)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    [TestClass]
    [DeploymentItem(&amp;quot;IEDriverServer.exe&amp;quot;)]
    public abstract class EndToEndTestCase
    {
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De deployment items zijn niet nodig als de testen uitgevoerd worden vanuit de bin folder. Meestal is dit een aparte MSTest locatie (temp zoals &lt;code&gt;C:&amp;lt;br/&amp;gt;Users&amp;lt;br/&amp;gt;bkwog&amp;lt;br/&amp;gt;AppData&amp;lt;br/&amp;gt;Local&amp;lt;br/&amp;gt;Temp&amp;lt;br/&amp;gt;TestResults&amp;lt;br/&amp;gt;bkwog_HI18261 2013-12-23 10_28_54&lt;/code&gt;) waar dan resources niet bij steken maar enkel DLLs en PDBs - bijgevolg problemen&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>utils</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/utils/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/utils/</guid>
      <description>

&lt;h1 id=&#34;utils-partials&#34;&gt;Utils Partials&lt;/h1&gt;

&lt;h3 id=&#34;objectextensions&#34;&gt;ObjectExtensions&lt;/h3&gt;

&lt;p&gt;Waarom? Deep clone van een object maken zonder de boel te (de)-serialiseren.&lt;/p&gt;

&lt;p&gt;Bron: &lt;a href=&#34;https://raw.github.com/Burtsev-Alexey/net-object-deep-copy/master/ObjectExtensions.cs&#34;&gt;https://raw.github.com/Burtsev-Alexey/net-object-deep-copy/master/ObjectExtensions.cs&lt;/a&gt; - thank you Alexey&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public static class ObjectExtensions
    {
        private static readonly MethodInfo CloneMethod = typeof (Object).GetMethod(&amp;quot;MemberwiseClone&amp;quot;,
            BindingFlags.NonPublic | BindingFlags.Instance);

        public static bool IsPrimitive(this Type type)
        {
            if (type ###### typeof (String)) return true;
            return (type.IsValueType &amp;amp; type.IsPrimitive);
        }

        public static Object Copy(this Object originalObject)
        {
            return InternalCopy(originalObject, new Dictionary&amp;lt;Object, Object&amp;gt;(new ReferenceEqualityComparer()));
        }

        private static Object InternalCopy(Object originalObject, IDictionary&amp;lt;Object, Object&amp;gt; visited)
        {
            if (originalObject ###### null) return null;
            var typeToReflect = originalObject.GetType();
            if (IsPrimitive(typeToReflect)) return originalObject;
            if (typeof (XElement).IsAssignableFrom(typeToReflect)) return new XElement(originalObject as XElement);

            if (visited.ContainsKey(originalObject)) return visited[originalObject];
            if (typeof (Delegate).IsAssignableFrom(typeToReflect)) return null;
            var cloneObject = CloneMethod.Invoke(originalObject, null);
            if (typeToReflect.IsArray)
            {
                var arrayType = typeToReflect.GetElementType();
                if (IsPrimitive(arrayType) ###### false)
                {
                    Array clonedArray = (Array) cloneObject;
                    clonedArray.ForEach(
                        (array, indices) =&amp;gt;
                            array.SetValue(InternalCopy(clonedArray.GetValue(indices), visited), indices));
                }
            }
            visited.Add(originalObject, cloneObject);
            CopyFields(originalObject, visited, cloneObject, typeToReflect);
            RecursiveCopyBaseTypePrivateFields(originalObject, visited, cloneObject, typeToReflect);
            return cloneObject;
        }

        private static void RecursiveCopyBaseTypePrivateFields(object originalObject,
            IDictionary&amp;lt;object, object&amp;gt; visited, object cloneObject, Type typeToReflect)
        {
            if (typeToReflect.BaseType != null)
            {
                RecursiveCopyBaseTypePrivateFields(originalObject, visited, cloneObject, typeToReflect.BaseType);
                CopyFields(originalObject, visited, cloneObject, typeToReflect.BaseType,
                    BindingFlags.Instance | BindingFlags.NonPublic, info =&amp;gt; info.IsPrivate);
            }
        }

        private static void CopyFields(object originalObject, IDictionary&amp;lt;object, object&amp;gt; visited, object cloneObject,
            Type typeToReflect,
            BindingFlags bindingFlags =
                BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.FlattenHierarchy,
            Func&amp;lt;FieldInfo, bool&amp;gt; filter = null)
        {
            foreach (FieldInfo fieldInfo in typeToReflect.GetFields(bindingFlags))
            {
                if (filter != null &amp;amp;&amp;amp; filter(fieldInfo) ###### false) continue;
                if (IsPrimitive(fieldInfo.FieldType)) continue;
                var originalFieldValue = fieldInfo.GetValue(originalObject);
                var clonedFieldValue = InternalCopy(originalFieldValue, visited);
                fieldInfo.SetValue(cloneObject, clonedFieldValue);
            }
        }

        public static T Copy&amp;lt;T&amp;gt;(this T original)
        {
            return (T) Copy((Object) original);
        }
    }

    public class ReferenceEqualityComparer : EqualityComparer&amp;lt;Object&amp;gt;
    {
        public override bool Equals(object x, object y)
        {
            return ReferenceEquals(x, y);
        }

        public override int GetHashCode(object obj)
        {
            if (obj ###### null) return 0;
            return obj.GetHashCode();
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;❗ &lt;strong&gt;Let op met XElement&lt;/strong&gt;; sommige API classes voorzien copy constructors die je beter gebruikt ipv via reflectie alle fields over te kopiëren. Bijgevolg if type blabla&amp;hellip;&lt;/p&gt;

&lt;p&gt;############ EqualsBuilder ############&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    public class EqualsBuilder&amp;lt;T&amp;gt;
    {
        private readonly T left;
        private readonly object right;
        private bool areEqual = true;

        public EqualsBuilder(T left, object right)
        {
            this.left = left;
            this.right = right;

            if (ReferenceEquals(left, right))
            {
                areEqual = true;
                return;
            }

            if (ReferenceEquals(left, null))
            {
                areEqual = false;
                return;
            }

            if (ReferenceEquals(right, null))
            {
                areEqual = false;
                return;
            }

            if (left.GetType() != right.GetType())
            {
                areEqual = false;
                return;
            }
        }

        public EqualsBuilder&amp;lt;T&amp;gt; With&amp;lt;TProperty&amp;gt;(Expression&amp;lt;Func&amp;lt;T, TProperty&amp;gt;&amp;gt; propertyOrField)
        {
            if (!areEqual)
            {
                return this;
            }

            if (left ###### null || right ###### null)
            {
                return this;
            }

            var expression = propertyOrField.Body as MemberExpression;
            if (expression ###### null)
            {
                throw new ArgumentException(&amp;quot;Expecting Property or Field Expression of an object&amp;quot;);
            }

            Func&amp;lt;T, TProperty&amp;gt; func = propertyOrField.Compile();
            TProperty leftValue = func(left);
            TProperty rightValue = func((T) right);

            if (leftValue ###### null &amp;amp;&amp;amp; rightValue ###### null)
            {
                areEqual &amp;amp;= true;
                return this;
            }

            if (leftValue != null &amp;amp;&amp;amp; rightValue ###### null)
            {
                areEqual &amp;amp;= false;
                return this;
            }

            if (leftValue ###### null &amp;amp;&amp;amp; rightValue != null)
            {
                areEqual &amp;amp;= false;
                return this;
            }

            areEqual &amp;amp;= leftValue.Equals(rightValue);
            return this;
        }

        public bool Equals()
        {
            return areEqual;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gebruik:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        public override bool Equals(object obj)
        {
            return new EqualsBuilder&amp;lt;FlexMedischGegeven&amp;gt;(this, obj)
                .With(x =&amp;gt; x.Rownr)
                .With(x =&amp;gt; x.ColumnName)
                .With(x =&amp;gt; x.Value)
                .With(x =&amp;gt; x.Creator)
                .Equals();
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;############ Mocking DateTime.Now ############&lt;/p&gt;

&lt;p&gt;Schrijf een wrapper rond &lt;code&gt;Now&lt;/code&gt; met behulp van lambda&amp;rsquo;s:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;    using System;

    public static class SystemTime
    {
        private static Func&amp;lt;DateTime&amp;gt; _now;
        public static Func&amp;lt;DateTime&amp;gt; Now
        {
            get
            {
                if (_now ###### null)
                {
                    Reset();
                }
                return _now;
            }
            set { _now = value; }
        }

        public static void Reset()
        {
            Now ###### () &amp;gt; DateTime.Now;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gebruik:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;[TestCleanup]&lt;/code&gt; de &lt;code&gt;Reset()&lt;/code&gt; method aanroepen.&lt;/li&gt;
&lt;li&gt;in uw test body indien gewenst &lt;code&gt;SystemTime.Now ###### () &amp;gt; new DateTime(2001, 1, 1);&lt;/code&gt; steken.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>meta</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/meta/</link>
      <pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/meta/</guid>
      <description>

&lt;h1 id=&#34;metaprogramming&#34;&gt;Metaprogramming&lt;/h1&gt;

&lt;h3 id=&#34;tests-on-source-code-contents&#34;&gt;Tests on source code contents&lt;/h3&gt;

&lt;p&gt;Wat is de bedoeling? Lees alle source files in en check of er iets in voorkomt (in onderstaand geval &lt;code&gt;Bla.Instance&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;De &lt;code&gt;GoUpThreeDirs&lt;/code&gt; is omdat bij unit testen draaien dit in rootDir/unitTestProject/Bin/Debug uitgevoerd wordt, dat is de huidige dir. wij hebben nodig: rootDir/sourceCodeProject.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        [TestMethod]
        public void StaticInstanceShouldNeverBeUsedExceptInAllowedCases()
        {
            foreach (var file in Directory.GetFiles(GetSourcePath(), &amp;quot;*.cs&amp;quot;, SearchOption.AllDirectories))
            {
                var source = File.ReadAllText(file);
                if (source.Contains(typeof(Bla).Name + &amp;quot;.Instance&amp;quot;) &amp;amp;&amp;amp; NoStaticRefAllowedInThatFile(file))
                {
                    Assert.Fail(&amp;quot;file &amp;quot; + file + &amp;quot; contains a static reference to Bla which is not allowed!&amp;quot; +
                        &amp;quot;Please use Dependency Injection instead, take a look at the existing repositories as an example.&amp;quot;);
                }
            }
        }

        private bool NoStaticRefAllowedInThatFile(string file)
        {
            List&amp;lt;Type&amp;gt; allowedTypesWithInstanceRef = new List&amp;lt;Type&amp;gt;()
            {
                typeof(Bla),
                typeof(Blie)
            };

            return allowedTypesWithInstanceRef.All(x =&amp;gt; !file.Contains(x.Name));
        }

        private static string GetSourcePath()
        {
            return GoUpThreeDirectories(Environment.CurrentDirectory) + &amp;quot;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;ProjectNameOfSourceCode&amp;quot;;
        }

        private static string GoUpThreeDirectories(string dir)
        {
            string rootDir = dir;
            for (var i ###### 1; i &amp;lt; 3; i++)
            {
                rootDir = rootDir.Substring(0, rootDir.LastIndexOf(&amp;quot;&amp;lt;br/&amp;gt;&amp;lt;br/&amp;gt;&amp;quot;, StringComparison.Ordinal));
            }
            return rootDir;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>classes</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/classes/</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/classes/</guid>
      <description>

&lt;h1 id=&#34;classes&#34;&gt;Classes&lt;/h1&gt;

&lt;h2 id=&#34;dynamically-creating-instances&#34;&gt;Dynamically creating instances&lt;/h2&gt;

&lt;p&gt;Gebruik &lt;code&gt;Activator&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Activator.CreateInstance(type) as MyType
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;overrides-en-shadowing-new-en-virtual&#34;&gt;Overrides en shadowing: &amp;lsquo;new&amp;rsquo; en &amp;lsquo;virtual&amp;rsquo;&lt;/h2&gt;

&lt;p&gt;Zie onder andere:
  1. &lt;a href=&#34;http://stackoverflow.com/questions/1014295/new-keyword-in-method-signature&#34;&gt;http://stackoverflow.com/questions/1014295/new-keyword-in-method-signature&lt;/a&gt;
  2. &lt;a href=&#34;http://stackoverflow.com/questions/9892468/java-is-there-java-equivalent-for-c-sharp-new-keyword-in-method-signature-how&#34;&gt;http://stackoverflow.com/questions/9892468/java-is-there-java-equivalent-for-c-sharp-new-keyword-in-method-signature-how&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In java zijn alle methods &lt;code&gt;virtual&lt;/code&gt;, dat wil zeggen dat ze overschrijfbaar zijn (&lt;code&gt;@Override&lt;/code&gt;) zodat de method in de diepst geneste polymorfe structuur gebruikt wordt. In C# is daarvoor het keyword &lt;code&gt;virtual&lt;/code&gt; nodig:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public class A
{
   public virtual void One();
   public void Two();
}

public class B : A
{
   public override void One();
   public new void Two();
}

B b = new B();
A a = b as A;

a.One(); // Calls implementation in B
a.Two(); // Calls implementation in A
b.One(); // Calls implementation in B
b.Two(); // Calls implementation in B
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;De concretere klasse moet dan overriden met &lt;code&gt;override&lt;/code&gt; dat niet gaat als het niet &lt;code&gt;virtual&lt;/code&gt; is (je kan ook niet overerven waarbij een klasse &lt;code&gt;sealed&lt;/code&gt; is, zoals &lt;code&gt;final&lt;/code&gt; in java). Wat hier wel opmerkelijk is, is het gebruik van het keyword &lt;code&gt;new&lt;/code&gt; in de tweede method &amp;ldquo;Two&amp;rdquo;. Hierbij kan je de eerste implementatie toch nog hiden, maar je moet wel upcasten! Misschien is dit nog handig bij het schrijven van legacy testen?&lt;/p&gt;

&lt;p&gt;Het is in java niet mogelijk om een &lt;code&gt;final&lt;/code&gt; method te overriden. (Private telt natuurlijk niet mee&amp;hellip;) In C# is het &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/aa645769(v=vs.71).aspx&#34;&gt;wel mogelijk om halverwege de chain te sealen&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&#34;closures-en-lambda-s&#34;&gt;Closures en Lambda&amp;rsquo;s&lt;/h2&gt;

&lt;p&gt;Interessante links:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb397687.aspx&#34;&gt;Lambda expressions MSDN C# programming guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb397951.aspx&#34;&gt;Expression Trees MSDN&lt;/a&gt; hier worden lambda&amp;rsquo;s gebruikt voor LINQ&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;passing-on-work-to-a-method-to-execute-the-lambda&#34;&gt;Passing on &amp;lsquo;work&amp;rsquo; to a method, to execute the lambda&lt;/h3&gt;

&lt;p&gt;In Java:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public interface Workable&amp;lt;T&amp;gt; {
  public T work();
}

public class MyWork extends Workable&amp;lt;MyObj&amp;gt; {
  public MyObj work() {
    // do stuff here 
  } 
}

public class Executer {
  public &amp;lt;T&amp;gt; T doStuff(Workable&amp;lt;T&amp;gt; w) {
     prepare();
     T result = w.work();
     cleanup();
  }

  public MyObj createMyObj() {
    return doStuff(new MyWork());
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, gebruik interfaces. Pijnlijk en verbose. In C# kan je &lt;code&gt;() =&amp;gt;&lt;/code&gt; gebruiken om een anonieme method aan te maken, en &lt;code&gt;Func&amp;lt;&amp;gt;&lt;/code&gt; als type gebruiken. &lt;br/&gt;&lt;br/&gt;
Concreet voorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        internal virtual T Execute&amp;lt;T&amp;gt;(Func&amp;lt;T&amp;gt; work)
        {
            Connection.Open();
            var transaction = Connection.BeginTransaction();
            try
            {
                var retVal = work.Invoke();
                transaction.Commit();
                return retVal;
            }
            catch (Exception)
            {
                transaction.Rollback();
                throw;
            }
            finally
            {
                Connection.Close();
            }
        }
        
        public bool BlaBla()
        {
          return Execute(() =&amp;gt;
          {
              // do query stuff in here.
              return true;
          });
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;q-wat-is-het-verschil-tussen-een-lambda-en-een-delegate&#34;&gt;Q: Wat is het verschil tussen een Lambda (&amp;gt;()) en een delegate?&lt;/h5&gt;

&lt;p&gt;A: niets; zie voorbeeld:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Func&amp;lt;string, int&amp;gt; giveLength = delegate(string text) { return text.Length; };
Func&amp;lt;string, int&amp;gt; giveLength ###### (text &amp;gt; text.length);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;de &lt;code&gt;=&amp;gt;&lt;/code&gt; notatie is nieuwer.&lt;/p&gt;

&lt;h6 id=&#34;q-wat-is-het-verschil-tussen-een-expression-type-en-een-anonymous-type&#34;&gt;Q: Wat is het verschil tussen een expression type en een anonymous type?&lt;/h6&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/299703/delegate-keyword-vs-lambda-notation&#34;&gt;http://stackoverflow.com/questions/299703/delegate-keyword-vs-lambda-notation&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you assign the lambda to a delegate type (such as Func or Action) you&amp;rsquo;ll get an anonymous delegate.
If you assign the lambda to an Expression type, you&amp;rsquo;ll get an expression tree instead of a anonymous delegate. The expression tree can then be compiled to an anonymous delegate.
Edit: Here&amp;rsquo;s some links for Expressions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Zeer interessant artikel: &lt;a href=&#34;http://weblogs.asp.net/scottgu/archive/2007/04/08/new-orcas-language-feature-lambda-expressions.aspx&#34;&gt;http://weblogs.asp.net/scottgu/archive/2007/04/08/new-orcas-language-feature-lambda-expressions.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;############ Nested (inner) classes in C# ############&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blogs.msdn.com/b/oldnewthing/archive/2006/08/01/685248.aspx&#34;&gt;http://blogs.msdn.com/b/oldnewthing/archive/2006/08/01/685248.aspx&lt;/a&gt; - C# heeft geen referentie naar de outer class (&lt;code&gt;$0&lt;/code&gt; die in Java er impliciet is), bijgevolg moet je dit zelf bijhouden.&lt;/p&gt;

&lt;p&gt;Zie ook &lt;a href=&#34;http://stackoverflow.com/questions/4770180/anonymous-inner-classes-in-c-sharp&#34;&gt;http://stackoverflow.com/questions/4770180/anonymous-inner-classes-in-c-sharp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;############ Modules as anonymous inner classes, JavaScript pattern ############&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Mod = (function(consoleDep) {
    
    function yo() {
        consoleDep.log(&amp;quot;yo&amp;quot;);
    }

    return {
        hi: yo
    };

})(console);

Mod.hi();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;equals&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        private interface ILoggable
        {
            void Log(string msg);
        }

        private class Console : ILoggable
        {
            public void Log(string msg)
            {
                Debug.WriteLine(msg);
            }
        }

        [TestMethod]
        public void TestMe()
        {
            var Mod ###### new Func&amp;lt;ILoggable, Dictionary&amp;lt;string, Action&amp;gt;&amp;gt;((consoleDep) &amp;gt;
                {
                    Action yo ###### () &amp;gt; consoleDep.Log(&amp;quot;yo&amp;quot;);

                    return new Dictionary&amp;lt;string, Action&amp;gt;
                        {
                            { &amp;quot;hi&amp;quot;, yo }
                        };
                })(new Console());
            Mod[&amp;quot;hi&amp;quot;]();
        }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Problemen&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;cannot assign lambda expression to an implicitly-typed local variable (&lt;code&gt;var&lt;/code&gt; bij de yo ipv &lt;code&gt;Action&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;duck typing for module dependencies??&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;############= Enums in C# ############=&lt;/p&gt;

&lt;p&gt;Zie ook &lt;a href=&#34;http://stackoverflow.com/questions/469287/c-sharp-vs-java-enum-for-those-new-to-c&#34;&gt;http://stackoverflow.com/questions/469287/c-sharp-vs-java-enum-for-those-new-to-c&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Enumerations in the CLR are simply named constants. The underlying type must be integral. In Java an enumeration is more like a named instance of a type. That type can be quite complex and - as your example shows - contain multiple fields of various types.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Optie 1: gebruik &lt;strong&gt;extensions&lt;/strong&gt; (nog altijd een switch nodig omdat het type in algemene vorm binnen komt)&lt;/p&gt;

&lt;p&gt;Optie 2: maak uw eigen enum klasse door immutable readonly classes te maken:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;class Planet
{
  public static readonly Planet EARTH = new Planet(&amp;quot;earth&amp;quot;);

  private string name;
  private Planet(string name)
  {
    this.name = name;
  }
  
  public static IEnumerable&amp;lt;Planet&amp;gt; Values
  {
    // return set of planets
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>linq</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/linq/</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/linq/</guid>
      <description>

&lt;h1 id=&#34;collections-iterating-linq-profit&#34;&gt;Collections, Iterating, ???, Linq (profit)&lt;/h1&gt;

&lt;h2 id=&#34;yield-hocus-pocus&#34;&gt;yield hocus pocus&lt;/h2&gt;

&lt;p&gt;Zie &lt;a href=&#34;http://blogs.msdn.com/b/oldnewthing/archive/2008/08/12/8849519.aspx&#34;&gt;The implementation of iterators in C#&lt;/a&gt; - wordt uitgelegd hoe &lt;code&gt;yield&lt;/code&gt; door de compiler geïnterpreteerd wordt.&lt;/p&gt;

&lt;p&gt;Hiermee is het mogelijk om heel snel uw eigen &lt;code&gt;IEnumerable&lt;/code&gt; te maken.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“yield”, [&amp;hellip;] which allows you to quickly write iterators without worrying about preserving state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;folding-selecting-etc&#34;&gt;Folding, selecting, etc&lt;/h2&gt;

&lt;h3 id=&#34;closing-over-the-loop-variable&#34;&gt;Closing over the loop variable&lt;/h3&gt;

&lt;p&gt;Main article: &lt;a href=&#34;http://blogs.msdn.com/b/ericlippert/archive/2009/11/12/closing-over-the-loop-variable-considered-harmful.aspx&#34;&gt;http://blogs.msdn.com/b/ericlippert/archive/2009/11/12/closing-over-the-loop-variable-considered-harmful.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Opgelet met &lt;code&gt;foreach&lt;/code&gt; en de manier waarop die geïmplementeerd is (onder C# 5):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;  {
    IEnumerator&amp;lt;int&amp;gt; e = ((IEnumerable&amp;lt;int&amp;gt;)values).GetEnumerator();
    try
    { 
      int m; // OUTSIDE THE ACTUAL LOOP
      while(e.MoveNext())
      {
        m = (int)(int)e.Current;
        funcs.Add(()=&amp;gt;m);
      }
    }
    finally
    { 
      if (e != null) ((IDisposable)e).Dispose();
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;de variabele &lt;code&gt;m&lt;/code&gt; verandert constant. Wanneer we in een loop dan een &lt;code&gt;delegate&lt;/code&gt; gebruiken die de variabele uitleest, krijgen we op moment van executie slechts de laatste waarde!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;var values = new List&amp;lt;int&amp;gt;() { 100, 110, 120 };
var funcs = new List&amp;lt;Func&amp;lt;int&amp;gt;&amp;gt;();
foreach(var v in values) 
  funcs.Add( ()=&amp;gt;v );
foreach(var f in funcs) 
  Console.WriteLine(f()); // print 120, 120, 120, whoops??
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;side-effects&#34;&gt;side-effects&lt;/h3&gt;

&lt;p&gt;Zie ook &lt;a href=&#34;http://blogs.msdn.com/b/ericlippert/archive/2009/05/18/foreach-vs-foreach.aspx&#34;&gt;foreach vs ForEach&lt;/a&gt;: &lt;code&gt;LINQ&lt;/code&gt; is ontwikkeld om side-effect free te werken, dit wil zeggen dat er altijd een nieuwe collectie aangemaakt wordt. De volgende code is niet voldoende om in een method een lijst te sorteren:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;private void sortMe(IEnumerable&amp;lt;string&amp;gt; toSort) {
  toSort.ToList().Sort(); // ToList() returns a new list! as it should be
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;naming&#34;&gt;naming&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Gebruik &lt;code&gt;Select()&lt;/code&gt; in plaats van de JS &lt;code&gt;transform()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Aggregate&lt;/code&gt; is een native &lt;code&gt;foldLeft&lt;/code&gt; - gebruik &lt;code&gt;Reverse&lt;/code&gt; om van achter naar voor te beginnen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;All&lt;/code&gt; retrourneert een boolean en is om te controleren of er elementen in een collectie zitten, niet om te transformen of te loopen!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;achterliggende-implementatiedetails&#34;&gt;Achterliggende implementatiedetails&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://community.bartdesmet.net/blogs/bart/archive/2008/08/17/folding-left-right-and-the-linq-aggregation-operator.aspx&#34;&gt;http://community.bartdesmet.net/blogs/bart/archive/2008/08/17/folding-left-right-and-the-linq-aggregation-operator.aspx&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nativecalls</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/nativecalls/</link>
      <pubDate>Fri, 13 Dec 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/nativecalls/</guid>
      <description>

&lt;h1 id=&#34;c-native-calls-uitvoeren&#34;&gt;C++ Native calls uitvoeren&lt;/h1&gt;

&lt;h4 id=&#34;voorbeeld-project&#34;&gt;Voorbeeld project&lt;/h4&gt;

&lt;p&gt;Wat is het probleem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ik wil Native C++ methods kunnen aanroepen vanuit C#. Dit kan met de &lt;code&gt;DllImport&lt;/code&gt; attribute.&lt;/li&gt;
&lt;li&gt;Ik wil structs kunnen remarshallen die uit de native code komen. Dit kan met &lt;code&gt;StructLayout&lt;/code&gt; en &lt;code&gt;PtrToStructrue&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ik wil een char* mappen op een C# string: gebruik &lt;code&gt;[MarshalAsAttribute(UnmanagedType.LPStr)]&lt;/code&gt; in uw C# struct.&lt;/li&gt;
&lt;li&gt;Ik wil parameters mee kunnen geven: gebruik de juiste calling method (STD of DECL) instelling, zie &lt;code&gt;CallingConvention&lt;/code&gt; op &lt;code&gt;UnmanagedFunctionPointer&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#pragma once

#ifdef _DLL 
#define DllExImport __declspec(dllexport) 
#else 
#define DllExImport __declspec(dllimport) 
#endif

struct MyStruct
{
    char* id;
    char* description;
};

DllExImport MyStruct* __stdcall GetSignals();
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;quot;stdafx.h&amp;quot;
#include &amp;quot;TestClass.h&amp;quot;

DllExImport MyStruct* __stdcall GetSignals()
{
    static MyStruct a[] =
    {
        { &amp;quot;id1&amp;quot;, &amp;quot;desc1&amp;quot; },
        { &amp;quot;id2&amp;quot;, &amp;quot;desc2&amp;quot; },
        { &amp;quot;id3&amp;quot;, &amp;quot;desc3&amp;quot; }
    };
    return a;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;namespace structArrayImportTest
{
    #region

    using System;
    using System.Runtime.InteropServices;

    #endregion

    internal class StructImporter
    {
        // Charset.Ansi is not needed it seems
        [DllImport(&amp;quot;kernel32.dll&amp;quot;, EntryPoint = &amp;quot;LoadLibrary&amp;quot;)]
        private static extern IntPtr LoadLibrary(
            [MarshalAs(UnmanagedType.LPStr)] string lpLibFileName);

        [DllImport(&amp;quot;kernel32.dll&amp;quot;, EntryPoint = &amp;quot;GetProcAddress&amp;quot;)]
        private static extern IntPtr GetProcAddress(IntPtr hModule,
                                                    [MarshalAs(UnmanagedType.LPStr)] string lpProcName);

        [DllImport(&amp;quot;kernel32&amp;quot;, SetLastError ###### true, EntryPoint  &amp;quot;GetProcAddress&amp;quot;)]
        private static extern IntPtr GetProcAddressOrdinal(IntPtr hModule, IntPtr procName);

        [DllImport(&amp;quot;kernel32.dll&amp;quot;, EntryPoint = &amp;quot;FreeLibrary&amp;quot;)]
        private static extern bool FreeLibrary(int hModule);

        [StructLayout(LayoutKind.Sequential)]
        public class MyStruct
        {
            [MarshalAsAttribute(UnmanagedType.LPStr)]
            public string _id;
            [MarshalAsAttribute(UnmanagedType.LPStr)]
            public string _description;
        }

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        public delegate IntPtr fGetSignals();

        public fGetSignals GetSignals;

        public void Import()
        {
            IntPtr lib = LoadLibrary(@&amp;quot;C:&amp;lt;br/&amp;gt;Users&amp;lt;br/&amp;gt;bkwog&amp;lt;br/&amp;gt;Documents&amp;lt;br/&amp;gt;Visual Studio 2012&amp;lt;br/&amp;gt;Projects&amp;lt;br/&amp;gt;structArrayExportTest&amp;lt;br/&amp;gt;Debug&amp;lt;br/&amp;gt;structArrayExportTest.dll&amp;quot;);
            // gebruik dumpbin /exports [bla.dll] om ordinal &amp;amp; name van exported functions te bepalen.
            IntPtr signalsHandle = GetProcAddressOrdinal(lib, new IntPtr(1));
            GetSignals = (fGetSignals) Marshal.GetDelegateForFunctionPointer(signalsHandle, typeof (fGetSignals));
            IntPtr myStructs = GetSignals();

            int structSize = Marshal.SizeOf(typeof(MyStruct));
            Console.WriteLine(structSize);

            for (int i = 0; i &amp;lt; 3; ++i)
            {
                // What&#39;s the difference between toInt32 &amp;amp; 64 here? Both work...
                IntPtr data = new IntPtr(myStructs.ToInt64() + structSize * i);
                MyStruct ms = (MyStruct)Marshal.PtrToStructure(data, typeof(MyStruct));

                Console.WriteLine(&amp;quot;id: &amp;quot; + ms._id + &amp;quot; - descr: &amp;quot; + ms._description );
            }
        }

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;calling-convention&#34;&gt;Calling convention&lt;/h4&gt;

&lt;p&gt;In te stellen via C++ project settings -&amp;gt; advanced -&amp;gt; calling convention, voor alles, of per functie met &lt;code&gt;__stdcall&lt;/code&gt;. C# werkt hiet default mee. Aanpasbaar in het attribute, zie boven.&lt;/p&gt;

&lt;p&gt;Als de calling convention niet overeen zou komen, krijg je bij het uitvoeren in de C# code de volgende fout:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;call to PInvoke function &amp;lsquo;structArrayImportTest!structArrayImportTest.StructImporter+fGetSignals::Invoke&amp;rsquo; has unbalanced the stack. This is likely because the managed PInvoke signature does not match the unmanaged target signature. Check that the calling convention and parameters of the PInvoke signature match the target unmanaged signature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;dumpbin&#34;&gt;dumpbin&lt;/h4&gt;

&lt;p&gt;Als je niet met ordinals wenst te werken maar de volledige naam van de functie kan jet met &lt;code&gt;dumpbin.exe&lt;/code&gt; dit achterhalen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:&amp;lt;br/&amp;gt;Program Files (x86)&amp;lt;br/&amp;gt;Microsoft Visual Studio 10.0&amp;lt;br/&amp;gt;Common7&amp;lt;br/&amp;gt;IDE&amp;gt;dumpbin /exports TfsAdmin.exe structArrayExportTest.dll
Microsoft (R) COFF/PE Dumper Version 10.00.40219.01
Copyright (C) Microsoft Corporation.  All rights reserved.


Dump of file TfsAdmin.exe

File Type: EXECUTABLE IMAGE

Dump of file structArrayExportTest.dll

File Type: DLL

  Section contains the following exports for structArrayExportTest.dll

    00000000 characteristics
    52A888CA time date stamp Wed Dec 11 16:46:18 2013
        0.00 version
           1 ordinal base
           2 number of functions
           2 number of names

    ordinal hint RVA      name

          1    0 00011113 ?GetSignals@@YAPAUTestStruct@@XZ
          2    1 000110E6 ?GetSize@@YAPAHXZ

  Summary

        1000 .data
        1000 .idata
        3000 .rdata
        3000 .reloc
       11000 .rsrc
        8000 .text
       10000 .textbss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Merk op dat de functie &lt;code&gt;GetSignals&lt;/code&gt; hier niet die naam heeft, maar &lt;code&gt;?GetSignals@@YAPAUTestStruct@@XZ&lt;/code&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>threads</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/threads/</link>
      <pubDate>Fri, 06 Dec 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/threads/</guid>
      <description>

&lt;h1 id=&#34;threads&#34;&gt;Threads&lt;/h1&gt;

&lt;h3 id=&#34;locking-en-singletons&#34;&gt;Locking en singletons&lt;/h3&gt;

&lt;p&gt;See &lt;a href=&#34;http://csharpindepth.com/Articles/General/Singleton.aspx&#34;&gt;C#In Depth: Implementing the Singleton pattern in C#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;een &lt;code&gt;lock()&lt;/code&gt; is heel duur om uit te voeren, daarom wordt er een null check hierrond nog eens geschreven, dat heet &lt;strong&gt;double-check locking&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;        internal static ContextViewPresenter instance;
        private static readonly Object syncRoot = new Object();
        public static ContextViewPresenter Instance
        {
            get
            {
                if (instance ###### null)
                {
                    lock (syncRoot)
                    {
                        if (instance ###### null)
                        {
                            instance = new ContextViewPresenter(UserEnvironmentDataProviderSingleton.Instance);                            
                        }
                    } 
                }
                return instance;
            }
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;############ Thread-local static variables ############&lt;/p&gt;

&lt;p&gt;In java kan men &lt;code&gt;ThreadLocal&amp;lt;&amp;gt;&lt;/code&gt; gebruiken om iets per thread te storen (zoals de gebruiker van een webpagina die per request van de &lt;code&gt;WebServlet&lt;/code&gt; één nieuwe Thread aanmaakt). &lt;br/&gt;&lt;br/&gt;
In C# kan dit ook met de attribute &lt;code&gt;[ThreadStatic]&lt;/code&gt; voor een field te plaatsen.&lt;/p&gt;

&lt;p&gt;❗ Opgelet met ASP.NET - IIS heeft dan een shared threadpool geconfigureerd waar jij geen controle over hebt. Dit wil zeggen dat x threads herbruikt worden, en dus ook uw threadlocal storage.&lt;/p&gt;

&lt;p&gt;Oplossing(en): (zie ook &lt;a href=&#34;http://piers7.blogspot.be/2005/11/threadstatic-callcontext-and_02.html&#34;&gt;hier&lt;/a&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clear waarde op einde van elke request&lt;/li&gt;
&lt;li&gt;Gebruik &lt;code&gt;HttpContext&lt;/code&gt; van ASP.NET zelf in plaats van &lt;code&gt;[ThreadStatic]&lt;/code&gt;. (Zou probleem kunnen zijn in uw domein laag&amp;hellip;)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>csharp</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/</link>
      <pubDate>Tue, 03 Dec 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/</guid>
      <description>

&lt;h1 id=&#34;code-csharp&#34;&gt;code &amp;gt;&amp;gt; Csharp&lt;/h1&gt;

&lt;h2 id=&#34;inhoudsopgave&#34;&gt;Inhoudsopgave&lt;/h2&gt;

&lt;p&gt;&lt;img style=&#39;&#39; src=&#39;http://www.brainbaking.com/img/indexmenu&gt;code/csharp|js navbar nocookie&amp;rsquo;&amp;gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>