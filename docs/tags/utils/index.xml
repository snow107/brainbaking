<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Utils on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/utils/</link>
    <description>Recent content in Utils on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Mon, 17 Mar 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.brainbaking.com/tags/utils/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>utils</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/utils/</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/utils/</guid>
      <description>Utils Partials ObjectExtensions Waarom? Deep clone van een object maken zonder de boel te (de)-serialiseren.
Bron: https://raw.github.com/Burtsev-Alexey/net-object-deep-copy/master/ObjectExtensions.cs - thank you Alexey
public static class ObjectExtensions { private static readonly MethodInfo CloneMethod = typeof (Object).GetMethod(&amp;quot;MemberwiseClone&amp;quot;, BindingFlags.NonPublic | BindingFlags.Instance); public static bool IsPrimitive(this Type type) { if (type ###### typeof (String)) return true; return (type.IsValueType &amp;amp; type.IsPrimitive); } public static Object Copy(this Object originalObject) { return InternalCopy(originalObject, new Dictionary&amp;lt;Object, Object&amp;gt;(new ReferenceEqualityComparer())); } private static Object InternalCopy(Object originalObject, IDictionary&amp;lt;Object, Object&amp;gt; visited) { if (originalObject ###### null) return null; var typeToReflect = originalObject.</description>
    </item>
    
    <item>
      <title>utils</title>
      <link>http://www.brainbaking.com/wiki/code/java/utils/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/java/utils/</guid>
      <description>Utility methods SetUtils public class SetUtil { public static &amp;lt;T&amp;gt; Set&amp;lt;T&amp;gt; asSet(T... elements) { return new HashSet&amp;lt;T&amp;gt;(Arrays.asList(elements)); } public static &amp;lt;T&amp;gt; boolean bevat(Set&amp;lt;T&amp;gt; someSet, Predicate&amp;lt;T&amp;gt; predicate) { return !Sets.filter(someSet, predicate).isEmpty(); } public static &amp;lt;E&amp;gt; Set&amp;lt;E&amp;gt; cast(Set&amp;lt;?&amp;gt; someSet, Class&amp;lt;E&amp;gt; classToCastTo) { Set&amp;lt;E&amp;gt; newSet = new LinkedHashSet&amp;lt;E&amp;gt;(); for (Object object : someSet) { newSet.add(classToCastTo.cast(object)); } return newSet; } }  ListUtils public class ListUtil { public static &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; sort(Collection&amp;lt;T&amp;gt; collection, Comparator&amp;lt;?</description>
    </item>
    
  </channel>
</rss>