<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linqtosql on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/linqtosql/</link>
    <description>Recent content in Linqtosql on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Tue, 14 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.brainbaking.com/tags/linqtosql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>linqtosql</title>
      <link>http://www.brainbaking.com/wiki/code/csharp/linqtosql/</link>
      <pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/csharp/linqtosql/</guid>
      <description>code:csharp &amp;gt;&amp;gt; Linqtosql Zie ook MSDN LinqToSql pagina
Basic Principe is een DataContext object aanmaken waar je je connectionstring aan meegeeft (Log kan naar Console.Out ofzo). Vanaf dan via het context object werken:
 context.GetTable&amp;lt;T&amp;gt;().Where(t ######&amp;gt; t.Property x).ToList() om te queryen bij deleten of wijzigen: .Attach(entity) en .DeleteOnSubmit(entity) &amp;hellip;  Modellen: annoteren met [Table(Name######&amp;quot;tabelnaam&amp;quot;)], kolommen met [Column(Name&amp;quot;kolomnaam&amp;quot;, IsPrimaryKey ###### true, IsDbGenerated true)]
Wijzigingen doorvoeren met SubmitChanges() door simpelweg properties van modellen te wijzigen, zoals een &amp;ldquo;echte&amp;rdquo; ER tool.</description>
    </item>
    
  </channel>
</rss>