<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scons on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/scons/index.xml</link>
    <description>Recent content in Scons on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <atom:link href="http://www.brainbaking.com/tags/scons/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>scons</title>
      <link>http://www.brainbaking.com/wiki/code/build/scons/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/build/scons/</guid>
      <description>

&lt;h1 id=&#34;scons&#34;&gt;SCons&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scons.org/wiki/FrontPage&#34;&gt;SCons Wiki Frontpage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scons.org/doc/HTML/scons-man.html#lbAF&#34;&gt;Single HTML Manpage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.scons.org/doc/0.96.90/HTML/scons-user/a3061.html&#34;&gt;SCons Construction Variables&lt;/a&gt; om bvb de compiler te specifiëren.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;opsplitsen-sconstruct-en-sconscript&#34;&gt;Opsplitsen SConstruct en SConscript&lt;/h3&gt;

&lt;p&gt;Waarom? &lt;a href=&#34;http://www.scons.org/doc/2.1.0/HTML/scons-user/c3356.html&#34;&gt;http://www.scons.org/doc/2.1.0/HTML/scons-user/c3356.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build output definiëren, duplicate source files, etc. Voorbeeld &lt;code&gt;SConstruct&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;SConscript(&#39;SConscript&#39;, variant_dir######&#39;build&#39;, duplicate0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voorbeeld file om Google Test mee te (proberen) builden &lt;code&gt;SConscript&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def Glob( pattern ###### &#39;*.*&#39;, dir  &#39;.&#39; ):
    import os, fnmatch
    files = []
    for file in os.listdir( Dir(dir).srcnode().abspath ):
        if fnmatch.fnmatch(file, pattern) :
            files.append( os.path.join( dir, file ) )
    return files

# construction variables: http://www.scons.org/doc/0.96.90/HTML/scons-user/a3061.html
env ###### Environment(CXX  &#39;g++&#39;,
                                    CPPPATH = &#39;../:./include&#39;)

# add to library search path env.Append(LIBPATH = [&#39;/usr/local/lib/&#39;])
# add to libraries link path env.Append(LIBS = [&#39;SDL_image&#39;,&#39;GL&#39;])

env.Append(CPPFLAGS = [&#39;-isystem ./include&#39;])
env.Append(CXXFLAGS = [&#39;-g&#39;, &#39;-Wall&#39;, &#39;-Wextra&#39;, &#39;-pthread&#39;])

env.SharedLibrary(target ###### &#39;gtest_main.dll&#39;, source  [&#39;../src/gtest-all.cc&#39;])

# after that, we should link with gtest_main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Poging tot converteren van deze voorbeeld &lt;code&gt;Makefile&lt;/code&gt; - supplied bij de gtest sources:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project&#39;s root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn&#39;t modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ..

# Where to find user code.
USER_DIR = ../samples

# Flags passed to the preprocessor.
# Set Google Test&#39;s header directory as a system directory, such that
# the compiler doesn&#39;t generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = sample1_unittest

# All Google Test headers.  Usually you shouldn&#39;t change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h &amp;lt;br/&amp;gt;
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
    rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn&#39;t tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test&#39;s
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
    $(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c &amp;lt;br/&amp;gt;
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
    $(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c &amp;lt;br/&amp;gt;
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
    $(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
    $(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

sample1.o : $(USER_DIR)/sample1.cc $(USER_DIR)/sample1.h $(GTEST_HEADERS)
    $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc

sample1_unittest.o : $(USER_DIR)/sample1_unittest.cc &amp;lt;br/&amp;gt;
                     $(USER_DIR)/sample1.h $(GTEST_HEADERS)
    $(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc

sample1_unittest : sample1.o sample1_unittest.o gtest_main.a
    $(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>