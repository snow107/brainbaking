<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Brain Baking</title>
    <link>https://brainbaking.com/tags/java/</link>
    <description>Recent content in Java on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Fri, 06 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://brainbaking.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Death to pseudocode?</title>
      <link>https://brainbaking.com/post/pseudocode/</link>
      <pubDate>Fri, 06 Apr 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/pseudocode/</guid>
      <description>Coming across pseudocode isn&amp;rsquo;t something that might happen every day except if you&amp;rsquo;re used to browsing through the more theoretical and academic oriented &amp;ldquo;computer science&amp;rdquo; handbooks. We, the practical &amp;ldquo;software engineers&amp;rdquo; of nowadays, usually stop searching for something after our browser hits Stackoverflow. Stack is loaded with technical samples, gists of code, and lot&amp;rsquo;s of won&amp;rsquo;t-ever-compile-wrongly-copy-pasted code. Real code. If you&amp;rsquo;re working in Java, you probably end up with articles full of Java snippets.</description>
    </item>
    
    <item>
      <title>Custom Webdriver Page Factories</title>
      <link>https://brainbaking.com/post/custom-webdriver-page-factories/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/custom-webdriver-page-factories/</guid>
      <description>The problem: Webdriver elements returned by driver.FindElement() are too generic. There&amp;rsquo;re the Text, SendKeys() and Click() methods/properties (depending your on C#/Java implementation). The solution is to simply wrap all elements inside custom HTML objects which contain specific methods like ShouldContainValue or Type (okay, that&amp;rsquo;s a one-to-one mapping with SendKeys(), but it&amp;rsquo;s a lot less technical!). Instead of
 [FindsBy(How = How.CssSelector, Using = &amp;quot;.ux-desktop-taskbar-startbutton&amp;quot;)] private IWebElement startButton; [FindsBy(How = How.CssSelector, Using = &amp;quot;.</description>
    </item>
    
    <item>
      <title>selenium</title>
      <link>https://brainbaking.com/wiki/code/java/testing/selenium/</link>
      <pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/testing/selenium/</guid>
      <description>Selenium Scenario Testing Ter info: Webdriver = selenium 2.x.
Webdriver samen met PhantomJS opzet Headless webdriver testen draaien gaat met HTMLUnit - vanaf 2.x zit org.openqa.selenium.htmlunit.HtmlUnitDriver ook in de jar. De JS die daar evaluated wordt is echter Rhino JS en niet native browser stuff. We kunnen in de plaats code/javascript/testing/phantomjs gebruiken - deze driver zit in een andere jar. In de centrale maven repo:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;selenium-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.32.0&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.</description>
    </item>
    
    <item>
      <title>monitoring</title>
      <link>https://brainbaking.com/wiki/code/java/monitoring/</link>
      <pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/monitoring/</guid>
      <description>Monitoring JBOSS As a Windows service &amp;amp; monitoring params https://community.jboss.org/wiki/JBossNativeWindows
Als JBoss via jbossvc.exe als een windows service geconfigureerd is, lijkt het moeilijk om JAVA_OPTS mee te geven om JMX poorten in te stellen e.a. (debugging misschien) - zie onder. Die executable callt basically run.bat, dus alle customizaties gewoon daar doen.
Staat standaard dit in:
set JAVA_OPTS######-Dprogram.name%PROGNAME% %JAVA_OPTS%  Java JMX Monitoring Op de JVM: gebeurt met JMX.
Enablen Params voor JMX te enablen op de queue:</description>
    </item>
    
    <item>
      <title>Metaprogramming instead of duplication</title>
      <link>https://brainbaking.com/post/metaprogramming-convention-dry/</link>
      <pubDate>Fri, 14 Mar 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/metaprogramming-convention-dry/</guid>
      <description>So&amp;hellip; What&amp;rsquo;s up with all that duplication in your unit tests? Let&amp;rsquo;s take a look at a very recognizable pattern when for instance using RhinoMock in C#:
 [TestInitialize] public void SetUp() { dbConfigurationMock = MockRepository.GenerateMock&amp;lt;IDbConfiguration&amp;gt;(); mountPointLoaderMock = MockRepository.GenerateMock&amp;lt;IMountPointLoader&amp;gt;(); userEnvironmentFactoryMock = MockRepository.GenerateMock&amp;lt;IUserEnvironmentFactory&amp;gt;(); userEnvironmentLoaderMock = MockRepository.GenerateMock&amp;lt;IUserEnvironmentLoader&amp;gt;(); // ...  We agreed to suffix each instance variable with &amp;lsquo;Mock&amp;rsquo; if it&amp;rsquo;s a mock. That way, when you scroll down to an actual test case, it&amp;rsquo;s clear to everyone what&amp;rsquo;s what: mocks, stubs, actual implementations, and so forth.</description>
    </item>
    
    <item>
      <title>home</title>
      <link>https://brainbaking.com/wiki/code/java/</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/</guid>
      <description>code:java &amp;gt;&amp;gt; Home Inhoudsopgave .|js navbar nocookie&amp;rsquo;&amp;gt;</description>
    </item>
    
    <item>
      <title>resources</title>
      <link>https://brainbaking.com/wiki/code/java/resources/</link>
      <pubDate>Wed, 29 Jan 2014 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/resources/</guid>
      <description>Resource handling Opkuisen in try/finally block Vanaf Java 7 zit er ook ARM (automatic resource block management) in met een aanpassing op de try blocks:
try ( FileInputStream stockQuoteReader = new FileInputStream(&amp;quot;StockQuotes.txt&amp;quot;); FileOutputStream stockQuoteWriter = new FileOutputStream(&amp;quot;StockQuotes.txt&amp;quot;) ) { int var; while((var###### stockQuoteReader.read()) ! -1 ) stockQuoteWriter.write(); }   The new construct extends try blocks to declare resources much like is the case with for loops. Any resource declared within a try block opening will be closed.</description>
    </item>
    
    <item>
      <title>Enhancing the builder pattern with closures</title>
      <link>https://brainbaking.com/post/builders-dsl/</link>
      <pubDate>Thu, 14 Nov 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/builders-dsl/</guid>
      <description>This post is inspired by Venkat Subramaniam&amp;rsquo;s Devoxx 2013 talk Thinking Functional Style. See downloads at agiledeveloper.com which has a rather cool Groovy example.
Classic builders For years, I&amp;rsquo;ve been using the builder pattern to quickly create new objects to be inserted into the database or to inject our domain objects with the required data. We started with so called &amp;ldquo;Object Mothers&amp;rdquo;, static methods which simply create and fill up an object, passing in a huge amount of parameters.</description>
    </item>
    
    <item>
      <title>rest</title>
      <link>https://brainbaking.com/wiki/code/java/rest/</link>
      <pubDate>Wed, 22 May 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/rest/</guid>
      <description>Rest Calls plegen met Java Jersey ❗️ User Guide: http://jersey.java.net/nonav/documentation/latest/user-guide.html
Server maven &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.sun.jersey&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-server&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.17&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.sun.jersey&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-json&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.17&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.sun.jersey&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-servlet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.17&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  jersey-json is niet nodig als je geen JSON wil gebruiken. jersey-servlet ook niet als je geen Servlet 2.x gebruikt.
servlet 2.x config Dit moet in web.xml:
&amp;lt;servlet&amp;gt; &amp;lt;servlet-name&amp;gt;jersey-serlvet&amp;lt;/servlet-name&amp;gt; &amp;lt;servlet-class&amp;gt;com.sun.jersey.spi.container.servlet.ServletContainer&amp;lt;/servlet-class&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;com.sun.jersey.config.property.packages&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;be.klak.package&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;init-param&amp;gt; &amp;lt;param-name&amp;gt;com.sun.jersey.api.json.POJOMappingFeature&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;true&amp;lt;/param-value&amp;gt; &amp;lt;/init-param&amp;gt; &amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt; &amp;lt;/servlet&amp;gt; &amp;lt;servlet-mapping&amp;gt; &amp;lt;servlet-name&amp;gt;jersey-serlvet&amp;lt;/servlet-name&amp;gt; &amp;lt;url-pattern&amp;gt;/rest/*&amp;lt;/url-pattern&amp;gt; &amp;lt;/servlet-mapping&amp;gt;  ❗️ Om Jersey samen met google app engine te kunnen gebruiken, moet je ook dit nog toevoegen:</description>
    </item>
    
    <item>
      <title>java</title>
      <link>https://brainbaking.com/wiki/code/java/</link>
      <pubDate>Fri, 17 May 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/</guid>
      <description>Java Stuff Inhoudsopgave java|js context navbar nocookie&amp;rsquo;&amp;gt;
Snippets Upcasting hacks &amp;amp; tricks Vies van instanceof? Gebruik isAssignableFrom om op een abstracte logica te implementeren die een interface nodig heeft enkele niveaus verder. Op die manier hebben we geen diamond inheritance nodig! Check it out:
@SuppressWarnings(&amp;quot;unchecked&amp;quot;) final void generateUidIfNotYetFilledIn() { if (HasUid.class.isAssignableFrom(this.getClass())) { HasUid hasUid = (HasUid) this; if (isEmpty(hasUid.getUid())) { hasUid.setUid(getEntityUidGenerator().generateFor((Class&amp;lt;? extends HasUid&amp;gt;) this.getClass())); } } }  ReplaceAll case Insensitive Geen StringUtils van apache commons method beschikbaar als replaceIgnoreCase&amp;hellip; Stom!</description>
    </item>
    
    <item>
      <title>profiling</title>
      <link>https://brainbaking.com/wiki/code/java/profiling/</link>
      <pubDate>Fri, 17 May 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/profiling/</guid>
      <description>Profiling Voor JMX, monitoring en andere: zie code/java/monitoring
Verschillende profilers  jconsole: provided in JDK visualvm: provided in JDK Eclipse Memory Analyzer: http://www.eclipse.org/mat/ YourKit: http://www.yourkit.com/  Remote connecten gaat meestal via JMX, behalve your YourKit:
Remote connecten met YourKit Zie http:*www.yourkit.com/docs/12/help/profiling_j2ee_remote.jsp en http:*www.yourkit.com/docs/95/help/agent.jsp - Je moet een agentpath JVM param meegeven om dit te kunnen doen:
-agentpath:/usr/yourkit/libyjpagent.so######delay10000,sessionname=Tomcat  Zet niet te veel opties in agentpath om dingen te optimaliseren of het proben van de PermGen stack werkt niet.</description>
    </item>
    
    <item>
      <title>strategie</title>
      <link>https://brainbaking.com/wiki/code/java/testing/strategie/</link>
      <pubDate>Fri, 17 May 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/testing/strategie/</guid>
      <description>Test strategie Er zijn verschillende soorten testen en deze komen (eventueel) in elke laag terug.
Unit testen * Wat? Testen of een kleine unit/component op zich werkt. * Welke gevallen? alle gevallen: elk successpad (alle boundary conditions), alle mogelijke failure paden * Eventueel vriendjes van deze component wegmocken (let op voor mockitis!) * Testen zonder databank of andere integratie (rest calls) * Extenden van BaseTestCase -&amp;gt; NOOIT meer `[MockitoAnnotations.initMocks(this)](http://mockito.googlecode.com/svn/branches/1.6/javadoc/org/mockito/MockitoAnnotations.html)` uitvoeren!</description>
    </item>
    
    <item>
      <title>aspectj</title>
      <link>https://brainbaking.com/wiki/code/java/dynamica/aspectj/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/dynamica/aspectj/</guid>
      <description>Loadtime weaving met aspectJ Spring weaving Zie demo projectje: ❗️ Vanaf versie 3.0 moet spring-instrument in plaats van spring-agent gebruikt worden! (bestaat niet meer)
Zie http://static.springsource.org/spring/docs/3.1.0.RELEASE/reference/htmlsingle/#aop
Weavers:
 aspectj jar -javaagent:C:&amp;lt;br/&amp;gt;dvl.home&amp;lt;br/&amp;gt;env&amp;lt;br/&amp;gt;aspectj&amp;lt;br/&amp;gt;aspectjweaver-1.6.11.jar spring-instrument jar -javaagent:C:/dvl.home/prj/comeet/tools/spring-instrument-3.1.0.RELEASE.jar  Wat heb je nodig om loadtime weaving te laten werken applicationContext.xml  met spring-configured (zelfde als org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect bean, zie spring docs) met load-time-weaver op  &amp;lt;?xml version######&amp;quot;1.0&amp;quot; encoding&amp;quot;UTF-8&amp;quot;?&amp;gt; &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot; xsi:schemaLocation=&amp;quot;http:*www.springframework.org/schema/beans http:*www.springframework.org/schema/beans/spring-beans-3.0.xsd http:*www.</description>
    </item>
    
    <item>
      <title>dynamica</title>
      <link>https://brainbaking.com/wiki/code/java/dynamica/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/dynamica/</guid>
      <description>Dynamica Hier zitten stukjes code om java meer dynamiek te geven (voorzover dat mogelijk is&amp;hellip;)
Veel collectie gerelateerde dingen (filter, map etc) is reeds geïmplementeerd: http://code.google.com/p/guava-libraries/
Reduce met optellen public class CollectionUtil { public static interface EnkelvoudigeTeller&amp;lt;TellerType&amp;gt; { boolean magMeegeteldWorden(TellerType object); } public static interface MeervoudigeTeller&amp;lt;TellerType&amp;gt; { int geefAantalMeegeteld(TellerType object); } public static &amp;lt;TellerType&amp;gt; int tel(Collection&amp;lt;TellerType&amp;gt; objecten, MeervoudigeTeller&amp;lt;TellerType&amp;gt; teller) { int geteld = 0; for (TellerType object : objecten) { geteld += teller.</description>
    </item>
    
    <item>
      <title>encoding</title>
      <link>https://brainbaking.com/wiki/code/java/encoding/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/encoding/</guid>
      <description>Page Encoding Alles zou in UTF-8 mode moeten staan. Daarvoor moeten verschillende dingen aangepast worden. Een goede manier om te proberen of dit werkt is in een inputfield ALT+456 te typen Dat zou ╚ moeten genereren, een 90° gedraaide dubbelgelijnde hoek.
Inspect via debug in een action geeft op de form dan normaal ǈ als het niet correct geëncode is. De waarde naar de DB kopiëren en dan terugkomen terwijl de DB niet correct geëncode is geeft + weer dan.</description>
    </item>
    
    <item>
      <title>google-api</title>
      <link>https://brainbaking.com/wiki/code/java/google-api/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/google-api/</guid>
      <description>Google-api Google Endpoints Client lib Genereren van java files Timestamp: Tue Dec 11 12:41:31 CET 2012 #!/bin/sh echo &amp;quot;--- COMPILING...&amp;quot; mvn clean compile echo &amp;quot;--- REMOVING OLD FILES &amp;amp; COPYING TO WEB-INF...&amp;quot; rm -rf ./war/WEB-INF/devices-* rm -rf ./war/WEB-INF/classes cp -rf ./target/classes ./war/WEB-INF/ echo &amp;quot;--- GENERATING ENDPOINTS...&amp;quot; /Users/jefklak/development/appengine/bin/endpoints.sh get-java-client-lib be.klak.gatecontrolweb.DevicesController echo &amp;quot;--- EXTRACTING SOURCE JAR...&amp;quot; cd ./war/WEB-INF rm -rf devices unzip devices-v1-java.zip cd devices unzip `ls | grep sources.jar` cp -rf com ~/development/gatecontrol/receiver/src/main/java echo &amp;quot;--- DONE!</description>
    </item>
    
    <item>
      <title>innerclasses</title>
      <link>https://brainbaking.com/wiki/code/java/dynamica/innerclasses/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/dynamica/innerclasses/</guid>
      <description>code:java:dynamica &amp;gt;&amp;gt; Innerclasses Java is geen dynamische taal maar je kan wel gebruik maken van een aantal handige trucjes om duplicatie te vermijden. Bijvoorbeeld om state bij te houden en de implementatie zelf in een inner klasse te voorzien:
private interface CrmEndpointWorker { void call(Holder&amp;lt;Status&amp;gt; status, Holder&amp;lt;String&amp;gt; result); } public CrmImportGatewayAction forCreation() { return new CrmImportGatewayAction(Action.CREATE); } public CrmImportGatewayAction forUpdating() { return new CrmImportGatewayAction(Action.UPDATE); } public CrmImportGatewayAction forDeletion() { return new CrmImportGatewayAction(Action.</description>
    </item>
    
    <item>
      <title>listmerger</title>
      <link>https://brainbaking.com/wiki/code/java/dynamica/listmerger/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/dynamica/listmerger/</guid>
      <description>code:java:dynamica &amp;gt;&amp;gt; Listmerger public final class ListMerger&amp;lt;ItemType, ItemTypeAfterConversion&amp;gt; { private final Function&amp;lt;ItemType, ItemTypeAfterConversion&amp;gt; itemConverterFn; public ListMerger() { this.itemConverterFn = identityFn(); } public ListMerger(Function&amp;lt;ItemType, ItemTypeAfterConversion&amp;gt; itemConverterFn) { this.itemConverterFn = itemConverterFn; } private Function&amp;lt;ItemType, ItemTypeAfterConversion&amp;gt; identityFn() { return new Function&amp;lt;ItemType, ItemTypeAfterConversion&amp;gt;() { @SuppressWarnings(&amp;quot;unchecked&amp;quot;) @Override public ItemTypeAfterConversion apply(ItemType input) { return (ItemTypeAfterConversion) input; } }; } public final void mergeLists(List&amp;lt;? extends ItemType&amp;gt; oldList, List&amp;lt;? extends ItemType&amp;gt; newList, ListMergable&amp;lt;ItemType&amp;gt; mergable) { List&amp;lt;ItemTypeAfterConversion&amp;gt; oldTransformed = new ArrayList&amp;lt;ItemTypeAfterConversion&amp;gt;(transform(oldList, itemConverterFn)); List&amp;lt;ItemTypeAfterConversion&amp;gt; newTransformed = new ArrayList&amp;lt;ItemTypeAfterConversion&amp;gt;(transform(newList, itemConverterFn)); for (ItemType item : new ArrayList&amp;lt;ItemType&amp;gt;(oldList)) { if (!</description>
    </item>
    
    <item>
      <title>logging</title>
      <link>https://brainbaking.com/wiki/code/java/logging/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/logging/</guid>
      <description>code:java &amp;gt;&amp;gt; Logging Log4j Gebruiken over verschillende threads heen Probleem: JMS handlers die bijvoorbeeld tegelijk starten en loggen naar éénzelfde file met Logger.getLogger(x). Als een thread crasht en de andere afwerkt, maar we de volgorde van wegschrijven niet kunnen garanderen, hoe kunnen we dan dit onerscheid maken?
Oplossing: met NDC (Nested Diagnostic Context) - zie http://logging.apache.org/log4j/1.2/manual.html
Voorbeeld:
protected static final Logger jmsLogger = Logger.getLogger(&amp;quot;jmsLogger&amp;quot;); private void log(String message) { jmsLogger.</description>
    </item>
    
    <item>
      <title>oraclegeometry</title>
      <link>https://brainbaking.com/wiki/code/java/oraclegeometry/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/oraclegeometry/</guid>
      <description>Oracle Geometries SDO_GEOMETRY Mappen in de DB Via Hibernate: met een UserType implementatie
public Object nullSafeGet(ResultSet resultSet, String[] strings, Object o) throws HibernateException, SQLException { STRUCT geometry = (STRUCT) resultSet.getObject(strings[0]); if (resultSet.wasNull() || geometry ###### null) { return null; } return new Geometry(JGeometry.load(geometry)); } /** * setNull(i, Types.OTHER or Types.STRUCT) results in &amp;quot;unknown column type&amp;quot; exceptions! */ public void nullSafeSet(PreparedStatement preparedStatement, Object o, int i) throws HibernateException, SQLException { if (o ###### null) { preparedStatement.</description>
    </item>
    
    <item>
      <title>persistence</title>
      <link>https://brainbaking.com/wiki/code/java/persistence/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/persistence/</guid>
      <description>Persistence JPA Collections mapping Hoe map ik een koppeltabel zonder die als entiteit zelf in ons domein te hebben? Zo:
@OneToMany(fetch ###### LAZY, cascade { MERGE, PERSIST }) @JoinTable(name = &amp;quot;physicalzonezonealias&amp;quot;, joinColumns ###### @JoinColumn(name &amp;quot;physicalzone&amp;quot;, referencedColumnName = &amp;quot;id&amp;quot;), inverseJoinColumns ###### @JoinColumn(name &amp;quot;zonealias&amp;quot;, referencedColumnName = &amp;quot;id&amp;quot;)) @SequenceGenerator(name ###### &amp;quot;physicalzonezonealias_id&amp;quot;, sequenceName &amp;quot;physicalzonezonealias_id&amp;quot;, allocationSize = 1) @CollectionId(columns ###### @Column(name &amp;quot;id&amp;quot;), type ###### @Type(type &amp;quot;int&amp;quot;), generator = &amp;quot;physicalzonezonealias_id&amp;quot;) private List&amp;lt;Zonealias&amp;gt; zoneAliases = new ArrayList&amp;lt;Zonealias&amp;gt;();  Wat is hier leuk aan?</description>
    </item>
    
    <item>
      <title>play</title>
      <link>https://brainbaking.com/wiki/code/java/play/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/play/</guid>
      <description>Play! Framework 1.2 ❗️ Heel interessante .gitignore default configuratie voor Play terug te vinden op https://github.com/github/gitignore
Dependencies Toevoegen Toevoegen in dependencies.yml - default maven2 repo is niet nodig:
require: 1. play -&amp;gt; crud 2. org.easytesting -&amp;gt; fest-assert 1.4  Daarna altijd play dependencies --sync of eventueel play eclipsify en F5 op eclipse project.
Lokale repository als directory repositories: 1. Local_repo: type: iBiblio root: &amp;quot;file:///C:/Documents%20and%20Settings/Jefklak/.m2/repository/&amp;quot; contains: 1. be.klak -&amp;gt; * 2.</description>
    </item>
    
    <item>
      <title>play2</title>
      <link>https://brainbaking.com/wiki/code/java/play2/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/play2/</guid>
      <description>Play 2.0 Testing in Play 2.0 Controller testen een controller &amp;ldquo;action&amp;rdquo; (= method vanuit route) testen doen we op een &amp;ldquo;functionele&amp;rdquo; manier in plaats van de method direct aan te roepen:
controller
public static Result buyHorse() { Form&amp;lt;Horse&amp;gt; horseForm = form(Horse.class); Horse horse = horseForm.bindFromRequest().get(); System.out.println(horse.id); }  unit test
@Test public void buyHorse() { HashMap&amp;lt;String, String&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); map.put(&amp;quot;id&amp;quot;, &amp;quot;12&amp;quot;); callAction(HorseMarket.buyHorse(), new FakeRequest().withFormUrlEncodedBody(map)); }  Waarbij hierboven HorseMarket de routes ref is en niet de HorseMarket controller klasse zelf - deze:</description>
    </item>
    
    <item>
      <title>queues</title>
      <link>https://brainbaking.com/wiki/code/java/queues/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/queues/</guid>
      <description>code:java &amp;gt;&amp;gt; Queues Zie ook code/java/monitoring om JMX te enablen.
Via JMX (HornetQ) queues leegmaken Dit is een TestExecutionListener die je met @TestExecutionListeneres kan gebruiken om na elke test de queues leeg te maken:
public class QueueCleanerContextListener extends AbstractTestExecutionListener { public void cleanQueues() throws Exception { InitialContext initialContext = null; JMXConnector connector = null; try { connector = connectToQueue(); for (String queue : getJMSServerControl(connector).getQueueNames()) { getJMSQueueControl(connector, queue).removeMessages(null); } } finally { connector.</description>
    </item>
    
    <item>
      <title>reflectie</title>
      <link>https://brainbaking.com/wiki/code/java/reflectie/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/reflectie/</guid>
      <description>Reflectie, Classpath scanning etc Oplijsten van fields die enkel boolean en true zijn public static String listTrueBooleanFields(Object object) { List&amp;lt;String&amp;gt; parts = Lists.newArrayList(); try { for (Field field : object.getClass().getDeclaredFields()) { boolean accessibleFlag = field.isAccessible(); field.setAccessible(true); if (isTrueBooleanField(object, field)) { parts.add(makeCamelCaseNatural(field.getName())); } field.setAccessible(accessibleFlag); } } catch (Exception ex) { throw new RuntimeException(ex); } return StringUtils.join(parts, &amp;quot;, &amp;quot;); } private static boolean isTrueBooleanField(Object object, Field field) throws IllegalAccessException { return isBoolean(field) &amp;amp;&amp;amp; (Boolean) field.</description>
    </item>
    
    <item>
      <title>soap</title>
      <link>https://brainbaking.com/wiki/code/java/soap/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/soap/</guid>
      <description>code:java &amp;gt;&amp;gt; Soap Een simpele SOAP Client maken als Unit Test @Test public void processManageCustomers() throws Exception { URL url = new URL(&amp;quot;http://localhost:8888/bla&amp;quot;); HttpURLConnection conn = (HttpURLConnection) url.openConnection(); setSOAPPostHeaders(conn); IOUtils.copy(new FileInputStream(new File(&amp;quot;src/test/resources/example.xml&amp;quot;)), conn.getOutputStream()); String result = IOUtils.toString(conn.getInputStream()); assertThat(result).contains(&amp;quot;&amp;lt;return&amp;gt;something&amp;lt;/return&amp;gt;&amp;quot;); } private void setSOAPPostHeaders(HttpURLConnection conn) throws ProtocolException { conn.setRequestProperty(&amp;quot;Content-Type&amp;quot;, &amp;quot;text/xml; charset=utf-8&amp;quot;); conn.setRequestProperty(&amp;quot;SOAPAction&amp;quot;, &amp;quot;&amp;quot;); conn.setRequestMethod(&amp;quot;POST&amp;quot;); conn.setDoOutput(true); conn.setDoInput(true); }  Gebruik makende van apache commons
Endpoint URL met JAX-WS goed zetten Twee mogelijkheden:</description>
    </item>
    
    <item>
      <title>spring</title>
      <link>https://brainbaking.com/wiki/code/java/spring/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/spring/</guid>
      <description>Spring Wiring How to access target object behind proxy bean Zie http://www.techper.net/2009/06/05/how-to-acess-target-object-behind-a-spring-proxy/
@SuppressWarnings(&amp;quot;unchecked&amp;quot;) protected &amp;lt;Type&amp;gt; Type getTargetObject(Object proxy, Class&amp;lt;Type&amp;gt; targetClass) { try { if ((AopUtils.isJdkDynamicProxy(proxy))) { return (Type) getTargetObject(((Advised) proxy).getTargetSource().getTarget(), targetClass); } return (Type) proxy; // expected to be cglib proxy then, which is simply a specialized class } catch (Exception ex) { throw new IllegalStateException(ex); } }  Geen loadtime weaving? Geen probleem. Gebruik de static springContext accessor (maar met mate(n) natuurlijk:</description>
    </item>
    
    <item>
      <title>stubs</title>
      <link>https://brainbaking.com/wiki/code/java/testing/stubs/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/testing/stubs/</guid>
      <description>Stubs Embedded Jetty Zie http://docs.codehaus.org/display/JETTY/Embedding+Jetty
Stub Http server:
public class StubHttpServer implements StubServer { private RequestRecordingFilter filter = new RequestRecordingFilter(); private int port; private Server httpServer; private Map&amp;lt;String, ResettableHttpServlet&amp;gt; servlets = new HashMap&amp;lt;String, ResettableHttpServlet&amp;gt;(); public StubHttpServer(int port) { this.port = port; } public void addHttpServlet(String uri, final HttpServlet servlet) { addHttpServlet(uri, new ResettableHttpServlet() { @Override public void reset() { } @Override public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException { servlet.</description>
    </item>
    
    <item>
      <title>testing</title>
      <link>https://brainbaking.com/wiki/code/java/testing/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/testing/</guid>
      <description>Testing in Java code/java/testing|js&amp;rsquo;&amp;gt;
Acceptatietesten Zie &amp;gt;&amp;gt; code/java/testing/selenium
Mocking Static mocking met PowerMock PowerMock gebruikt een eigen Classloader om klassen in te laden. Als er veel testen powermock gebruiken gaat de build alsmaar trager worden. Om te vermijden dat de boel dicht slibt een speciale annotatie gebruiken:
@RunWith(PowerMockRunner.class) @PrepareForTest({WebApplicationContextUtils.class, SecurityManager.class }) @PowerMockIgnore({&amp;quot;org.apache.log4j&amp;quot;, &amp;quot;org.apache.commons.logging&amp;quot;, &amp;quot;org.apache.struts.util&amp;quot; }) public class Test { public void setUp() { PowerMockito.mockStatic(SecurityManager.class); } ... }  Het is niet meer nodig om in combinatie met mockito ook nog eens de @Mock initializatie te doen (met MockitoAnnotations.</description>
    </item>
    
    <item>
      <title>utils</title>
      <link>https://brainbaking.com/wiki/code/java/utils/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/utils/</guid>
      <description>Utility methods SetUtils public class SetUtil { public static &amp;lt;T&amp;gt; Set&amp;lt;T&amp;gt; asSet(T... elements) { return new HashSet&amp;lt;T&amp;gt;(Arrays.asList(elements)); } public static &amp;lt;T&amp;gt; boolean bevat(Set&amp;lt;T&amp;gt; someSet, Predicate&amp;lt;T&amp;gt; predicate) { return !Sets.filter(someSet, predicate).isEmpty(); } public static &amp;lt;E&amp;gt; Set&amp;lt;E&amp;gt; cast(Set&amp;lt;?&amp;gt; someSet, Class&amp;lt;E&amp;gt; classToCastTo) { Set&amp;lt;E&amp;gt; newSet = new LinkedHashSet&amp;lt;E&amp;gt;(); for (Object object : someSet) { newSet.add(classToCastTo.cast(object)); } return newSet; } }  ListUtils public class ListUtil { public static &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; sort(Collection&amp;lt;T&amp;gt; collection, Comparator&amp;lt;?</description>
    </item>
    
    <item>
      <title>vaadin</title>
      <link>https://brainbaking.com/wiki/code/java/vaadin/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/wiki/code/java/vaadin/</guid>
      <description>Vaadin 7 Javascript uitvoeren in de frontent @JavaScript({ &amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js&amp;quot;, &amp;quot;js_label.js&amp;quot; }) public class JsLabel extends AbstractJavaScriptComponent { public JsLabel(String xhtml) { getState().xhtml = xhtml; } @Override protected JsLabelState getState() { return (JsLabelState) super.getState(); } public static class JsLabelState extends JavaScriptComponentState { public String xhtml; } }  en bijbehorende js_label.js file - plaats in src/main/resources onder zelfde subdir als package van java file&amp;hellip;
be_vdab_nonstop_presentation_form_JsLabel = function() { var e = this.</description>
    </item>
    
  </channel>
</rss>