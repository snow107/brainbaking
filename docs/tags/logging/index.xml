<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Logging on Brain Baking</title>
    <link>http://www.brainbaking.com/tags/logging/</link>
    <description>Recent content in Logging on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Tue, 12 Mar 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.brainbaking.com/tags/logging/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>logging</title>
      <link>http://www.brainbaking.com/wiki/code/java/logging/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>http://www.brainbaking.com/wiki/code/java/logging/</guid>
      <description>code:java &amp;gt;&amp;gt; Logging Log4j Gebruiken over verschillende threads heen Probleem: JMS handlers die bijvoorbeeld tegelijk starten en loggen naar éénzelfde file met Logger.getLogger(x). Als een thread crasht en de andere afwerkt, maar we de volgorde van wegschrijven niet kunnen garanderen, hoe kunnen we dan dit onerscheid maken?
Oplossing: met NDC (Nested Diagnostic Context) - zie http://logging.apache.org/log4j/1.2/manual.html
Voorbeeld:
protected static final Logger jmsLogger = Logger.getLogger(&amp;quot;jmsLogger&amp;quot;); private void log(String message) { jmsLogger.</description>
    </item>
    
  </channel>
</rss>