<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Teaching on Brain Baking</title>
    <link>https://brainbaking.com/tags/teaching/</link>
    <description>Recent content in Teaching on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Wed, 25 Apr 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://brainbaking.com/tags/teaching/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Denken in termen van objecten</title>
      <link>https://brainbaking.com/post/thinking-in-terms-of-objects/</link>
      <pubDate>Wed, 25 Apr 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/thinking-in-terms-of-objects/</guid>
      <description>Software schrijven is niet veel anders dan een wereld beschrijven. Dé wereld, waarin wij leven, is één wereld. Met software kunnen we dus theoretisch gezien onze wereld beschrijven. Als we even niet aan software ontwikkeling denken, hoe beschrijven we dan een of de wereld? Hoe bouw ik een fantasie wereld op in een roman waarbij mijn lezers zich comfortabel kunnen inleven in die wereld?
Door beschrijvingen met behulp van onze taal.</description>
    </item>
    
    <item>
      <title>Are you handing over enough when inspiring someone?</title>
      <link>https://brainbaking.com/post/handing-over-enough-when-inspiring/</link>
      <pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/handing-over-enough-when-inspiring/</guid>
      <description>The other day, I was having a discussion with a friend and colleague about reaching out to others. He had an idea on combining patterns learned from the enterprise software development world (clean code, TDD, domain driven design, you name it) with patterns learned from the gaming development world (rapid prototyping, getting stuff done, intensive usage of frameworks like Unity). An excellent idea if you ask me. But he was hesitant - others might not be that interested in taking time to write unit tests in their game.</description>
    </item>
    
    <item>
      <title>How to teach kids to program</title>
      <link>https://brainbaking.com/post/teaching-kids-how-to-program/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/teaching-kids-how-to-program/</guid>
      <description>Jessica Ellis gave a lot of great tips on how to teach kids to program at Techorama 2017 in Antwerp. She has ben an active teacher in the tkplabs.org society and introduced something clever called &amp;ldquo;barbecoding&amp;rdquo;. In an attempt to create an appealing programming camp for boys and girls, she successfully combined food and science. She shared her story in an hour and I did my best to extract the most important principles as I thought it might be a great idea to apply that to our team in my daily work as a software developer.</description>
    </item>
    
  </channel>
</rss>