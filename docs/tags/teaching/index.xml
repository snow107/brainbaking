<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Teaching on Brain Baking</title>
    <link>https://brainbaking.com/tags/teaching/</link>
    <description>Recent content in Teaching on Brain Baking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>wouter.groeneveld@gmail.com (Wouter Groeneveld)</managingEditor>
    <webMaster>wouter.groeneveld@gmail.com (Wouter Groeneveld)</webMaster>
    <lastBuildDate>Fri, 29 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://brainbaking.com/tags/teaching/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Computer Science education modules</title>
      <link>https://brainbaking.com/post/informatics-education-modules/</link>
      <pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/informatics-education-modules/</guid>
      <description>Also worth reading: Reverse engineering a curriculum.
I happened to come across a very interesting study path for &amp;ldquo;game programmers&amp;rdquo; published at https://github.com/miloyip/game-programmer. It&amp;rsquo;s a nice visual representation of books that help you become a better (game) programmer, starting from zero (game programming for kids) and ending at advanced game physics and Artificial Intelligence. I am not keen on becoming a game programmer but the reason this is interesting is that the author has done a great job trying to categorize the different requirements - what it takes to be a programmer in general.</description>
    </item>
    
    <item>
      <title>Reverse engineering a curriculum</title>
      <link>https://brainbaking.com/post/reverse-engineering-a-curriculum/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/reverse-engineering-a-curriculum/</guid>
      <description>Also worth reading: Teaching by philosophy.
What if, instead of starting with the beginning, you&amp;rsquo;d start with imagining where you&amp;rsquo;d land if you&amp;rsquo;d successfully finish a big project? Thinking like this would temporarily eliminate the how question and focus on the what or why question on a higher level. It&amp;rsquo;s a good exercise that might net me new ideas or forge novel connections between two slumbering thoughts. Let&amp;rsquo;s try to imagine what a curriculum for computer science should look like ideally without holding back on the actual practical possibilities - based on rough ideas noted in my proposal.</description>
    </item>
    
    <item>
      <title>Teaching by philosophy</title>
      <link>https://brainbaking.com/post/teaching-philosophy-first/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/teaching-philosophy-first/</guid>
      <description>Also worth reading: reverse engineering a curriculum.
Awareness, that&amp;rsquo;s the keyword I&amp;rsquo;m looking for here.
Students are required to slog through a lot of classes during their university years. You pick a major, computer science, and you start learning things like algorithms, data structures, compilers, operating systems, and more abstract (maybe even worse) things like mathematics, geometry and logic. You of course accept those separate subjects as a part of the computer science major - there&amp;rsquo;s little other choice.</description>
    </item>
    
    <item>
      <title>Thinking in terms of objects</title>
      <link>https://brainbaking.com/post/thinking-in-terms-of-objects/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/thinking-in-terms-of-objects/</guid>
      <description>Writing software isn&amp;rsquo;t much different than describing a world. The world, where we live in, is a world, not the only one. With software, we could, theoretically speaking, describe our own world. If we don&amp;rsquo;t think about software, how would we describe that or another world? How would I build a fantasy world in a novel where my readers can relate to the world and be engaged?
By describing with our language.</description>
    </item>
    
    <item>
      <title>Are you handing over enough when inspiring someone?</title>
      <link>https://brainbaking.com/post/handing-over-enough-when-inspiring/</link>
      <pubDate>Tue, 30 May 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/handing-over-enough-when-inspiring/</guid>
      <description>The other day, I was having a discussion with a friend and colleague about reaching out to others. He had an idea on combining patterns learned from the enterprise software development world (clean code, TDD, domain driven design, you name it) with patterns learned from the gaming development world (rapid prototyping, getting stuff done, intensive usage of frameworks like Unity). An excellent idea if you ask me. But he was hesitant - others might not be that interested in taking time to write unit tests in their game.</description>
    </item>
    
    <item>
      <title>How to teach kids to program</title>
      <link>https://brainbaking.com/post/teaching-kids-how-to-program/</link>
      <pubDate>Thu, 25 May 2017 00:00:00 +0000</pubDate>
      <author>wouter.groeneveld@gmail.com (Wouter Groeneveld)</author>
      <guid>https://brainbaking.com/post/teaching-kids-how-to-program/</guid>
      <description>Jessica Ellis gave a lot of great tips on how to teach kids to program at Techorama 2017 in Antwerp. She has ben an active teacher in the tkplabs.org society and introduced something clever called &amp;ldquo;barbecoding&amp;rdquo;. In an attempt to create an appealing programming camp for boys and girls, she successfully combined food and science. She shared her story in an hour and I did my best to extract the most important principles as I thought it might be a great idea to apply that to our team in my daily work as a software developer.</description>
    </item>
    
  </channel>
</rss>